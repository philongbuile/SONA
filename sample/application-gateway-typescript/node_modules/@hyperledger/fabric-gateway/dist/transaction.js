"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TransactionImpl_instances, _TransactionImpl_client, _TransactionImpl_signingIdentity, _TransactionImpl_channelName, _TransactionImpl_preparedTransaction, _TransactionImpl_envelope, _TransactionImpl_result, _TransactionImpl_sign, _TransactionImpl_isSigned, _TransactionImpl_newSubmitRequest, _TransactionImpl_newSignedCommitStatusRequest, _TransactionImpl_newCommitStatusRequest;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionImpl = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const gateway_1 = require("./gateway");
const submittedtransaction_1 = require("./submittedtransaction");
const transactionparser_1 = require("./transactionparser");
class TransactionImpl {
    constructor(options) {
        _TransactionImpl_instances.add(this);
        _TransactionImpl_client.set(this, void 0);
        _TransactionImpl_signingIdentity.set(this, void 0);
        _TransactionImpl_channelName.set(this, void 0);
        _TransactionImpl_preparedTransaction.set(this, void 0);
        _TransactionImpl_envelope.set(this, void 0);
        _TransactionImpl_result.set(this, void 0);
        __classPrivateFieldSet(this, _TransactionImpl_client, options.client, "f");
        __classPrivateFieldSet(this, _TransactionImpl_signingIdentity, options.signingIdentity, "f");
        __classPrivateFieldSet(this, _TransactionImpl_preparedTransaction, options.preparedTransaction, "f");
        const envelope = (0, gateway_1.assertDefined)(options.preparedTransaction.getEnvelope(), 'Missing envelope');
        __classPrivateFieldSet(this, _TransactionImpl_envelope, envelope, "f");
        const { channelName, result } = (0, transactionparser_1.parseTransactionEnvelope)(envelope);
        __classPrivateFieldSet(this, _TransactionImpl_channelName, channelName, "f");
        __classPrivateFieldSet(this, _TransactionImpl_result, result, "f");
    }
    getBytes() {
        return __classPrivateFieldGet(this, _TransactionImpl_preparedTransaction, "f").serializeBinary();
    }
    getDigest() {
        const payload = __classPrivateFieldGet(this, _TransactionImpl_envelope, "f").getPayload_asU8();
        return __classPrivateFieldGet(this, _TransactionImpl_signingIdentity, "f").hash(payload);
    }
    getResult() {
        return __classPrivateFieldGet(this, _TransactionImpl_result, "f");
    }
    getTransactionId() {
        return __classPrivateFieldGet(this, _TransactionImpl_preparedTransaction, "f").getTransactionId();
    }
    async submit(options) {
        await __classPrivateFieldGet(this, _TransactionImpl_instances, "m", _TransactionImpl_sign).call(this);
        await __classPrivateFieldGet(this, _TransactionImpl_client, "f").submit(__classPrivateFieldGet(this, _TransactionImpl_instances, "m", _TransactionImpl_newSubmitRequest).call(this), options);
        return new submittedtransaction_1.SubmittedTransactionImpl({
            client: __classPrivateFieldGet(this, _TransactionImpl_client, "f"),
            signingIdentity: __classPrivateFieldGet(this, _TransactionImpl_signingIdentity, "f"),
            transactionId: this.getTransactionId(),
            signedRequest: __classPrivateFieldGet(this, _TransactionImpl_instances, "m", _TransactionImpl_newSignedCommitStatusRequest).call(this),
            result: this.getResult(),
        });
    }
    setSignature(signature) {
        __classPrivateFieldGet(this, _TransactionImpl_envelope, "f").setSignature(signature);
    }
}
exports.TransactionImpl = TransactionImpl;
_TransactionImpl_client = new WeakMap(), _TransactionImpl_signingIdentity = new WeakMap(), _TransactionImpl_channelName = new WeakMap(), _TransactionImpl_preparedTransaction = new WeakMap(), _TransactionImpl_envelope = new WeakMap(), _TransactionImpl_result = new WeakMap(), _TransactionImpl_instances = new WeakSet(), _TransactionImpl_sign = async function _TransactionImpl_sign() {
    if (__classPrivateFieldGet(this, _TransactionImpl_instances, "m", _TransactionImpl_isSigned).call(this)) {
        return;
    }
    const signature = await __classPrivateFieldGet(this, _TransactionImpl_signingIdentity, "f").sign(this.getDigest());
    this.setSignature(signature);
}, _TransactionImpl_isSigned = function _TransactionImpl_isSigned() {
    const signatureLength = __classPrivateFieldGet(this, _TransactionImpl_envelope, "f").getSignature_asU8()?.length || 0;
    return signatureLength > 0;
}, _TransactionImpl_newSubmitRequest = function _TransactionImpl_newSubmitRequest() {
    const result = new fabric_protos_1.gateway.SubmitRequest();
    result.setTransactionId(this.getTransactionId());
    result.setChannelId(__classPrivateFieldGet(this, _TransactionImpl_channelName, "f"));
    result.setPreparedTransaction(__classPrivateFieldGet(this, _TransactionImpl_envelope, "f"));
    return result;
}, _TransactionImpl_newSignedCommitStatusRequest = function _TransactionImpl_newSignedCommitStatusRequest() {
    const result = new fabric_protos_1.gateway.SignedCommitStatusRequest();
    result.setRequest(__classPrivateFieldGet(this, _TransactionImpl_instances, "m", _TransactionImpl_newCommitStatusRequest).call(this).serializeBinary());
    return result;
}, _TransactionImpl_newCommitStatusRequest = function _TransactionImpl_newCommitStatusRequest() {
    const result = new fabric_protos_1.gateway.CommitStatusRequest();
    result.setChannelId(__classPrivateFieldGet(this, _TransactionImpl_channelName, "f"));
    result.setTransactionId(this.getTransactionId());
    result.setIdentity(__classPrivateFieldGet(this, _TransactionImpl_signingIdentity, "f").getCreator());
    return result;
};
//# sourceMappingURL=transaction.js.map