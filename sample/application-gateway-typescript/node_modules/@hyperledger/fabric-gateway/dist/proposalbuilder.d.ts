import { GatewayClient } from './client';
import { Proposal } from './proposal';
import { SigningIdentity } from './signingidentity';
/**
 * Options used when evaluating or endorsing a transaction proposal.
 */
export interface ProposalOptions {
    /**
     * Arguments passed to the transaction function.
     */
    arguments?: (string | Uint8Array)[];
    /**
     * Private data passed to the transaction function but not recorded on the ledger.
     */
    transientData?: Record<string, string | Uint8Array>;
    /**
     * Specifies the set of organizations that will attempt to endorse the proposal.
     * No other organizations' peers will be sent this proposal.
     * This is usually used in conjunction with transientData for private data scenarios.
     */
    endorsingOrganizations?: string[];
}
export interface ProposalBuilderOptions extends ProposalOptions {
    client: GatewayClient;
    signingIdentity: SigningIdentity;
    channelName: string;
    chaincodeName: string;
    transactionName: string;
}
export declare class ProposalBuilder {
    #private;
    constructor(options: Readonly<ProposalBuilderOptions>);
    build(): Proposal;
}
//# sourceMappingURL=proposalbuilder.d.ts.map