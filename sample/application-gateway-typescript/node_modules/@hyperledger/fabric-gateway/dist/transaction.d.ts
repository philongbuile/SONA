import { CallOptions } from '@grpc/grpc-js';
import { gateway } from '@hyperledger/fabric-protos';
import { GatewayClient } from './client';
import { Signable } from './signable';
import { SigningIdentity } from './signingidentity';
import { SubmittedTransaction } from './submittedtransaction';
/**
 * Represents an endorsed transaction that can be submitted to the orderer for commit to the ledger.
 */
export interface Transaction extends Signable {
    /**
     * Get the transaction result. This is obtained during the endorsement process when the transaction proposal is
     * run on endorsing peers.
     */
    getResult(): Uint8Array;
    /**
     * Get the transaction ID.
     */
    getTransactionId(): string;
    /**
     * Submit the transaction to the orderer to be committed to the ledger.
     * @param options - gRPC call options.
     * @throws {@link SubmitError}
     * Thrown if the gRPC service invocation fails.
     */
    submit(options?: CallOptions): Promise<SubmittedTransaction>;
}
export interface TransactionImplOptions {
    client: GatewayClient;
    signingIdentity: SigningIdentity;
    preparedTransaction: gateway.PreparedTransaction;
}
export declare class TransactionImpl implements Transaction {
    #private;
    constructor(options: Readonly<TransactionImplOptions>);
    getBytes(): Uint8Array;
    getDigest(): Uint8Array;
    getResult(): Uint8Array;
    getTransactionId(): string;
    submit(options?: Readonly<CallOptions>): Promise<SubmittedTransaction>;
    setSignature(signature: Uint8Array): void;
}
//# sourceMappingURL=transaction.d.ts.map