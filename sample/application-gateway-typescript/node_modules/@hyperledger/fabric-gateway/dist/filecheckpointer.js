"use strict";
/*
 * Copyright 2022 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _FileCheckPointer_instances, _FileCheckPointer_path, _FileCheckPointer_blockNumber, _FileCheckPointer_transactionId, _FileCheckPointer_loadFromFile, _FileCheckPointer_readFile, _FileCheckPointer_setState, _FileCheckPointer_getState, _FileCheckPointer_saveToFile;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileCheckPointer = void 0;
const fs_1 = __importDefault(require("fs"));
class FileCheckPointer {
    constructor(path) {
        _FileCheckPointer_instances.add(this);
        _FileCheckPointer_path.set(this, void 0);
        _FileCheckPointer_blockNumber.set(this, void 0);
        _FileCheckPointer_transactionId.set(this, void 0);
        __classPrivateFieldSet(this, _FileCheckPointer_path, path, "f");
    }
    async init() {
        await __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_loadFromFile).call(this);
        await __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_saveToFile).call(this);
    }
    async checkpointBlock(blockNumber) {
        __classPrivateFieldSet(this, _FileCheckPointer_blockNumber, blockNumber + BigInt(1), "f");
        __classPrivateFieldSet(this, _FileCheckPointer_transactionId, undefined, "f");
        await __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_saveToFile).call(this);
    }
    async checkpointTransaction(blockNumber, transactionId) {
        __classPrivateFieldSet(this, _FileCheckPointer_blockNumber, blockNumber, "f");
        __classPrivateFieldSet(this, _FileCheckPointer_transactionId, transactionId, "f");
        await __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_saveToFile).call(this);
    }
    async checkpointChaincodeEvent(event) {
        await this.checkpointTransaction(event.blockNumber, event.transactionId);
    }
    getBlockNumber() {
        return __classPrivateFieldGet(this, _FileCheckPointer_blockNumber, "f");
    }
    getTransactionId() {
        return __classPrivateFieldGet(this, _FileCheckPointer_transactionId, "f");
    }
}
exports.FileCheckPointer = FileCheckPointer;
_FileCheckPointer_path = new WeakMap(), _FileCheckPointer_blockNumber = new WeakMap(), _FileCheckPointer_transactionId = new WeakMap(), _FileCheckPointer_instances = new WeakSet(), _FileCheckPointer_loadFromFile = async function _FileCheckPointer_loadFromFile() {
    const fileDataBuffer = await __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_readFile).call(this);
    if (fileDataBuffer) {
        const data = fileDataBuffer.toString();
        if (data.length !== 0) {
            const state = JSON.parse(data);
            __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_setState).call(this, state);
        }
    }
}, _FileCheckPointer_readFile = async function _FileCheckPointer_readFile() {
    try {
        return await fs_1.default.promises.readFile(__classPrivateFieldGet(this, _FileCheckPointer_path, "f"));
    }
    catch (e) {
        // ignore file not exist error.
    }
    return;
}, _FileCheckPointer_setState = function _FileCheckPointer_setState(state) {
    __classPrivateFieldSet(this, _FileCheckPointer_blockNumber, state.blockNumber != undefined ? BigInt(state.blockNumber) : state.blockNumber, "f");
    __classPrivateFieldSet(this, _FileCheckPointer_transactionId, state.transactionId, "f");
}, _FileCheckPointer_getState = function _FileCheckPointer_getState() {
    return {
        blockNumber: __classPrivateFieldGet(this, _FileCheckPointer_blockNumber, "f")?.toString(),
        transactionId: __classPrivateFieldGet(this, _FileCheckPointer_transactionId, "f"),
    };
}, _FileCheckPointer_saveToFile = async function _FileCheckPointer_saveToFile() {
    const state = __classPrivateFieldGet(this, _FileCheckPointer_instances, "m", _FileCheckPointer_getState).call(this);
    const bufferState = Buffer.from(JSON.stringify(state));
    await fs_1.default.promises.writeFile(__classPrivateFieldGet(this, _FileCheckPointer_path, "f"), bufferState);
};
//# sourceMappingURL=filecheckpointer.js.map