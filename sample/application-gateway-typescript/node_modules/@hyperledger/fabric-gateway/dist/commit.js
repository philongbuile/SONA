"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CommitImpl_instances, _CommitImpl_client, _CommitImpl_signingIdentity, _CommitImpl_transactionId, _CommitImpl_signedRequest, _CommitImpl_sign, _CommitImpl_isSigned, _CommitImpl_newStatus;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommitImpl = void 0;
const status_1 = require("./status");
class CommitImpl {
    constructor(options) {
        _CommitImpl_instances.add(this);
        _CommitImpl_client.set(this, void 0);
        _CommitImpl_signingIdentity.set(this, void 0);
        _CommitImpl_transactionId.set(this, void 0);
        _CommitImpl_signedRequest.set(this, void 0);
        __classPrivateFieldSet(this, _CommitImpl_client, options.client, "f");
        __classPrivateFieldSet(this, _CommitImpl_signingIdentity, options.signingIdentity, "f");
        __classPrivateFieldSet(this, _CommitImpl_transactionId, options.transactionId, "f");
        __classPrivateFieldSet(this, _CommitImpl_signedRequest, options.signedRequest, "f");
    }
    getBytes() {
        return __classPrivateFieldGet(this, _CommitImpl_signedRequest, "f").serializeBinary();
    }
    getDigest() {
        const request = __classPrivateFieldGet(this, _CommitImpl_signedRequest, "f").getRequest_asU8();
        return __classPrivateFieldGet(this, _CommitImpl_signingIdentity, "f").hash(request);
    }
    async getStatus(options) {
        await __classPrivateFieldGet(this, _CommitImpl_instances, "m", _CommitImpl_sign).call(this);
        const response = await __classPrivateFieldGet(this, _CommitImpl_client, "f").commitStatus(__classPrivateFieldGet(this, _CommitImpl_signedRequest, "f"), options);
        return __classPrivateFieldGet(this, _CommitImpl_instances, "m", _CommitImpl_newStatus).call(this, response);
    }
    getTransactionId() {
        return __classPrivateFieldGet(this, _CommitImpl_transactionId, "f");
    }
    setSignature(signature) {
        __classPrivateFieldGet(this, _CommitImpl_signedRequest, "f").setSignature(signature);
    }
}
exports.CommitImpl = CommitImpl;
_CommitImpl_client = new WeakMap(), _CommitImpl_signingIdentity = new WeakMap(), _CommitImpl_transactionId = new WeakMap(), _CommitImpl_signedRequest = new WeakMap(), _CommitImpl_instances = new WeakSet(), _CommitImpl_sign = async function _CommitImpl_sign() {
    if (__classPrivateFieldGet(this, _CommitImpl_instances, "m", _CommitImpl_isSigned).call(this)) {
        return;
    }
    const signature = await __classPrivateFieldGet(this, _CommitImpl_signingIdentity, "f").sign(this.getDigest());
    this.setSignature(signature);
}, _CommitImpl_isSigned = function _CommitImpl_isSigned() {
    const signatureLength = __classPrivateFieldGet(this, _CommitImpl_signedRequest, "f").getSignature()?.length || 0;
    return signatureLength > 0;
}, _CommitImpl_newStatus = function _CommitImpl_newStatus(response) {
    const code = response.getResult() ?? status_1.StatusCode.INVALID_OTHER_REASON;
    return {
        blockNumber: BigInt(response.getBlockNumber()),
        code,
        successful: code === status_1.StatusCode.VALID,
        transactionId: __classPrivateFieldGet(this, _CommitImpl_transactionId, "f"),
    };
};
//# sourceMappingURL=commit.js.map