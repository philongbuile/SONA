"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GatewayClientImpl_instances, _GatewayClientImpl_client, _GatewayClientImpl_defaultOptions, _GatewayClientImpl_makeServerStreamRequest, _GatewayClientImpl_makeBidiStreamRequest;
Object.defineProperty(exports, "__esModule", { value: true });
exports.newGatewayClient = exports.deliverWithPrivateDataMethod = exports.deliverFilteredMethod = exports.deliverMethod = exports.chaincodeEventsMethod = exports.commitStatusMethod = exports.submitMethod = exports.endorseMethod = exports.evaluateMethod = void 0;
const grpc_js_1 = require("@grpc/grpc-js");
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const commitstatuserror_1 = require("./commitstatuserror");
const endorseerror_1 = require("./endorseerror");
const gatewayerror_1 = require("./gatewayerror");
const submiterror_1 = require("./submiterror");
exports.evaluateMethod = '/gateway.Gateway/Evaluate';
exports.endorseMethod = '/gateway.Gateway/Endorse';
exports.submitMethod = '/gateway.Gateway/Submit';
exports.commitStatusMethod = '/gateway.Gateway/CommitStatus';
exports.chaincodeEventsMethod = '/gateway.Gateway/ChaincodeEvents';
exports.deliverMethod = '/protos.Deliver/Deliver';
exports.deliverFilteredMethod = '/protos.Deliver/DeliverFiltered';
exports.deliverWithPrivateDataMethod = '/protos.Deliver/DeliverWithPrivateData';
class GatewayClientImpl {
    constructor(client, defaultOptions) {
        _GatewayClientImpl_instances.add(this);
        _GatewayClientImpl_client.set(this, void 0);
        _GatewayClientImpl_defaultOptions.set(this, void 0);
        __classPrivateFieldSet(this, _GatewayClientImpl_client, client, "f");
        __classPrivateFieldSet(this, _GatewayClientImpl_defaultOptions, Object.assign({}, defaultOptions), "f");
    }
    evaluate(request, options) {
        return new Promise((resolve, reject) => __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeUnaryRequest(exports.evaluateMethod, serialize, deserializeEvaluateResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").evaluateOptions, options), newUnaryCallback(resolve, reject)));
    }
    endorse(request, options) {
        return new Promise((resolve, reject) => __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeUnaryRequest(exports.endorseMethod, serialize, deserializeEndorseResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").endorseOptions, options), newUnaryCallback(resolve, reject, err => new endorseerror_1.EndorseError(Object.assign(err, { transactionId: request.getTransactionId() })))));
    }
    submit(request, options) {
        return new Promise((resolve, reject) => __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeUnaryRequest(exports.submitMethod, serialize, deserializeSubmitResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").submitOptions, options), newUnaryCallback(resolve, reject, err => new submiterror_1.SubmitError(Object.assign(err, { transactionId: request.getTransactionId() })))));
    }
    commitStatus(request, options) {
        return new Promise((resolve, reject) => __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeUnaryRequest(exports.commitStatusMethod, serialize, deserializeCommitStatusResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").commitStatusOptions, options), newUnaryCallback(resolve, reject, err => {
            const req = fabric_protos_1.gateway.CommitStatusRequest.deserializeBinary(request.getRequest_asU8());
            return new commitstatuserror_1.CommitStatusError(Object.assign(err, { transactionId: req.getTransactionId() }));
        })));
    }
    chaincodeEvents(request, options) {
        return __classPrivateFieldGet(this, _GatewayClientImpl_instances, "m", _GatewayClientImpl_makeServerStreamRequest).call(this, exports.chaincodeEventsMethod, deserializeChaincodeEventsResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").chaincodeEventsOptions, options));
    }
    blockEvents(request, options) {
        return __classPrivateFieldGet(this, _GatewayClientImpl_instances, "m", _GatewayClientImpl_makeBidiStreamRequest).call(this, exports.deliverMethod, deserializeDeliverResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").blockEventsOptions, options));
    }
    filteredBlockEvents(request, options) {
        return __classPrivateFieldGet(this, _GatewayClientImpl_instances, "m", _GatewayClientImpl_makeBidiStreamRequest).call(this, exports.deliverFilteredMethod, deserializeDeliverResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").filteredBlockEventsOptions, options));
    }
    blockAndPrivateDataEvents(request, options) {
        return __classPrivateFieldGet(this, _GatewayClientImpl_instances, "m", _GatewayClientImpl_makeBidiStreamRequest).call(this, exports.deliverWithPrivateDataMethod, deserializeDeliverResponse, request, buildOptions(__classPrivateFieldGet(this, _GatewayClientImpl_defaultOptions, "f").blockAndPrivateDataEventsOptions, options));
    }
}
_GatewayClientImpl_client = new WeakMap(), _GatewayClientImpl_defaultOptions = new WeakMap(), _GatewayClientImpl_instances = new WeakSet(), _GatewayClientImpl_makeServerStreamRequest = function _GatewayClientImpl_makeServerStreamRequest(method, deserialize, argument, options) {
    try {
        const serverStream = __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeServerStreamRequest(method, serialize, deserialize, argument, options);
        return {
            [Symbol.asyncIterator]: () => wrapAsyncIterator(serverStream[Symbol.asyncIterator]()),
            close: () => serverStream.cancel(),
        };
    }
    catch (err) {
        rethrowGrpcError(err);
    }
}, _GatewayClientImpl_makeBidiStreamRequest = function _GatewayClientImpl_makeBidiStreamRequest(method, deserialize, request, options) {
    try {
        const duplexStream = __classPrivateFieldGet(this, _GatewayClientImpl_client, "f").makeBidiStreamRequest(method, serialize, deserialize, options);
        duplexStream.write(request);
        return {
            [Symbol.asyncIterator]: () => wrapAsyncIterator(duplexStream[Symbol.asyncIterator]()),
            close: () => duplexStream.cancel(),
        };
    }
    catch (err) {
        rethrowGrpcError(err);
    }
};
function buildOptions(defaultOptions, options) {
    return Object.assign({}, defaultOptions?.(), options);
}
function newUnaryCallback(resolve, reject, wrap = (err => err)) {
    return (err, value) => {
        if (err) {
            return reject(wrap((0, gatewayerror_1.newGatewayError)(err)));
        }
        if (value == null) {
            return reject(new Error('No result returned'));
        }
        return resolve(value);
    };
}
function wrapAsyncIterator(iterator) {
    return {
        next: async (...args) => {
            try {
                return await iterator.next(...args);
            }
            catch (err) {
                rethrowGrpcError(err);
            }
        }
    };
}
function rethrowGrpcError(err) {
    if (isServiceError(err)) {
        throw (0, gatewayerror_1.newGatewayError)(err);
    }
    throw err;
}
function isServiceError(err) {
    return typeof err.code === 'number' &&
        typeof err.details === 'string' &&
        err.metadata instanceof grpc_js_1.Metadata &&
        err instanceof Error;
}
function serialize(message) {
    const bytes = message.serializeBinary();
    return Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength); // Create a Buffer view to avoid copying
}
function deserializeEvaluateResponse(bytes) {
    return fabric_protos_1.gateway.EvaluateResponse.deserializeBinary(bytes);
}
function deserializeEndorseResponse(bytes) {
    return fabric_protos_1.gateway.EndorseResponse.deserializeBinary(bytes);
}
function deserializeSubmitResponse(bytes) {
    return fabric_protos_1.gateway.SubmitResponse.deserializeBinary(bytes);
}
function deserializeCommitStatusResponse(bytes) {
    return fabric_protos_1.gateway.CommitStatusResponse.deserializeBinary(bytes);
}
function deserializeChaincodeEventsResponse(bytes) {
    return fabric_protos_1.gateway.ChaincodeEventsResponse.deserializeBinary(bytes);
}
function deserializeDeliverResponse(bytes) {
    return fabric_protos_1.peer.DeliverResponse.deserializeBinary(bytes);
}
function newGatewayClient(client, defaultOptions) {
    return new GatewayClientImpl(client, defaultOptions);
}
exports.newGatewayClient = newGatewayClient;
//# sourceMappingURL=client.js.map