"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.newHSMSignerFactory = exports.newPrivateKeySigner = void 0;
const elliptic_1 = require("elliptic");
const asn1_1 = require("./asn1");
const namedCurves = {
    '1.2.840.10045.3.1.7': new elliptic_1.ec('p256'),
    '1.3.132.0.34': new elliptic_1.ec('p384'),
};
/**
 * Create a new signing implementation that uses the supplied private key to sign messages.
 *
 * Currently supported private key types are:
 * - NIST P-256 elliptic curve.
 * - NIST P-384 elliptic curve.
 * @param key - A private key.
 * @returns A signing implementation.
 */
function newPrivateKeySigner(key) {
    if (key.type !== 'private') {
        throw new Error(`Invalid key type: ${key.type}`);
    }
    switch (key.asymmetricKeyType) {
        case 'ec':
            return newECPrivateKeySigner(key);
        default:
            throw new Error(`Unsupported private key type: ${key.asymmetricKeyType ?? 'undefined'}`);
    }
}
exports.newPrivateKeySigner = newPrivateKeySigner;
function newECPrivateKeySigner(key) {
    const { privateKey: rawKey, curveObjectId } = (0, asn1_1.ecPrivateKeyAsRaw)(key);
    const curve = getCurve(curveObjectId);
    const keyPair = curve.keyFromPrivate(rawKey, 'hex');
    return (digest) => {
        const signature = curve.sign(digest, keyPair, { canonical: true });
        const signatureBytes = new Uint8Array(signature.toDER());
        return Promise.resolve(signatureBytes);
    };
}
function getCurve(objectIdBytes) {
    const objectId = objectIdBytes.join('.');
    const curve = namedCurves[objectId];
    if (!curve) {
        throw new Error(`Unsupported curve object identifier: ${objectId}`);
    }
    return curve;
}
/**
 * Create an HSM Signer factory. A single signer factory instance should be used to create all required HSM signers.
 */
function newHSMSignerFactory(library) {
    if (!library || library.trim() === '') {
        throw new Error('library must be provided');
    }
    // Dynamic module load to prevent unnecessary load of optional pkcs11js dependency
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { HSMSignerFactoryImpl } = require('./hsmsigner');
    return new HSMSignerFactoryImpl(library);
}
exports.newHSMSignerFactory = newHSMSignerFactory;
//# sourceMappingURL=signers.js.map