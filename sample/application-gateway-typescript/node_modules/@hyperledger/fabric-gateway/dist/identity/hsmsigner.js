"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _HSMSignerFactoryImpl_instances, _HSMSignerFactoryImpl_pkcs11, _HSMSignerFactoryImpl_findSlotForLabel, _HSMSignerFactoryImpl_login, _HSMSignerFactoryImpl_findObjectInHSM;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HSMSignerFactoryImpl = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
const elliptic = __importStar(require("elliptic"));
const pkcs11js = __importStar(require("pkcs11js"));
const asn1_1 = require("./asn1");
class HSMSignerFactoryImpl {
    constructor(library) {
        _HSMSignerFactoryImpl_instances.add(this);
        _HSMSignerFactoryImpl_pkcs11.set(this, void 0);
        __classPrivateFieldSet(this, _HSMSignerFactoryImpl_pkcs11, new pkcs11js.PKCS11(), "f");
        __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").load(library);
        __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_Initialize();
    }
    dispose() {
        __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_Finalize();
    }
    newSigner(hsmSignerOptions) {
        const options = sanitizeOptions(hsmSignerOptions);
        const supportedKeySize = 256;
        const pkcs11 = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f");
        const slot = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_instances, "m", _HSMSignerFactoryImpl_findSlotForLabel).call(this, options.label);
        const session = pkcs11.C_OpenSession(slot, pkcs11js.CKF_SERIAL_SESSION);
        let privateKeyHandle;
        try {
            __classPrivateFieldGet(this, _HSMSignerFactoryImpl_instances, "m", _HSMSignerFactoryImpl_login).call(this, session, options.userType, options.pin);
            privateKeyHandle = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_instances, "m", _HSMSignerFactoryImpl_findObjectInHSM).call(this, session, pkcs11js.CKO_PRIVATE_KEY, options.identifier);
        }
        catch (err) {
            pkcs11.C_CloseSession(session);
            throw err;
        }
        const definedCurves = elliptic.curves;
        const ecdsaCurve = definedCurves[`p${supportedKeySize}`];
        // currently the only supported curve is p256 and it will always have an 'n' value
        const curveBigNum = ecdsaCurve.n; // eslint-disable-line @typescript-eslint/no-non-null-assertion
        const halfOrder = curveBigNum.shrn(1);
        return {
            signer: (digest) => {
                pkcs11.C_SignInit(session, { mechanism: pkcs11js.CKM_ECDSA }, privateKeyHandle);
                const sig = pkcs11.C_Sign(session, Buffer.from(digest), Buffer.alloc(supportedKeySize));
                const r = new bn_js_1.default(sig.slice(0, sig.length / 2).toString('hex'), 16);
                let s = new bn_js_1.default(sig.slice(sig.length / 2).toString('hex'), 16);
                if (s.cmp(halfOrder) === 1) {
                    s = curveBigNum.sub(s);
                }
                const signature = new Uint8Array((0, asn1_1.ecRawSignatureAsDer)(r, s));
                return Promise.resolve(signature);
            },
            close: () => pkcs11.C_CloseSession(session),
        };
    }
}
exports.HSMSignerFactoryImpl = HSMSignerFactoryImpl;
_HSMSignerFactoryImpl_pkcs11 = new WeakMap(), _HSMSignerFactoryImpl_instances = new WeakSet(), _HSMSignerFactoryImpl_findSlotForLabel = function _HSMSignerFactoryImpl_findSlotForLabel(pkcs11Label) {
    const slots = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_GetSlotList(true);
    if (!slots || slots.length === 0) {
        throw new Error('No pkcs11 slots can be found');
    }
    const slot = slots.find(slotToCheck => {
        const tokenInfo = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_GetTokenInfo(slotToCheck);
        return tokenInfo?.label?.trim() === pkcs11Label;
    });
    if (!slot) {
        throw new Error(`label ${pkcs11Label} cannot be found in the pkcs11 slot list`);
    }
    return slot;
}, _HSMSignerFactoryImpl_login = function _HSMSignerFactoryImpl_login(session, userType, pin) {
    try {
        __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_Login(session, userType, pin);
    }
    catch (err) {
        const pkcs11err = err;
        if (pkcs11err.code !== pkcs11js.CKR_USER_ALREADY_LOGGED_IN) {
            throw err;
        }
    }
}, _HSMSignerFactoryImpl_findObjectInHSM = function _HSMSignerFactoryImpl_findObjectInHSM(session, keytype, identifier) {
    const pkcs11Template = [
        { type: pkcs11js.CKA_ID, value: identifier },
        { type: pkcs11js.CKA_CLASS, value: keytype },
        { type: pkcs11js.CKA_KEY_TYPE, value: pkcs11js.CKK_EC }
    ];
    __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_FindObjectsInit(session, pkcs11Template);
    const hsmObjects = __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_FindObjects(session, 1);
    if (!hsmObjects || hsmObjects.length === 0) {
        __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_FindObjectsFinal(session);
        throw new Error(`Unable to find object in HSM with ID ${identifier.toString()}`);
    }
    __classPrivateFieldGet(this, _HSMSignerFactoryImpl_pkcs11, "f").C_FindObjectsFinal(session);
    return hsmObjects[0];
};
function sanitizeOptions(hsmSignerOptions) {
    const options = Object.assign({
        userType: pkcs11js.CKU_USER,
    }, hsmSignerOptions);
    assertNotEmpty(options.label, 'label');
    assertNotEmpty(options.pin, 'pin');
    assertNotEmpty(options.identifier, 'identifier');
    return options;
}
function assertNotEmpty(property, name) {
    if (!property || property.toString().trim().length === 0) {
        throw new Error(`${name} property must be provided`);
    }
}
//# sourceMappingURL=hsmsigner.js.map