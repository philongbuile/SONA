import { CallOptions } from '@grpc/grpc-js';
import { gateway } from '@hyperledger/fabric-protos';
import { GatewayClient } from './client';
import { Signable } from './signable';
import { SigningIdentity } from './signingidentity';
import { Status } from './status';
/**
 * Allows access to information about a transaction that is committed to the ledger.
 */
export interface Commit extends Signable {
    /**
     * Get status of the committed transaction. If the transaction has not yet committed, this method blocks until the
     * commit occurs.
     * @param options - gRPC call options.
     * @throws {@link CommitStatusError}
     * Thrown if the gRPC service invocation fails.
     */
    getStatus(options?: CallOptions): Promise<Status>;
    /**
     * Get the ID of the transaction.
     */
    getTransactionId(): string;
}
export interface CommitImplOptions {
    client: GatewayClient;
    signingIdentity: SigningIdentity;
    transactionId: string;
    signedRequest: gateway.SignedCommitStatusRequest;
}
export declare class CommitImpl implements Commit {
    #private;
    constructor(options: Readonly<CommitImplOptions>);
    getBytes(): Uint8Array;
    getDigest(): Uint8Array;
    getStatus(options?: CallOptions): Promise<Status>;
    getTransactionId(): string;
    setSignature(signature: Uint8Array): void;
}
//# sourceMappingURL=commit.d.ts.map