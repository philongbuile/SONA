import { BlockAndPrivateDataEventsRequest, BlockEventsRequest, FilteredBlockEventsRequest } from './blockeventsrequest';
import { GatewayClient } from './client';
import { EventsOptions } from './eventsbuilder';
import { SigningIdentity } from './signingidentity';
/**
 * Options used when requesting block events.
 */
export declare type BlockEventsOptions = EventsOptions;
export interface BlockEventsBuilderOptions extends EventsOptions {
    client: GatewayClient;
    signingIdentity: SigningIdentity;
    channelName: string;
}
export declare class BlockEventsBuilder {
    #private;
    constructor(options: Readonly<BlockEventsBuilderOptions>);
    build(): BlockEventsRequest;
}
export declare class FilteredBlockEventsBuilder {
    #private;
    constructor(options: Readonly<BlockEventsBuilderOptions>);
    build(): FilteredBlockEventsRequest;
}
export declare class BlockAndPrivateDataEventsBuilder {
    #private;
    constructor(options: Readonly<BlockEventsBuilderOptions>);
    build(): BlockAndPrivateDataEventsRequest;
}
//# sourceMappingURL=blockeventsbuilder.d.ts.map