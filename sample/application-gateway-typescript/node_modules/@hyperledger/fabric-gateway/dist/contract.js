"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ContractImpl_instances, _ContractImpl_client, _ContractImpl_signingIdentity, _ContractImpl_channelName, _ContractImpl_chaincodeName, _ContractImpl_contractName, _ContractImpl_getQualifiedTransactionName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractImpl = void 0;
const commiterror_1 = require("./commiterror");
const proposalbuilder_1 = require("./proposalbuilder");
class ContractImpl {
    constructor(options) {
        _ContractImpl_instances.add(this);
        _ContractImpl_client.set(this, void 0);
        _ContractImpl_signingIdentity.set(this, void 0);
        _ContractImpl_channelName.set(this, void 0);
        _ContractImpl_chaincodeName.set(this, void 0);
        _ContractImpl_contractName.set(this, void 0);
        __classPrivateFieldSet(this, _ContractImpl_client, options.client, "f");
        __classPrivateFieldSet(this, _ContractImpl_signingIdentity, options.signingIdentity, "f");
        __classPrivateFieldSet(this, _ContractImpl_channelName, options.channelName, "f");
        __classPrivateFieldSet(this, _ContractImpl_chaincodeName, options.chaincodeName, "f");
        __classPrivateFieldSet(this, _ContractImpl_contractName, options.contractName, "f");
    }
    getChaincodeName() {
        return __classPrivateFieldGet(this, _ContractImpl_chaincodeName, "f");
    }
    getContractName() {
        return __classPrivateFieldGet(this, _ContractImpl_contractName, "f");
    }
    async evaluateTransaction(name, ...args) {
        return this.evaluate(name, { arguments: args });
    }
    async submitTransaction(name, ...args) {
        return this.submit(name, { arguments: args });
    }
    async evaluate(transactionName, options) {
        return this.newProposal(transactionName, options).evaluate();
    }
    async submit(transactionName, options) {
        const submitted = await this.submitAsync(transactionName, options);
        const status = await submitted.getStatus();
        if (!status.successful) {
            throw (0, commiterror_1.newCommitError)(status);
        }
        return submitted.getResult();
    }
    async submitAsync(transactionName, options) {
        const transaction = await this.newProposal(transactionName, options).endorse();
        return await transaction.submit();
    }
    newProposal(transactionName, options = {}) {
        return new proposalbuilder_1.ProposalBuilder(Object.assign({}, options, {
            client: __classPrivateFieldGet(this, _ContractImpl_client, "f"),
            signingIdentity: __classPrivateFieldGet(this, _ContractImpl_signingIdentity, "f"),
            channelName: __classPrivateFieldGet(this, _ContractImpl_channelName, "f"),
            chaincodeName: __classPrivateFieldGet(this, _ContractImpl_chaincodeName, "f"),
            transactionName: __classPrivateFieldGet(this, _ContractImpl_instances, "m", _ContractImpl_getQualifiedTransactionName).call(this, transactionName),
        })).build();
    }
}
exports.ContractImpl = ContractImpl;
_ContractImpl_client = new WeakMap(), _ContractImpl_signingIdentity = new WeakMap(), _ContractImpl_channelName = new WeakMap(), _ContractImpl_chaincodeName = new WeakMap(), _ContractImpl_contractName = new WeakMap(), _ContractImpl_instances = new WeakSet(), _ContractImpl_getQualifiedTransactionName = function _ContractImpl_getQualifiedTransactionName(transactionName) {
    return __classPrivateFieldGet(this, _ContractImpl_contractName, "f") ? `${__classPrivateFieldGet(this, _ContractImpl_contractName, "f")}:${transactionName}` : transactionName;
};
//# sourceMappingURL=contract.js.map