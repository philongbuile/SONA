"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.newGatewayError = exports.GatewayError = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
/**
 * A GatewayError is thrown if an error is encountered while processing a transaction through the gateway.
 * Since the gateway delegates much of the processing to other nodes (endorsing peers and orderers), then
 * the error could have originated from one or more of those nodes.  In that case, the details field will
 * contain an array of ErrorDetail objects.
 */
class GatewayError extends Error {
    constructor(properties) {
        super(properties.message);
        this.name = GatewayError.name;
        this.code = properties.code;
        this.details = properties.details;
        this.cause = properties.cause;
    }
}
exports.GatewayError = GatewayError;
function newGatewayError(err) {
    const metadata = err.metadata?.get('grpc-status-details-bin') || [];
    const details = metadata
        .flatMap(metadataValue => fabric_protos_1.google.rpc.Status.deserializeBinary(Buffer.from(metadataValue)).getDetailsList())
        .map(statusDetail => {
        const endpointError = fabric_protos_1.gateway.ErrorDetail.deserializeBinary(statusDetail.getValue_asU8());
        const detail = {
            address: endpointError.getAddress(),
            message: endpointError.getMessage(),
            mspId: endpointError.getMspId(),
        };
        return detail;
    });
    return new GatewayError({
        message: err.message,
        code: err.code,
        details,
        cause: err,
    });
}
exports.newGatewayError = newGatewayError;
//# sourceMappingURL=gatewayerror.js.map