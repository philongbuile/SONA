"use strict";
/*
 * Copyright 2022 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SignableBlockEventsRequest_instances, _SignableBlockEventsRequest_signingIdentity, _SignableBlockEventsRequest_request, _SignableBlockEventsRequest_isSigned, _BlockEventsRequestImpl_client, _FilteredBlockEventsRequestImpl_client, _BlockAndPrivateDataEventsRequestImpl_client;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockAndPrivateDataEventsRequestImpl = exports.FilteredBlockEventsRequestImpl = exports.BlockEventsRequestImpl = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const gateway_1 = require("./gateway");
class SignableBlockEventsRequest {
    constructor(options) {
        _SignableBlockEventsRequest_instances.add(this);
        _SignableBlockEventsRequest_signingIdentity.set(this, void 0);
        _SignableBlockEventsRequest_request.set(this, void 0);
        __classPrivateFieldSet(this, _SignableBlockEventsRequest_signingIdentity, options.signingIdentity, "f");
        __classPrivateFieldSet(this, _SignableBlockEventsRequest_request, options.request, "f");
    }
    getBytes() {
        return __classPrivateFieldGet(this, _SignableBlockEventsRequest_request, "f").serializeBinary();
    }
    getDigest() {
        return __classPrivateFieldGet(this, _SignableBlockEventsRequest_signingIdentity, "f").hash(__classPrivateFieldGet(this, _SignableBlockEventsRequest_request, "f").getPayload_asU8());
    }
    setSignature(signature) {
        __classPrivateFieldGet(this, _SignableBlockEventsRequest_request, "f").setSignature(signature);
    }
    async getSignedRequest() {
        if (!__classPrivateFieldGet(this, _SignableBlockEventsRequest_instances, "m", _SignableBlockEventsRequest_isSigned).call(this)) {
            const signature = await __classPrivateFieldGet(this, _SignableBlockEventsRequest_signingIdentity, "f").sign(this.getDigest());
            this.setSignature(signature);
        }
        return __classPrivateFieldGet(this, _SignableBlockEventsRequest_request, "f");
    }
}
_SignableBlockEventsRequest_signingIdentity = new WeakMap(), _SignableBlockEventsRequest_request = new WeakMap(), _SignableBlockEventsRequest_instances = new WeakSet(), _SignableBlockEventsRequest_isSigned = function _SignableBlockEventsRequest_isSigned() {
    const signatureLength = __classPrivateFieldGet(this, _SignableBlockEventsRequest_request, "f").getSignature()?.length || 0;
    return signatureLength > 0;
};
class BlockEventsRequestImpl extends SignableBlockEventsRequest {
    constructor(options) {
        super(options);
        _BlockEventsRequestImpl_client.set(this, void 0);
        __classPrivateFieldSet(this, _BlockEventsRequestImpl_client, options.client, "f");
    }
    async getEvents(options) {
        const signedRequest = await this.getSignedRequest();
        const responses = __classPrivateFieldGet(this, _BlockEventsRequestImpl_client, "f").blockEvents(signedRequest, options);
        return {
            [Symbol.asyncIterator]: () => mapAsyncIterator(responses[Symbol.asyncIterator](), response => getBlock(response, () => response.getBlock())),
            close: () => responses.close(),
        };
    }
}
exports.BlockEventsRequestImpl = BlockEventsRequestImpl;
_BlockEventsRequestImpl_client = new WeakMap();
class FilteredBlockEventsRequestImpl extends SignableBlockEventsRequest {
    constructor(options) {
        super(options);
        _FilteredBlockEventsRequestImpl_client.set(this, void 0);
        __classPrivateFieldSet(this, _FilteredBlockEventsRequestImpl_client, options.client, "f");
    }
    async getEvents(options) {
        const signedRequest = await this.getSignedRequest();
        const responses = __classPrivateFieldGet(this, _FilteredBlockEventsRequestImpl_client, "f").filteredBlockEvents(signedRequest, options);
        return {
            [Symbol.asyncIterator]: () => mapAsyncIterator(responses[Symbol.asyncIterator](), response => getBlock(response, () => response.getFilteredBlock())),
            close: () => responses.close(),
        };
    }
}
exports.FilteredBlockEventsRequestImpl = FilteredBlockEventsRequestImpl;
_FilteredBlockEventsRequestImpl_client = new WeakMap();
class BlockAndPrivateDataEventsRequestImpl extends SignableBlockEventsRequest {
    constructor(options) {
        super(options);
        _BlockAndPrivateDataEventsRequestImpl_client.set(this, void 0);
        __classPrivateFieldSet(this, _BlockAndPrivateDataEventsRequestImpl_client, options.client, "f");
    }
    async getEvents(options) {
        const signedRequest = await this.getSignedRequest();
        const responses = __classPrivateFieldGet(this, _BlockAndPrivateDataEventsRequestImpl_client, "f").blockAndPrivateDataEvents(signedRequest, options);
        return {
            [Symbol.asyncIterator]: () => mapAsyncIterator(responses[Symbol.asyncIterator](), response => getBlock(response, () => response.getBlockAndPrivateData())),
            close: () => responses.close(),
        };
    }
}
exports.BlockAndPrivateDataEventsRequestImpl = BlockAndPrivateDataEventsRequestImpl;
_BlockAndPrivateDataEventsRequestImpl_client = new WeakMap();
function mapAsyncIterator(iterator, map) {
    return {
        next: async (...args) => {
            const result = await iterator.next(...args);
            return {
                done: result.done,
                value: map(result.value),
            };
        }
    };
}
function getBlock(response, getter) {
    if (response.getTypeCase() === fabric_protos_1.peer.DeliverResponse.TypeCase.STATUS) {
        throw new Error(`Unexpected status response: ${response.getStatus()}`);
    }
    const block = getter();
    return (0, gateway_1.assertDefined)(block, `Unexpected deliver response type: ${response.getTypeCase()}`);
}
//# sourceMappingURL=blockeventsrequest.js.map