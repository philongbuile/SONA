"use strict";
/*
 * Copyright 2021 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTransactionEnvelope = void 0;
const fabric_protos_1 = require("@hyperledger/fabric-protos");
const util_1 = require("util");
const gateway_1 = require("./gateway");
function parseTransactionEnvelope(envelope) {
    const payload = fabric_protos_1.common.Payload.deserializeBinary(envelope.getPayload_asU8());
    const header = (0, gateway_1.assertDefined)(payload.getHeader(), 'Missing header');
    return {
        channelName: parseChannelNameFromHeader(header),
        result: parseResultFromPayload(payload),
    };
}
exports.parseTransactionEnvelope = parseTransactionEnvelope;
function parseChannelNameFromHeader(header) {
    const channelHeader = fabric_protos_1.common.ChannelHeader.deserializeBinary(header.getChannelHeader_asU8());
    return channelHeader.getChannelId();
}
function parseResultFromPayload(payload) {
    const transaction = fabric_protos_1.peer.Transaction.deserializeBinary(payload.getData_asU8());
    const errors = [];
    for (const transactionAction of transaction.getActionsList()) {
        try {
            return parseResultFromTransactionAction(transactionAction);
        }
        catch (err) {
            errors.push(err);
        }
    }
    throw Object.assign(new Error(`No proposal response found: ${(0, util_1.inspect)(errors)}`), {
        suppressed: errors,
    });
}
function parseResultFromTransactionAction(transactionAction) {
    const actionPayload = fabric_protos_1.peer.ChaincodeActionPayload.deserializeBinary(transactionAction.getPayload_asU8());
    const endorsedAction = (0, gateway_1.assertDefined)(actionPayload.getAction(), 'Missing endorsed action');
    const responsePayload = fabric_protos_1.peer.ProposalResponsePayload.deserializeBinary(endorsedAction.getProposalResponsePayload_asU8());
    const chaincodeAction = fabric_protos_1.peer.ChaincodeAction.deserializeBinary(responsePayload.getExtension_asU8());
    const chaincodeResponse = (0, gateway_1.assertDefined)(chaincodeAction.getResponse(), 'Missing chaincode response');
    return chaincodeResponse.getPayload_asU8();
}
//# sourceMappingURL=transactionparser.js.map