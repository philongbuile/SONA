// source: gossip/message.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var peer_collection_pb = require('../peer/collection_pb.js');
goog.object.extend(proto, peer_collection_pb);
goog.exportSymbol('proto.gossip.Acknowledgement', null, global);
goog.exportSymbol('proto.gossip.AliveMessage', null, global);
goog.exportSymbol('proto.gossip.Chaincode', null, global);
goog.exportSymbol('proto.gossip.ConnEstablish', null, global);
goog.exportSymbol('proto.gossip.DataDigest', null, global);
goog.exportSymbol('proto.gossip.DataMessage', null, global);
goog.exportSymbol('proto.gossip.DataRequest', null, global);
goog.exportSymbol('proto.gossip.DataUpdate', null, global);
goog.exportSymbol('proto.gossip.Empty', null, global);
goog.exportSymbol('proto.gossip.Envelope', null, global);
goog.exportSymbol('proto.gossip.GossipHello', null, global);
goog.exportSymbol('proto.gossip.GossipMessage', null, global);
goog.exportSymbol('proto.gossip.GossipMessage.ContentCase', null, global);
goog.exportSymbol('proto.gossip.GossipMessage.Tag', null, global);
goog.exportSymbol('proto.gossip.LeadershipMessage', null, global);
goog.exportSymbol('proto.gossip.Member', null, global);
goog.exportSymbol('proto.gossip.MembershipRequest', null, global);
goog.exportSymbol('proto.gossip.MembershipResponse', null, global);
goog.exportSymbol('proto.gossip.Payload', null, global);
goog.exportSymbol('proto.gossip.PeerIdentity', null, global);
goog.exportSymbol('proto.gossip.PeerTime', null, global);
goog.exportSymbol('proto.gossip.PrivateDataMessage', null, global);
goog.exportSymbol('proto.gossip.PrivatePayload', null, global);
goog.exportSymbol('proto.gossip.Properties', null, global);
goog.exportSymbol('proto.gossip.PullMsgType', null, global);
goog.exportSymbol('proto.gossip.PvtDataDigest', null, global);
goog.exportSymbol('proto.gossip.PvtDataElement', null, global);
goog.exportSymbol('proto.gossip.PvtDataPayload', null, global);
goog.exportSymbol('proto.gossip.RemotePvtDataRequest', null, global);
goog.exportSymbol('proto.gossip.RemotePvtDataResponse', null, global);
goog.exportSymbol('proto.gossip.RemoteStateRequest', null, global);
goog.exportSymbol('proto.gossip.RemoteStateResponse', null, global);
goog.exportSymbol('proto.gossip.Secret', null, global);
goog.exportSymbol('proto.gossip.Secret.ContentCase', null, global);
goog.exportSymbol('proto.gossip.SecretEnvelope', null, global);
goog.exportSymbol('proto.gossip.StateInfo', null, global);
goog.exportSymbol('proto.gossip.StateInfoPullRequest', null, global);
goog.exportSymbol('proto.gossip.StateInfoSnapshot', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Envelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Envelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Envelope.displayName = 'proto.gossip.Envelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.SecretEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.SecretEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.SecretEnvelope.displayName = 'proto.gossip.SecretEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Secret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gossip.Secret.oneofGroups_);
};
goog.inherits(proto.gossip.Secret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Secret.displayName = 'proto.gossip.Secret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.GossipMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.gossip.GossipMessage.oneofGroups_);
};
goog.inherits(proto.gossip.GossipMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.GossipMessage.displayName = 'proto.gossip.GossipMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.StateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.StateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.StateInfo.displayName = 'proto.gossip.StateInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Properties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.Properties.repeatedFields_, null);
};
goog.inherits(proto.gossip.Properties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Properties.displayName = 'proto.gossip.Properties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.StateInfoSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.StateInfoSnapshot.repeatedFields_, null);
};
goog.inherits(proto.gossip.StateInfoSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.StateInfoSnapshot.displayName = 'proto.gossip.StateInfoSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.StateInfoPullRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.StateInfoPullRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.StateInfoPullRequest.displayName = 'proto.gossip.StateInfoPullRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.ConnEstablish = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.ConnEstablish, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.ConnEstablish.displayName = 'proto.gossip.ConnEstablish';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PeerIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PeerIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PeerIdentity.displayName = 'proto.gossip.PeerIdentity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.DataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.DataRequest.repeatedFields_, null);
};
goog.inherits(proto.gossip.DataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.DataRequest.displayName = 'proto.gossip.DataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.GossipHello = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.GossipHello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.GossipHello.displayName = 'proto.gossip.GossipHello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.DataUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.DataUpdate.repeatedFields_, null);
};
goog.inherits(proto.gossip.DataUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.DataUpdate.displayName = 'proto.gossip.DataUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.DataDigest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.DataDigest.repeatedFields_, null);
};
goog.inherits(proto.gossip.DataDigest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.DataDigest.displayName = 'proto.gossip.DataDigest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.DataMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.DataMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.DataMessage.displayName = 'proto.gossip.DataMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PrivateDataMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PrivateDataMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PrivateDataMessage.displayName = 'proto.gossip.PrivateDataMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.Payload.repeatedFields_, null);
};
goog.inherits(proto.gossip.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Payload.displayName = 'proto.gossip.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PrivatePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PrivatePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PrivatePayload.displayName = 'proto.gossip.PrivatePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.AliveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.AliveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.AliveMessage.displayName = 'proto.gossip.AliveMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.LeadershipMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.LeadershipMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.LeadershipMessage.displayName = 'proto.gossip.LeadershipMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PeerTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PeerTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PeerTime.displayName = 'proto.gossip.PeerTime';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.MembershipRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.MembershipRequest.repeatedFields_, null);
};
goog.inherits(proto.gossip.MembershipRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.MembershipRequest.displayName = 'proto.gossip.MembershipRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.MembershipResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.MembershipResponse.repeatedFields_, null);
};
goog.inherits(proto.gossip.MembershipResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.MembershipResponse.displayName = 'proto.gossip.MembershipResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Member = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Member, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Member.displayName = 'proto.gossip.Member';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Empty.displayName = 'proto.gossip.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.RemoteStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.RemoteStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.RemoteStateRequest.displayName = 'proto.gossip.RemoteStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.RemoteStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.RemoteStateResponse.repeatedFields_, null);
};
goog.inherits(proto.gossip.RemoteStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.RemoteStateResponse.displayName = 'proto.gossip.RemoteStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.RemotePvtDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.RemotePvtDataRequest.repeatedFields_, null);
};
goog.inherits(proto.gossip.RemotePvtDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.RemotePvtDataRequest.displayName = 'proto.gossip.RemotePvtDataRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PvtDataDigest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PvtDataDigest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PvtDataDigest.displayName = 'proto.gossip.PvtDataDigest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.RemotePvtDataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.RemotePvtDataResponse.repeatedFields_, null);
};
goog.inherits(proto.gossip.RemotePvtDataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.RemotePvtDataResponse.displayName = 'proto.gossip.RemotePvtDataResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PvtDataElement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gossip.PvtDataElement.repeatedFields_, null);
};
goog.inherits(proto.gossip.PvtDataElement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PvtDataElement.displayName = 'proto.gossip.PvtDataElement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.PvtDataPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.PvtDataPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.PvtDataPayload.displayName = 'proto.gossip.PvtDataPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Acknowledgement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Acknowledgement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Acknowledgement.displayName = 'proto.gossip.Acknowledgement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gossip.Chaincode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gossip.Chaincode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gossip.Chaincode.displayName = 'proto.gossip.Chaincode';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Envelope.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Envelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Envelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Envelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    signature: msg.getSignature_asB64(),
    secretEnvelope: (f = msg.getSecretEnvelope()) && proto.gossip.SecretEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.Envelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Envelope;
  return proto.gossip.Envelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Envelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.Envelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 3:
      var value = new proto.gossip.SecretEnvelope;
      reader.readMessage(value,proto.gossip.SecretEnvelope.deserializeBinaryFromReader);
      msg.setSecretEnvelope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Envelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Envelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Envelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Envelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSecretEnvelope();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gossip.SecretEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Envelope.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.gossip.Envelope.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.gossip.Envelope.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Envelope} returns this
 */
proto.gossip.Envelope.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Envelope.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.gossip.Envelope.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.gossip.Envelope.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Envelope} returns this
 */
proto.gossip.Envelope.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional SecretEnvelope secret_envelope = 3;
 * @return {?proto.gossip.SecretEnvelope}
 */
proto.gossip.Envelope.prototype.getSecretEnvelope = function() {
  return /** @type{?proto.gossip.SecretEnvelope} */ (
    jspb.Message.getWrapperField(this, proto.gossip.SecretEnvelope, 3));
};


/**
 * @param {?proto.gossip.SecretEnvelope|undefined} value
 * @return {!proto.gossip.Envelope} returns this
*/
proto.gossip.Envelope.prototype.setSecretEnvelope = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.Envelope} returns this
 */
proto.gossip.Envelope.prototype.clearSecretEnvelope = function() {
  return this.setSecretEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Envelope.prototype.hasSecretEnvelope = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.SecretEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.SecretEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.SecretEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.SecretEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.SecretEnvelope}
 */
proto.gossip.SecretEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.SecretEnvelope;
  return proto.gossip.SecretEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.SecretEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.SecretEnvelope}
 */
proto.gossip.SecretEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.SecretEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.SecretEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.SecretEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.SecretEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.SecretEnvelope.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.gossip.SecretEnvelope.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.gossip.SecretEnvelope.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.SecretEnvelope} returns this
 */
proto.gossip.SecretEnvelope.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.SecretEnvelope.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.gossip.SecretEnvelope.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.gossip.SecretEnvelope.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.SecretEnvelope} returns this
 */
proto.gossip.SecretEnvelope.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gossip.Secret.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.gossip.Secret.ContentCase = {
  CONTENT_NOT_SET: 0,
  INTERNALENDPOINT: 1
};

/**
 * @return {proto.gossip.Secret.ContentCase}
 */
proto.gossip.Secret.prototype.getContentCase = function() {
  return /** @type {proto.gossip.Secret.ContentCase} */(jspb.Message.computeOneofCase(this, proto.gossip.Secret.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Secret.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Secret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Secret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Secret.toObject = function(includeInstance, msg) {
  var f, obj = {
    internalendpoint: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Secret}
 */
proto.gossip.Secret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Secret;
  return proto.gossip.Secret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Secret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Secret}
 */
proto.gossip.Secret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInternalendpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Secret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Secret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Secret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Secret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string internalEndpoint = 1;
 * @return {string}
 */
proto.gossip.Secret.prototype.getInternalendpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.Secret} returns this
 */
proto.gossip.Secret.prototype.setInternalendpoint = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.gossip.Secret.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.gossip.Secret} returns this
 */
proto.gossip.Secret.prototype.clearInternalendpoint = function() {
  return jspb.Message.setOneofField(this, 1, proto.gossip.Secret.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.Secret.prototype.hasInternalendpoint = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.gossip.GossipMessage.oneofGroups_ = [[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]];

/**
 * @enum {number}
 */
proto.gossip.GossipMessage.ContentCase = {
  CONTENT_NOT_SET: 0,
  ALIVE_MSG: 5,
  MEM_REQ: 6,
  MEM_RES: 7,
  DATA_MSG: 8,
  HELLO: 9,
  DATA_DIG: 10,
  DATA_REQ: 11,
  DATA_UPDATE: 12,
  EMPTY: 13,
  CONN: 14,
  STATE_INFO: 15,
  STATE_SNAPSHOT: 16,
  STATE_INFO_PULL_REQ: 17,
  STATE_REQUEST: 18,
  STATE_RESPONSE: 19,
  LEADERSHIP_MSG: 20,
  PEER_IDENTITY: 21,
  ACK: 22,
  PRIVATEREQ: 23,
  PRIVATERES: 24,
  PRIVATE_DATA: 25
};

/**
 * @return {proto.gossip.GossipMessage.ContentCase}
 */
proto.gossip.GossipMessage.prototype.getContentCase = function() {
  return /** @type {proto.gossip.GossipMessage.ContentCase} */(jspb.Message.computeOneofCase(this, proto.gossip.GossipMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.GossipMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.GossipMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.GossipMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.GossipMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channel: msg.getChannel_asB64(),
    tag: jspb.Message.getFieldWithDefault(msg, 3, 0),
    aliveMsg: (f = msg.getAliveMsg()) && proto.gossip.AliveMessage.toObject(includeInstance, f),
    memReq: (f = msg.getMemReq()) && proto.gossip.MembershipRequest.toObject(includeInstance, f),
    memRes: (f = msg.getMemRes()) && proto.gossip.MembershipResponse.toObject(includeInstance, f),
    dataMsg: (f = msg.getDataMsg()) && proto.gossip.DataMessage.toObject(includeInstance, f),
    hello: (f = msg.getHello()) && proto.gossip.GossipHello.toObject(includeInstance, f),
    dataDig: (f = msg.getDataDig()) && proto.gossip.DataDigest.toObject(includeInstance, f),
    dataReq: (f = msg.getDataReq()) && proto.gossip.DataRequest.toObject(includeInstance, f),
    dataUpdate: (f = msg.getDataUpdate()) && proto.gossip.DataUpdate.toObject(includeInstance, f),
    empty: (f = msg.getEmpty()) && proto.gossip.Empty.toObject(includeInstance, f),
    conn: (f = msg.getConn()) && proto.gossip.ConnEstablish.toObject(includeInstance, f),
    stateInfo: (f = msg.getStateInfo()) && proto.gossip.StateInfo.toObject(includeInstance, f),
    stateSnapshot: (f = msg.getStateSnapshot()) && proto.gossip.StateInfoSnapshot.toObject(includeInstance, f),
    stateInfoPullReq: (f = msg.getStateInfoPullReq()) && proto.gossip.StateInfoPullRequest.toObject(includeInstance, f),
    stateRequest: (f = msg.getStateRequest()) && proto.gossip.RemoteStateRequest.toObject(includeInstance, f),
    stateResponse: (f = msg.getStateResponse()) && proto.gossip.RemoteStateResponse.toObject(includeInstance, f),
    leadershipMsg: (f = msg.getLeadershipMsg()) && proto.gossip.LeadershipMessage.toObject(includeInstance, f),
    peerIdentity: (f = msg.getPeerIdentity()) && proto.gossip.PeerIdentity.toObject(includeInstance, f),
    ack: (f = msg.getAck()) && proto.gossip.Acknowledgement.toObject(includeInstance, f),
    privatereq: (f = msg.getPrivatereq()) && proto.gossip.RemotePvtDataRequest.toObject(includeInstance, f),
    privateres: (f = msg.getPrivateres()) && proto.gossip.RemotePvtDataResponse.toObject(includeInstance, f),
    privateData: (f = msg.getPrivateData()) && proto.gossip.PrivateDataMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.GossipMessage}
 */
proto.gossip.GossipMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.GossipMessage;
  return proto.gossip.GossipMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.GossipMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.GossipMessage}
 */
proto.gossip.GossipMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannel(value);
      break;
    case 3:
      var value = /** @type {!proto.gossip.GossipMessage.Tag} */ (reader.readEnum());
      msg.setTag(value);
      break;
    case 5:
      var value = new proto.gossip.AliveMessage;
      reader.readMessage(value,proto.gossip.AliveMessage.deserializeBinaryFromReader);
      msg.setAliveMsg(value);
      break;
    case 6:
      var value = new proto.gossip.MembershipRequest;
      reader.readMessage(value,proto.gossip.MembershipRequest.deserializeBinaryFromReader);
      msg.setMemReq(value);
      break;
    case 7:
      var value = new proto.gossip.MembershipResponse;
      reader.readMessage(value,proto.gossip.MembershipResponse.deserializeBinaryFromReader);
      msg.setMemRes(value);
      break;
    case 8:
      var value = new proto.gossip.DataMessage;
      reader.readMessage(value,proto.gossip.DataMessage.deserializeBinaryFromReader);
      msg.setDataMsg(value);
      break;
    case 9:
      var value = new proto.gossip.GossipHello;
      reader.readMessage(value,proto.gossip.GossipHello.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 10:
      var value = new proto.gossip.DataDigest;
      reader.readMessage(value,proto.gossip.DataDigest.deserializeBinaryFromReader);
      msg.setDataDig(value);
      break;
    case 11:
      var value = new proto.gossip.DataRequest;
      reader.readMessage(value,proto.gossip.DataRequest.deserializeBinaryFromReader);
      msg.setDataReq(value);
      break;
    case 12:
      var value = new proto.gossip.DataUpdate;
      reader.readMessage(value,proto.gossip.DataUpdate.deserializeBinaryFromReader);
      msg.setDataUpdate(value);
      break;
    case 13:
      var value = new proto.gossip.Empty;
      reader.readMessage(value,proto.gossip.Empty.deserializeBinaryFromReader);
      msg.setEmpty(value);
      break;
    case 14:
      var value = new proto.gossip.ConnEstablish;
      reader.readMessage(value,proto.gossip.ConnEstablish.deserializeBinaryFromReader);
      msg.setConn(value);
      break;
    case 15:
      var value = new proto.gossip.StateInfo;
      reader.readMessage(value,proto.gossip.StateInfo.deserializeBinaryFromReader);
      msg.setStateInfo(value);
      break;
    case 16:
      var value = new proto.gossip.StateInfoSnapshot;
      reader.readMessage(value,proto.gossip.StateInfoSnapshot.deserializeBinaryFromReader);
      msg.setStateSnapshot(value);
      break;
    case 17:
      var value = new proto.gossip.StateInfoPullRequest;
      reader.readMessage(value,proto.gossip.StateInfoPullRequest.deserializeBinaryFromReader);
      msg.setStateInfoPullReq(value);
      break;
    case 18:
      var value = new proto.gossip.RemoteStateRequest;
      reader.readMessage(value,proto.gossip.RemoteStateRequest.deserializeBinaryFromReader);
      msg.setStateRequest(value);
      break;
    case 19:
      var value = new proto.gossip.RemoteStateResponse;
      reader.readMessage(value,proto.gossip.RemoteStateResponse.deserializeBinaryFromReader);
      msg.setStateResponse(value);
      break;
    case 20:
      var value = new proto.gossip.LeadershipMessage;
      reader.readMessage(value,proto.gossip.LeadershipMessage.deserializeBinaryFromReader);
      msg.setLeadershipMsg(value);
      break;
    case 21:
      var value = new proto.gossip.PeerIdentity;
      reader.readMessage(value,proto.gossip.PeerIdentity.deserializeBinaryFromReader);
      msg.setPeerIdentity(value);
      break;
    case 22:
      var value = new proto.gossip.Acknowledgement;
      reader.readMessage(value,proto.gossip.Acknowledgement.deserializeBinaryFromReader);
      msg.setAck(value);
      break;
    case 23:
      var value = new proto.gossip.RemotePvtDataRequest;
      reader.readMessage(value,proto.gossip.RemotePvtDataRequest.deserializeBinaryFromReader);
      msg.setPrivatereq(value);
      break;
    case 24:
      var value = new proto.gossip.RemotePvtDataResponse;
      reader.readMessage(value,proto.gossip.RemotePvtDataResponse.deserializeBinaryFromReader);
      msg.setPrivateres(value);
      break;
    case 25:
      var value = new proto.gossip.PrivateDataMessage;
      reader.readMessage(value,proto.gossip.PrivateDataMessage.deserializeBinaryFromReader);
      msg.setPrivateData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.GossipMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.GossipMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.GossipMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.GossipMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChannel_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTag();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAliveMsg();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gossip.AliveMessage.serializeBinaryToWriter
    );
  }
  f = message.getMemReq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.gossip.MembershipRequest.serializeBinaryToWriter
    );
  }
  f = message.getMemRes();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.gossip.MembershipResponse.serializeBinaryToWriter
    );
  }
  f = message.getDataMsg();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gossip.DataMessage.serializeBinaryToWriter
    );
  }
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.gossip.GossipHello.serializeBinaryToWriter
    );
  }
  f = message.getDataDig();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.gossip.DataDigest.serializeBinaryToWriter
    );
  }
  f = message.getDataReq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.gossip.DataRequest.serializeBinaryToWriter
    );
  }
  f = message.getDataUpdate();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.gossip.DataUpdate.serializeBinaryToWriter
    );
  }
  f = message.getEmpty();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.gossip.Empty.serializeBinaryToWriter
    );
  }
  f = message.getConn();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.gossip.ConnEstablish.serializeBinaryToWriter
    );
  }
  f = message.getStateInfo();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.gossip.StateInfo.serializeBinaryToWriter
    );
  }
  f = message.getStateSnapshot();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.gossip.StateInfoSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getStateInfoPullReq();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.gossip.StateInfoPullRequest.serializeBinaryToWriter
    );
  }
  f = message.getStateRequest();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.gossip.RemoteStateRequest.serializeBinaryToWriter
    );
  }
  f = message.getStateResponse();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.gossip.RemoteStateResponse.serializeBinaryToWriter
    );
  }
  f = message.getLeadershipMsg();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.gossip.LeadershipMessage.serializeBinaryToWriter
    );
  }
  f = message.getPeerIdentity();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.gossip.PeerIdentity.serializeBinaryToWriter
    );
  }
  f = message.getAck();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.gossip.Acknowledgement.serializeBinaryToWriter
    );
  }
  f = message.getPrivatereq();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.gossip.RemotePvtDataRequest.serializeBinaryToWriter
    );
  }
  f = message.getPrivateres();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.gossip.RemotePvtDataResponse.serializeBinaryToWriter
    );
  }
  f = message.getPrivateData();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.gossip.PrivateDataMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.gossip.GossipMessage.Tag = {
  UNDEFINED: 0,
  EMPTY: 1,
  ORG_ONLY: 2,
  CHAN_ONLY: 3,
  CHAN_AND_ORG: 4,
  CHAN_OR_ORG: 5
};

/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.gossip.GossipMessage.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes channel = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.GossipMessage.prototype.getChannel = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes channel = 2;
 * This is a type-conversion wrapper around `getChannel()`
 * @return {string}
 */
proto.gossip.GossipMessage.prototype.getChannel_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannel()));
};


/**
 * optional bytes channel = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannel()`
 * @return {!Uint8Array}
 */
proto.gossip.GossipMessage.prototype.getChannel_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannel()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.setChannel = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Tag tag = 3;
 * @return {!proto.gossip.GossipMessage.Tag}
 */
proto.gossip.GossipMessage.prototype.getTag = function() {
  return /** @type {!proto.gossip.GossipMessage.Tag} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gossip.GossipMessage.Tag} value
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.setTag = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional AliveMessage alive_msg = 5;
 * @return {?proto.gossip.AliveMessage}
 */
proto.gossip.GossipMessage.prototype.getAliveMsg = function() {
  return /** @type{?proto.gossip.AliveMessage} */ (
    jspb.Message.getWrapperField(this, proto.gossip.AliveMessage, 5));
};


/**
 * @param {?proto.gossip.AliveMessage|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setAliveMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearAliveMsg = function() {
  return this.setAliveMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasAliveMsg = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional MembershipRequest mem_req = 6;
 * @return {?proto.gossip.MembershipRequest}
 */
proto.gossip.GossipMessage.prototype.getMemReq = function() {
  return /** @type{?proto.gossip.MembershipRequest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.MembershipRequest, 6));
};


/**
 * @param {?proto.gossip.MembershipRequest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setMemReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearMemReq = function() {
  return this.setMemReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasMemReq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional MembershipResponse mem_res = 7;
 * @return {?proto.gossip.MembershipResponse}
 */
proto.gossip.GossipMessage.prototype.getMemRes = function() {
  return /** @type{?proto.gossip.MembershipResponse} */ (
    jspb.Message.getWrapperField(this, proto.gossip.MembershipResponse, 7));
};


/**
 * @param {?proto.gossip.MembershipResponse|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setMemRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearMemRes = function() {
  return this.setMemRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasMemRes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional DataMessage data_msg = 8;
 * @return {?proto.gossip.DataMessage}
 */
proto.gossip.GossipMessage.prototype.getDataMsg = function() {
  return /** @type{?proto.gossip.DataMessage} */ (
    jspb.Message.getWrapperField(this, proto.gossip.DataMessage, 8));
};


/**
 * @param {?proto.gossip.DataMessage|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setDataMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearDataMsg = function() {
  return this.setDataMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasDataMsg = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional GossipHello hello = 9;
 * @return {?proto.gossip.GossipHello}
 */
proto.gossip.GossipMessage.prototype.getHello = function() {
  return /** @type{?proto.gossip.GossipHello} */ (
    jspb.Message.getWrapperField(this, proto.gossip.GossipHello, 9));
};


/**
 * @param {?proto.gossip.GossipHello|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setHello = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasHello = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional DataDigest data_dig = 10;
 * @return {?proto.gossip.DataDigest}
 */
proto.gossip.GossipMessage.prototype.getDataDig = function() {
  return /** @type{?proto.gossip.DataDigest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.DataDigest, 10));
};


/**
 * @param {?proto.gossip.DataDigest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setDataDig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearDataDig = function() {
  return this.setDataDig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasDataDig = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DataRequest data_req = 11;
 * @return {?proto.gossip.DataRequest}
 */
proto.gossip.GossipMessage.prototype.getDataReq = function() {
  return /** @type{?proto.gossip.DataRequest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.DataRequest, 11));
};


/**
 * @param {?proto.gossip.DataRequest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setDataReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearDataReq = function() {
  return this.setDataReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasDataReq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DataUpdate data_update = 12;
 * @return {?proto.gossip.DataUpdate}
 */
proto.gossip.GossipMessage.prototype.getDataUpdate = function() {
  return /** @type{?proto.gossip.DataUpdate} */ (
    jspb.Message.getWrapperField(this, proto.gossip.DataUpdate, 12));
};


/**
 * @param {?proto.gossip.DataUpdate|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setDataUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearDataUpdate = function() {
  return this.setDataUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasDataUpdate = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional Empty empty = 13;
 * @return {?proto.gossip.Empty}
 */
proto.gossip.GossipMessage.prototype.getEmpty = function() {
  return /** @type{?proto.gossip.Empty} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Empty, 13));
};


/**
 * @param {?proto.gossip.Empty|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setEmpty = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearEmpty = function() {
  return this.setEmpty(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ConnEstablish conn = 14;
 * @return {?proto.gossip.ConnEstablish}
 */
proto.gossip.GossipMessage.prototype.getConn = function() {
  return /** @type{?proto.gossip.ConnEstablish} */ (
    jspb.Message.getWrapperField(this, proto.gossip.ConnEstablish, 14));
};


/**
 * @param {?proto.gossip.ConnEstablish|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setConn = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearConn = function() {
  return this.setConn(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasConn = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional StateInfo state_info = 15;
 * @return {?proto.gossip.StateInfo}
 */
proto.gossip.GossipMessage.prototype.getStateInfo = function() {
  return /** @type{?proto.gossip.StateInfo} */ (
    jspb.Message.getWrapperField(this, proto.gossip.StateInfo, 15));
};


/**
 * @param {?proto.gossip.StateInfo|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setStateInfo = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearStateInfo = function() {
  return this.setStateInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasStateInfo = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional StateInfoSnapshot state_snapshot = 16;
 * @return {?proto.gossip.StateInfoSnapshot}
 */
proto.gossip.GossipMessage.prototype.getStateSnapshot = function() {
  return /** @type{?proto.gossip.StateInfoSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.gossip.StateInfoSnapshot, 16));
};


/**
 * @param {?proto.gossip.StateInfoSnapshot|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setStateSnapshot = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearStateSnapshot = function() {
  return this.setStateSnapshot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasStateSnapshot = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional StateInfoPullRequest state_info_pull_req = 17;
 * @return {?proto.gossip.StateInfoPullRequest}
 */
proto.gossip.GossipMessage.prototype.getStateInfoPullReq = function() {
  return /** @type{?proto.gossip.StateInfoPullRequest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.StateInfoPullRequest, 17));
};


/**
 * @param {?proto.gossip.StateInfoPullRequest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setStateInfoPullReq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearStateInfoPullReq = function() {
  return this.setStateInfoPullReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasStateInfoPullReq = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RemoteStateRequest state_request = 18;
 * @return {?proto.gossip.RemoteStateRequest}
 */
proto.gossip.GossipMessage.prototype.getStateRequest = function() {
  return /** @type{?proto.gossip.RemoteStateRequest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.RemoteStateRequest, 18));
};


/**
 * @param {?proto.gossip.RemoteStateRequest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setStateRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 18, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearStateRequest = function() {
  return this.setStateRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasStateRequest = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional RemoteStateResponse state_response = 19;
 * @return {?proto.gossip.RemoteStateResponse}
 */
proto.gossip.GossipMessage.prototype.getStateResponse = function() {
  return /** @type{?proto.gossip.RemoteStateResponse} */ (
    jspb.Message.getWrapperField(this, proto.gossip.RemoteStateResponse, 19));
};


/**
 * @param {?proto.gossip.RemoteStateResponse|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setStateResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 19, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearStateResponse = function() {
  return this.setStateResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasStateResponse = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional LeadershipMessage leadership_msg = 20;
 * @return {?proto.gossip.LeadershipMessage}
 */
proto.gossip.GossipMessage.prototype.getLeadershipMsg = function() {
  return /** @type{?proto.gossip.LeadershipMessage} */ (
    jspb.Message.getWrapperField(this, proto.gossip.LeadershipMessage, 20));
};


/**
 * @param {?proto.gossip.LeadershipMessage|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setLeadershipMsg = function(value) {
  return jspb.Message.setOneofWrapperField(this, 20, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearLeadershipMsg = function() {
  return this.setLeadershipMsg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasLeadershipMsg = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional PeerIdentity peer_identity = 21;
 * @return {?proto.gossip.PeerIdentity}
 */
proto.gossip.GossipMessage.prototype.getPeerIdentity = function() {
  return /** @type{?proto.gossip.PeerIdentity} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PeerIdentity, 21));
};


/**
 * @param {?proto.gossip.PeerIdentity|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setPeerIdentity = function(value) {
  return jspb.Message.setOneofWrapperField(this, 21, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearPeerIdentity = function() {
  return this.setPeerIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasPeerIdentity = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional Acknowledgement ack = 22;
 * @return {?proto.gossip.Acknowledgement}
 */
proto.gossip.GossipMessage.prototype.getAck = function() {
  return /** @type{?proto.gossip.Acknowledgement} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Acknowledgement, 22));
};


/**
 * @param {?proto.gossip.Acknowledgement|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setAck = function(value) {
  return jspb.Message.setOneofWrapperField(this, 22, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearAck = function() {
  return this.setAck(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasAck = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional RemotePvtDataRequest privateReq = 23;
 * @return {?proto.gossip.RemotePvtDataRequest}
 */
proto.gossip.GossipMessage.prototype.getPrivatereq = function() {
  return /** @type{?proto.gossip.RemotePvtDataRequest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.RemotePvtDataRequest, 23));
};


/**
 * @param {?proto.gossip.RemotePvtDataRequest|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setPrivatereq = function(value) {
  return jspb.Message.setOneofWrapperField(this, 23, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearPrivatereq = function() {
  return this.setPrivatereq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasPrivatereq = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional RemotePvtDataResponse privateRes = 24;
 * @return {?proto.gossip.RemotePvtDataResponse}
 */
proto.gossip.GossipMessage.prototype.getPrivateres = function() {
  return /** @type{?proto.gossip.RemotePvtDataResponse} */ (
    jspb.Message.getWrapperField(this, proto.gossip.RemotePvtDataResponse, 24));
};


/**
 * @param {?proto.gossip.RemotePvtDataResponse|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setPrivateres = function(value) {
  return jspb.Message.setOneofWrapperField(this, 24, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearPrivateres = function() {
  return this.setPrivateres(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasPrivateres = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional PrivateDataMessage private_data = 25;
 * @return {?proto.gossip.PrivateDataMessage}
 */
proto.gossip.GossipMessage.prototype.getPrivateData = function() {
  return /** @type{?proto.gossip.PrivateDataMessage} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PrivateDataMessage, 25));
};


/**
 * @param {?proto.gossip.PrivateDataMessage|undefined} value
 * @return {!proto.gossip.GossipMessage} returns this
*/
proto.gossip.GossipMessage.prototype.setPrivateData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 25, proto.gossip.GossipMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.GossipMessage} returns this
 */
proto.gossip.GossipMessage.prototype.clearPrivateData = function() {
  return this.setPrivateData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.GossipMessage.prototype.hasPrivateData = function() {
  return jspb.Message.getField(this, 25) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.StateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.StateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.StateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && proto.gossip.PeerTime.toObject(includeInstance, f),
    pkiId: msg.getPkiId_asB64(),
    channelMac: msg.getChannelMac_asB64(),
    properties: (f = msg.getProperties()) && proto.gossip.Properties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.StateInfo}
 */
proto.gossip.StateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.StateInfo;
  return proto.gossip.StateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.StateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.StateInfo}
 */
proto.gossip.StateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.gossip.PeerTime;
      reader.readMessage(value,proto.gossip.PeerTime.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelMac(value);
      break;
    case 5:
      var value = new proto.gossip.Properties;
      reader.readMessage(value,proto.gossip.Properties.deserializeBinaryFromReader);
      msg.setProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.StateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.StateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.StateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gossip.PeerTime.serializeBinaryToWriter
    );
  }
  f = message.getPkiId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getChannelMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getProperties();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.gossip.Properties.serializeBinaryToWriter
    );
  }
};


/**
 * optional PeerTime timestamp = 2;
 * @return {?proto.gossip.PeerTime}
 */
proto.gossip.StateInfo.prototype.getTimestamp = function() {
  return /** @type{?proto.gossip.PeerTime} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PeerTime, 2));
};


/**
 * @param {?proto.gossip.PeerTime|undefined} value
 * @return {!proto.gossip.StateInfo} returns this
*/
proto.gossip.StateInfo.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.StateInfo} returns this
 */
proto.gossip.StateInfo.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.StateInfo.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes pki_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.StateInfo.prototype.getPkiId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pki_id = 3;
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {string}
 */
proto.gossip.StateInfo.prototype.getPkiId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiId()));
};


/**
 * optional bytes pki_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {!Uint8Array}
 */
proto.gossip.StateInfo.prototype.getPkiId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.StateInfo} returns this
 */
proto.gossip.StateInfo.prototype.setPkiId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes channel_MAC = 4;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.StateInfo.prototype.getChannelMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes channel_MAC = 4;
 * This is a type-conversion wrapper around `getChannelMac()`
 * @return {string}
 */
proto.gossip.StateInfo.prototype.getChannelMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelMac()));
};


/**
 * optional bytes channel_MAC = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelMac()`
 * @return {!Uint8Array}
 */
proto.gossip.StateInfo.prototype.getChannelMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.StateInfo} returns this
 */
proto.gossip.StateInfo.prototype.setChannelMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional Properties properties = 5;
 * @return {?proto.gossip.Properties}
 */
proto.gossip.StateInfo.prototype.getProperties = function() {
  return /** @type{?proto.gossip.Properties} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Properties, 5));
};


/**
 * @param {?proto.gossip.Properties|undefined} value
 * @return {!proto.gossip.StateInfo} returns this
*/
proto.gossip.StateInfo.prototype.setProperties = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.StateInfo} returns this
 */
proto.gossip.StateInfo.prototype.clearProperties = function() {
  return this.setProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.StateInfo.prototype.hasProperties = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.Properties.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Properties.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Properties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Properties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Properties.toObject = function(includeInstance, msg) {
  var f, obj = {
    ledgerHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
    leftChannel: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    chaincodesList: jspb.Message.toObjectList(msg.getChaincodesList(),
    proto.gossip.Chaincode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Properties}
 */
proto.gossip.Properties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Properties;
  return proto.gossip.Properties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Properties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Properties}
 */
proto.gossip.Properties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLedgerHeight(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLeftChannel(value);
      break;
    case 3:
      var value = new proto.gossip.Chaincode;
      reader.readMessage(value,proto.gossip.Chaincode.deserializeBinaryFromReader);
      msg.addChaincodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Properties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Properties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Properties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Properties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLedgerHeight();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLeftChannel();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getChaincodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.gossip.Chaincode.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ledger_height = 1;
 * @return {number}
 */
proto.gossip.Properties.prototype.getLedgerHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.Properties} returns this
 */
proto.gossip.Properties.prototype.setLedgerHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool left_channel = 2;
 * @return {boolean}
 */
proto.gossip.Properties.prototype.getLeftChannel = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gossip.Properties} returns this
 */
proto.gossip.Properties.prototype.setLeftChannel = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated Chaincode chaincodes = 3;
 * @return {!Array<!proto.gossip.Chaincode>}
 */
proto.gossip.Properties.prototype.getChaincodesList = function() {
  return /** @type{!Array<!proto.gossip.Chaincode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Chaincode, 3));
};


/**
 * @param {!Array<!proto.gossip.Chaincode>} value
 * @return {!proto.gossip.Properties} returns this
*/
proto.gossip.Properties.prototype.setChaincodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.gossip.Chaincode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Chaincode}
 */
proto.gossip.Properties.prototype.addChaincodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.gossip.Chaincode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.Properties} returns this
 */
proto.gossip.Properties.prototype.clearChaincodesList = function() {
  return this.setChaincodesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.StateInfoSnapshot.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.StateInfoSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.StateInfoSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.StateInfoSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfoSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.gossip.Envelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.StateInfoSnapshot}
 */
proto.gossip.StateInfoSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.StateInfoSnapshot;
  return proto.gossip.StateInfoSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.StateInfoSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.StateInfoSnapshot}
 */
proto.gossip.StateInfoSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Envelope;
      reader.readMessage(value,proto.gossip.Envelope.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.StateInfoSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.StateInfoSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.StateInfoSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfoSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gossip.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Envelope elements = 1;
 * @return {!Array<!proto.gossip.Envelope>}
 */
proto.gossip.StateInfoSnapshot.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.gossip.Envelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Envelope, 1));
};


/**
 * @param {!Array<!proto.gossip.Envelope>} value
 * @return {!proto.gossip.StateInfoSnapshot} returns this
*/
proto.gossip.StateInfoSnapshot.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gossip.Envelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.StateInfoSnapshot.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gossip.Envelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.StateInfoSnapshot} returns this
 */
proto.gossip.StateInfoSnapshot.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.StateInfoPullRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.StateInfoPullRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.StateInfoPullRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfoPullRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelMac: msg.getChannelMac_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.StateInfoPullRequest}
 */
proto.gossip.StateInfoPullRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.StateInfoPullRequest;
  return proto.gossip.StateInfoPullRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.StateInfoPullRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.StateInfoPullRequest}
 */
proto.gossip.StateInfoPullRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.StateInfoPullRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.StateInfoPullRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.StateInfoPullRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.StateInfoPullRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelMac_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes channel_MAC = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.StateInfoPullRequest.prototype.getChannelMac = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channel_MAC = 1;
 * This is a type-conversion wrapper around `getChannelMac()`
 * @return {string}
 */
proto.gossip.StateInfoPullRequest.prototype.getChannelMac_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelMac()));
};


/**
 * optional bytes channel_MAC = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelMac()`
 * @return {!Uint8Array}
 */
proto.gossip.StateInfoPullRequest.prototype.getChannelMac_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelMac()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.StateInfoPullRequest} returns this
 */
proto.gossip.StateInfoPullRequest.prototype.setChannelMac = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.ConnEstablish.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.ConnEstablish.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.ConnEstablish} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.ConnEstablish.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkiId: msg.getPkiId_asB64(),
    identity: msg.getIdentity_asB64(),
    tlsCertHash: msg.getTlsCertHash_asB64(),
    probe: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.ConnEstablish}
 */
proto.gossip.ConnEstablish.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.ConnEstablish;
  return proto.gossip.ConnEstablish.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.ConnEstablish} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.ConnEstablish}
 */
proto.gossip.ConnEstablish.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIdentity(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTlsCertHash(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setProbe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.ConnEstablish.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.ConnEstablish.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.ConnEstablish} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.ConnEstablish.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkiId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getIdentity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTlsCertHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProbe();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes pki_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.ConnEstablish.prototype.getPkiId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pki_id = 1;
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {string}
 */
proto.gossip.ConnEstablish.prototype.getPkiId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiId()));
};


/**
 * optional bytes pki_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {!Uint8Array}
 */
proto.gossip.ConnEstablish.prototype.getPkiId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.ConnEstablish} returns this
 */
proto.gossip.ConnEstablish.prototype.setPkiId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes identity = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.ConnEstablish.prototype.getIdentity = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes identity = 2;
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {string}
 */
proto.gossip.ConnEstablish.prototype.getIdentity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIdentity()));
};


/**
 * optional bytes identity = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {!Uint8Array}
 */
proto.gossip.ConnEstablish.prototype.getIdentity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIdentity()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.ConnEstablish} returns this
 */
proto.gossip.ConnEstablish.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes tls_cert_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.ConnEstablish.prototype.getTlsCertHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes tls_cert_hash = 3;
 * This is a type-conversion wrapper around `getTlsCertHash()`
 * @return {string}
 */
proto.gossip.ConnEstablish.prototype.getTlsCertHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTlsCertHash()));
};


/**
 * optional bytes tls_cert_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsCertHash()`
 * @return {!Uint8Array}
 */
proto.gossip.ConnEstablish.prototype.getTlsCertHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTlsCertHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.ConnEstablish} returns this
 */
proto.gossip.ConnEstablish.prototype.setTlsCertHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool probe = 4;
 * @return {boolean}
 */
proto.gossip.ConnEstablish.prototype.getProbe = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gossip.ConnEstablish} returns this
 */
proto.gossip.ConnEstablish.prototype.setProbe = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PeerIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PeerIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PeerIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PeerIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkiId: msg.getPkiId_asB64(),
    cert: msg.getCert_asB64(),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PeerIdentity}
 */
proto.gossip.PeerIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PeerIdentity;
  return proto.gossip.PeerIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PeerIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PeerIdentity}
 */
proto.gossip.PeerIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCert(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PeerIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PeerIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PeerIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PeerIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkiId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes pki_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.PeerIdentity.prototype.getPkiId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pki_id = 1;
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {string}
 */
proto.gossip.PeerIdentity.prototype.getPkiId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiId()));
};


/**
 * optional bytes pki_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {!Uint8Array}
 */
proto.gossip.PeerIdentity.prototype.getPkiId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.PeerIdentity} returns this
 */
proto.gossip.PeerIdentity.prototype.setPkiId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes cert = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.PeerIdentity.prototype.getCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cert = 2;
 * This is a type-conversion wrapper around `getCert()`
 * @return {string}
 */
proto.gossip.PeerIdentity.prototype.getCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCert()));
};


/**
 * optional bytes cert = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCert()`
 * @return {!Uint8Array}
 */
proto.gossip.PeerIdentity.prototype.getCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.PeerIdentity} returns this
 */
proto.gossip.PeerIdentity.prototype.setCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.PeerIdentity.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.gossip.PeerIdentity.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.gossip.PeerIdentity.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.PeerIdentity} returns this
 */
proto.gossip.PeerIdentity.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.DataRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.DataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.DataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.DataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    digestsList: msg.getDigestsList_asB64(),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.DataRequest}
 */
proto.gossip.DataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.DataRequest;
  return proto.gossip.DataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.DataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.DataRequest}
 */
proto.gossip.DataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDigests(value);
      break;
    case 3:
      var value = /** @type {!proto.gossip.PullMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.DataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.DataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.DataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDigestsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.gossip.DataRequest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.DataRequest} returns this
 */
proto.gossip.DataRequest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes digests = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.DataRequest.prototype.getDigestsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes digests = 2;
 * This is a type-conversion wrapper around `getDigestsList()`
 * @return {!Array<string>}
 */
proto.gossip.DataRequest.prototype.getDigestsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDigestsList()));
};


/**
 * repeated bytes digests = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDigestsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.DataRequest.prototype.getDigestsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDigestsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.DataRequest} returns this
 */
proto.gossip.DataRequest.prototype.setDigestsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.DataRequest} returns this
 */
proto.gossip.DataRequest.prototype.addDigests = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.DataRequest} returns this
 */
proto.gossip.DataRequest.prototype.clearDigestsList = function() {
  return this.setDigestsList([]);
};


/**
 * optional PullMsgType msg_type = 3;
 * @return {!proto.gossip.PullMsgType}
 */
proto.gossip.DataRequest.prototype.getMsgType = function() {
  return /** @type {!proto.gossip.PullMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gossip.PullMsgType} value
 * @return {!proto.gossip.DataRequest} returns this
 */
proto.gossip.DataRequest.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.GossipHello.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.GossipHello.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.GossipHello} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.GossipHello.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    metadata: msg.getMetadata_asB64(),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.GossipHello}
 */
proto.gossip.GossipHello.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.GossipHello;
  return proto.gossip.GossipHello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.GossipHello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.GossipHello}
 */
proto.gossip.GossipHello.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 3:
      var value = /** @type {!proto.gossip.PullMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.GossipHello.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.GossipHello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.GossipHello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.GossipHello.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.gossip.GossipHello.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.GossipHello} returns this
 */
proto.gossip.GossipHello.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes metadata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.GossipHello.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes metadata = 2;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.gossip.GossipHello.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.gossip.GossipHello.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.GossipHello} returns this
 */
proto.gossip.GossipHello.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional PullMsgType msg_type = 3;
 * @return {!proto.gossip.PullMsgType}
 */
proto.gossip.GossipHello.prototype.getMsgType = function() {
  return /** @type {!proto.gossip.PullMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gossip.PullMsgType} value
 * @return {!proto.gossip.GossipHello} returns this
 */
proto.gossip.GossipHello.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.DataUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.DataUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.DataUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.DataUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.gossip.Envelope.toObject, includeInstance),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.DataUpdate}
 */
proto.gossip.DataUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.DataUpdate;
  return proto.gossip.DataUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.DataUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.DataUpdate}
 */
proto.gossip.DataUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = new proto.gossip.Envelope;
      reader.readMessage(value,proto.gossip.Envelope.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    case 3:
      var value = /** @type {!proto.gossip.PullMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.DataUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.DataUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.DataUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gossip.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.gossip.DataUpdate.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.DataUpdate} returns this
 */
proto.gossip.DataUpdate.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Envelope data = 2;
 * @return {!Array<!proto.gossip.Envelope>}
 */
proto.gossip.DataUpdate.prototype.getDataList = function() {
  return /** @type{!Array<!proto.gossip.Envelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Envelope, 2));
};


/**
 * @param {!Array<!proto.gossip.Envelope>} value
 * @return {!proto.gossip.DataUpdate} returns this
*/
proto.gossip.DataUpdate.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gossip.Envelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.DataUpdate.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gossip.Envelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.DataUpdate} returns this
 */
proto.gossip.DataUpdate.prototype.clearDataList = function() {
  return this.setDataList([]);
};


/**
 * optional PullMsgType msg_type = 3;
 * @return {!proto.gossip.PullMsgType}
 */
proto.gossip.DataUpdate.prototype.getMsgType = function() {
  return /** @type {!proto.gossip.PullMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gossip.PullMsgType} value
 * @return {!proto.gossip.DataUpdate} returns this
 */
proto.gossip.DataUpdate.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.DataDigest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.DataDigest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.DataDigest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.DataDigest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataDigest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    digestsList: msg.getDigestsList_asB64(),
    msgType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.DataDigest}
 */
proto.gossip.DataDigest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.DataDigest;
  return proto.gossip.DataDigest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.DataDigest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.DataDigest}
 */
proto.gossip.DataDigest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addDigests(value);
      break;
    case 3:
      var value = /** @type {!proto.gossip.PullMsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.DataDigest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.DataDigest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.DataDigest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataDigest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDigestsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getMsgType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 nonce = 1;
 * @return {number}
 */
proto.gossip.DataDigest.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.DataDigest} returns this
 */
proto.gossip.DataDigest.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated bytes digests = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.DataDigest.prototype.getDigestsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes digests = 2;
 * This is a type-conversion wrapper around `getDigestsList()`
 * @return {!Array<string>}
 */
proto.gossip.DataDigest.prototype.getDigestsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getDigestsList()));
};


/**
 * repeated bytes digests = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDigestsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.DataDigest.prototype.getDigestsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getDigestsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.DataDigest} returns this
 */
proto.gossip.DataDigest.prototype.setDigestsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.DataDigest} returns this
 */
proto.gossip.DataDigest.prototype.addDigests = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.DataDigest} returns this
 */
proto.gossip.DataDigest.prototype.clearDigestsList = function() {
  return this.setDigestsList([]);
};


/**
 * optional PullMsgType msg_type = 3;
 * @return {!proto.gossip.PullMsgType}
 */
proto.gossip.DataDigest.prototype.getMsgType = function() {
  return /** @type {!proto.gossip.PullMsgType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gossip.PullMsgType} value
 * @return {!proto.gossip.DataDigest} returns this
 */
proto.gossip.DataDigest.prototype.setMsgType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.DataMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.DataMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.DataMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.gossip.Payload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.DataMessage}
 */
proto.gossip.DataMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.DataMessage;
  return proto.gossip.DataMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.DataMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.DataMessage}
 */
proto.gossip.DataMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Payload;
      reader.readMessage(value,proto.gossip.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.DataMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.DataMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.DataMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.DataMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gossip.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional Payload payload = 1;
 * @return {?proto.gossip.Payload}
 */
proto.gossip.DataMessage.prototype.getPayload = function() {
  return /** @type{?proto.gossip.Payload} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Payload, 1));
};


/**
 * @param {?proto.gossip.Payload|undefined} value
 * @return {!proto.gossip.DataMessage} returns this
*/
proto.gossip.DataMessage.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.DataMessage} returns this
 */
proto.gossip.DataMessage.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.DataMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PrivateDataMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PrivateDataMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PrivateDataMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PrivateDataMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: (f = msg.getPayload()) && proto.gossip.PrivatePayload.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PrivateDataMessage}
 */
proto.gossip.PrivateDataMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PrivateDataMessage;
  return proto.gossip.PrivateDataMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PrivateDataMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PrivateDataMessage}
 */
proto.gossip.PrivateDataMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.PrivatePayload;
      reader.readMessage(value,proto.gossip.PrivatePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PrivateDataMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PrivateDataMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PrivateDataMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PrivateDataMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gossip.PrivatePayload.serializeBinaryToWriter
    );
  }
};


/**
 * optional PrivatePayload payload = 1;
 * @return {?proto.gossip.PrivatePayload}
 */
proto.gossip.PrivateDataMessage.prototype.getPayload = function() {
  return /** @type{?proto.gossip.PrivatePayload} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PrivatePayload, 1));
};


/**
 * @param {?proto.gossip.PrivatePayload|undefined} value
 * @return {!proto.gossip.PrivateDataMessage} returns this
*/
proto.gossip.PrivateDataMessage.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.PrivateDataMessage} returns this
 */
proto.gossip.PrivateDataMessage.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.PrivateDataMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.Payload.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    seqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    data: msg.getData_asB64(),
    privateDataList: msg.getPrivateDataList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Payload}
 */
proto.gossip.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Payload;
  return proto.gossip.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Payload}
 */
proto.gossip.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPrivateData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrivateDataList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * optional uint64 seq_num = 1;
 * @return {number}
 */
proto.gossip.Payload.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.Payload} returns this
 */
proto.gossip.Payload.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Payload.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.gossip.Payload.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.gossip.Payload.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Payload} returns this
 */
proto.gossip.Payload.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes private_data = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.Payload.prototype.getPrivateDataList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes private_data = 3;
 * This is a type-conversion wrapper around `getPrivateDataList()`
 * @return {!Array<string>}
 */
proto.gossip.Payload.prototype.getPrivateDataList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPrivateDataList()));
};


/**
 * repeated bytes private_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateDataList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.Payload.prototype.getPrivateDataList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPrivateDataList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.Payload} returns this
 */
proto.gossip.Payload.prototype.setPrivateDataList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.Payload} returns this
 */
proto.gossip.Payload.prototype.addPrivateData = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.Payload} returns this
 */
proto.gossip.Payload.prototype.clearPrivateDataList = function() {
  return this.setPrivateDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PrivatePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PrivatePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PrivatePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PrivatePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    privateRwset: msg.getPrivateRwset_asB64(),
    privateSimHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    collectionConfigs: (f = msg.getCollectionConfigs()) && peer_collection_pb.CollectionConfigPackage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PrivatePayload}
 */
proto.gossip.PrivatePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PrivatePayload;
  return proto.gossip.PrivatePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PrivatePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PrivatePayload}
 */
proto.gossip.PrivatePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivateRwset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrivateSimHeight(value);
      break;
    case 6:
      var value = new peer_collection_pb.CollectionConfigPackage;
      reader.readMessage(value,peer_collection_pb.CollectionConfigPackage.deserializeBinaryFromReader);
      msg.setCollectionConfigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PrivatePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PrivatePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PrivatePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PrivatePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPrivateRwset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPrivateSimHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getCollectionConfigs();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      peer_collection_pb.CollectionConfigPackage.serializeBinaryToWriter
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.gossip.PrivatePayload.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.gossip.PrivatePayload.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tx_id = 3;
 * @return {string}
 */
proto.gossip.PrivatePayload.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes private_rwset = 4;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.PrivatePayload.prototype.getPrivateRwset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes private_rwset = 4;
 * This is a type-conversion wrapper around `getPrivateRwset()`
 * @return {string}
 */
proto.gossip.PrivatePayload.prototype.getPrivateRwset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivateRwset()));
};


/**
 * optional bytes private_rwset = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivateRwset()`
 * @return {!Uint8Array}
 */
proto.gossip.PrivatePayload.prototype.getPrivateRwset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivateRwset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.setPrivateRwset = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 private_sim_height = 5;
 * @return {number}
 */
proto.gossip.PrivatePayload.prototype.getPrivateSimHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.setPrivateSimHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional protos.CollectionConfigPackage collection_configs = 6;
 * @return {?proto.protos.CollectionConfigPackage}
 */
proto.gossip.PrivatePayload.prototype.getCollectionConfigs = function() {
  return /** @type{?proto.protos.CollectionConfigPackage} */ (
    jspb.Message.getWrapperField(this, peer_collection_pb.CollectionConfigPackage, 6));
};


/**
 * @param {?proto.protos.CollectionConfigPackage|undefined} value
 * @return {!proto.gossip.PrivatePayload} returns this
*/
proto.gossip.PrivatePayload.prototype.setCollectionConfigs = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.PrivatePayload} returns this
 */
proto.gossip.PrivatePayload.prototype.clearCollectionConfigs = function() {
  return this.setCollectionConfigs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.PrivatePayload.prototype.hasCollectionConfigs = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.AliveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.AliveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.AliveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.AliveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    membership: (f = msg.getMembership()) && proto.gossip.Member.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.gossip.PeerTime.toObject(includeInstance, f),
    identity: msg.getIdentity_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.AliveMessage}
 */
proto.gossip.AliveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.AliveMessage;
  return proto.gossip.AliveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.AliveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.AliveMessage}
 */
proto.gossip.AliveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Member;
      reader.readMessage(value,proto.gossip.Member.deserializeBinaryFromReader);
      msg.setMembership(value);
      break;
    case 2:
      var value = new proto.gossip.PeerTime;
      reader.readMessage(value,proto.gossip.PeerTime.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.AliveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.AliveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.AliveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.AliveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMembership();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gossip.Member.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gossip.PeerTime.serializeBinaryToWriter
    );
  }
  f = message.getIdentity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Member membership = 1;
 * @return {?proto.gossip.Member}
 */
proto.gossip.AliveMessage.prototype.getMembership = function() {
  return /** @type{?proto.gossip.Member} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Member, 1));
};


/**
 * @param {?proto.gossip.Member|undefined} value
 * @return {!proto.gossip.AliveMessage} returns this
*/
proto.gossip.AliveMessage.prototype.setMembership = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.AliveMessage} returns this
 */
proto.gossip.AliveMessage.prototype.clearMembership = function() {
  return this.setMembership(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.AliveMessage.prototype.hasMembership = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PeerTime timestamp = 2;
 * @return {?proto.gossip.PeerTime}
 */
proto.gossip.AliveMessage.prototype.getTimestamp = function() {
  return /** @type{?proto.gossip.PeerTime} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PeerTime, 2));
};


/**
 * @param {?proto.gossip.PeerTime|undefined} value
 * @return {!proto.gossip.AliveMessage} returns this
*/
proto.gossip.AliveMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.AliveMessage} returns this
 */
proto.gossip.AliveMessage.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.AliveMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes identity = 4;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.AliveMessage.prototype.getIdentity = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes identity = 4;
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {string}
 */
proto.gossip.AliveMessage.prototype.getIdentity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIdentity()));
};


/**
 * optional bytes identity = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {!Uint8Array}
 */
proto.gossip.AliveMessage.prototype.getIdentity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIdentity()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.AliveMessage} returns this
 */
proto.gossip.AliveMessage.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.LeadershipMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.LeadershipMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.LeadershipMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.LeadershipMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkiId: msg.getPkiId_asB64(),
    timestamp: (f = msg.getTimestamp()) && proto.gossip.PeerTime.toObject(includeInstance, f),
    isDeclaration: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.LeadershipMessage}
 */
proto.gossip.LeadershipMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.LeadershipMessage;
  return proto.gossip.LeadershipMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.LeadershipMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.LeadershipMessage}
 */
proto.gossip.LeadershipMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiId(value);
      break;
    case 2:
      var value = new proto.gossip.PeerTime;
      reader.readMessage(value,proto.gossip.PeerTime.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDeclaration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.LeadershipMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.LeadershipMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.LeadershipMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.LeadershipMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkiId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gossip.PeerTime.serializeBinaryToWriter
    );
  }
  f = message.getIsDeclaration();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional bytes pki_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.LeadershipMessage.prototype.getPkiId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pki_id = 1;
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {string}
 */
proto.gossip.LeadershipMessage.prototype.getPkiId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiId()));
};


/**
 * optional bytes pki_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {!Uint8Array}
 */
proto.gossip.LeadershipMessage.prototype.getPkiId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.LeadershipMessage} returns this
 */
proto.gossip.LeadershipMessage.prototype.setPkiId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PeerTime timestamp = 2;
 * @return {?proto.gossip.PeerTime}
 */
proto.gossip.LeadershipMessage.prototype.getTimestamp = function() {
  return /** @type{?proto.gossip.PeerTime} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PeerTime, 2));
};


/**
 * @param {?proto.gossip.PeerTime|undefined} value
 * @return {!proto.gossip.LeadershipMessage} returns this
*/
proto.gossip.LeadershipMessage.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.LeadershipMessage} returns this
 */
proto.gossip.LeadershipMessage.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.LeadershipMessage.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_declaration = 3;
 * @return {boolean}
 */
proto.gossip.LeadershipMessage.prototype.getIsDeclaration = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gossip.LeadershipMessage} returns this
 */
proto.gossip.LeadershipMessage.prototype.setIsDeclaration = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PeerTime.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PeerTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PeerTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PeerTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    incNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    seqNum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PeerTime}
 */
proto.gossip.PeerTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PeerTime;
  return proto.gossip.PeerTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PeerTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PeerTime}
 */
proto.gossip.PeerTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIncNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PeerTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PeerTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PeerTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PeerTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 inc_num = 1;
 * @return {number}
 */
proto.gossip.PeerTime.prototype.getIncNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PeerTime} returns this
 */
proto.gossip.PeerTime.prototype.setIncNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 seq_num = 2;
 * @return {number}
 */
proto.gossip.PeerTime.prototype.getSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PeerTime} returns this
 */
proto.gossip.PeerTime.prototype.setSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.MembershipRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.MembershipRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.MembershipRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.MembershipRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.MembershipRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    selfInformation: (f = msg.getSelfInformation()) && proto.gossip.Envelope.toObject(includeInstance, f),
    knownList: msg.getKnownList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.MembershipRequest}
 */
proto.gossip.MembershipRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.MembershipRequest;
  return proto.gossip.MembershipRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.MembershipRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.MembershipRequest}
 */
proto.gossip.MembershipRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Envelope;
      reader.readMessage(value,proto.gossip.Envelope.deserializeBinaryFromReader);
      msg.setSelfInformation(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addKnown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.MembershipRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.MembershipRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.MembershipRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.MembershipRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelfInformation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gossip.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getKnownList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional Envelope self_information = 1;
 * @return {?proto.gossip.Envelope}
 */
proto.gossip.MembershipRequest.prototype.getSelfInformation = function() {
  return /** @type{?proto.gossip.Envelope} */ (
    jspb.Message.getWrapperField(this, proto.gossip.Envelope, 1));
};


/**
 * @param {?proto.gossip.Envelope|undefined} value
 * @return {!proto.gossip.MembershipRequest} returns this
*/
proto.gossip.MembershipRequest.prototype.setSelfInformation = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.MembershipRequest} returns this
 */
proto.gossip.MembershipRequest.prototype.clearSelfInformation = function() {
  return this.setSelfInformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.MembershipRequest.prototype.hasSelfInformation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes known = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.MembershipRequest.prototype.getKnownList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes known = 2;
 * This is a type-conversion wrapper around `getKnownList()`
 * @return {!Array<string>}
 */
proto.gossip.MembershipRequest.prototype.getKnownList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getKnownList()));
};


/**
 * repeated bytes known = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKnownList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.MembershipRequest.prototype.getKnownList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getKnownList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.MembershipRequest} returns this
 */
proto.gossip.MembershipRequest.prototype.setKnownList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.MembershipRequest} returns this
 */
proto.gossip.MembershipRequest.prototype.addKnown = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.MembershipRequest} returns this
 */
proto.gossip.MembershipRequest.prototype.clearKnownList = function() {
  return this.setKnownList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.MembershipResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.MembershipResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.MembershipResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.MembershipResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.MembershipResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    aliveList: jspb.Message.toObjectList(msg.getAliveList(),
    proto.gossip.Envelope.toObject, includeInstance),
    deadList: jspb.Message.toObjectList(msg.getDeadList(),
    proto.gossip.Envelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.MembershipResponse}
 */
proto.gossip.MembershipResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.MembershipResponse;
  return proto.gossip.MembershipResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.MembershipResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.MembershipResponse}
 */
proto.gossip.MembershipResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Envelope;
      reader.readMessage(value,proto.gossip.Envelope.deserializeBinaryFromReader);
      msg.addAlive(value);
      break;
    case 2:
      var value = new proto.gossip.Envelope;
      reader.readMessage(value,proto.gossip.Envelope.deserializeBinaryFromReader);
      msg.addDead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.MembershipResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.MembershipResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.MembershipResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.MembershipResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAliveList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gossip.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getDeadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.gossip.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Envelope alive = 1;
 * @return {!Array<!proto.gossip.Envelope>}
 */
proto.gossip.MembershipResponse.prototype.getAliveList = function() {
  return /** @type{!Array<!proto.gossip.Envelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Envelope, 1));
};


/**
 * @param {!Array<!proto.gossip.Envelope>} value
 * @return {!proto.gossip.MembershipResponse} returns this
*/
proto.gossip.MembershipResponse.prototype.setAliveList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gossip.Envelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.MembershipResponse.prototype.addAlive = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gossip.Envelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.MembershipResponse} returns this
 */
proto.gossip.MembershipResponse.prototype.clearAliveList = function() {
  return this.setAliveList([]);
};


/**
 * repeated Envelope dead = 2;
 * @return {!Array<!proto.gossip.Envelope>}
 */
proto.gossip.MembershipResponse.prototype.getDeadList = function() {
  return /** @type{!Array<!proto.gossip.Envelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Envelope, 2));
};


/**
 * @param {!Array<!proto.gossip.Envelope>} value
 * @return {!proto.gossip.MembershipResponse} returns this
*/
proto.gossip.MembershipResponse.prototype.setDeadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.gossip.Envelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Envelope}
 */
proto.gossip.MembershipResponse.prototype.addDead = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.gossip.Envelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.MembershipResponse} returns this
 */
proto.gossip.MembershipResponse.prototype.clearDeadList = function() {
  return this.setDeadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Member.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Member.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Member} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Member.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpoint: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: msg.getMetadata_asB64(),
    pkiId: msg.getPkiId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Member}
 */
proto.gossip.Member.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Member;
  return proto.gossip.Member.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Member} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Member}
 */
proto.gossip.Member.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPkiId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Member.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Member.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Member} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Member.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPkiId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string endpoint = 1;
 * @return {string}
 */
proto.gossip.Member.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.Member} returns this
 */
proto.gossip.Member.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes metadata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Member.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes metadata = 2;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.gossip.Member.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.gossip.Member.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Member} returns this
 */
proto.gossip.Member.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pki_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Member.prototype.getPkiId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pki_id = 3;
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {string}
 */
proto.gossip.Member.prototype.getPkiId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPkiId()));
};


/**
 * optional bytes pki_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPkiId()`
 * @return {!Uint8Array}
 */
proto.gossip.Member.prototype.getPkiId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPkiId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Member} returns this
 */
proto.gossip.Member.prototype.setPkiId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Empty}
 */
proto.gossip.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Empty;
  return proto.gossip.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Empty}
 */
proto.gossip.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.RemoteStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.RemoteStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.RemoteStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemoteStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    startSeqNum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    endSeqNum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.RemoteStateRequest}
 */
proto.gossip.RemoteStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.RemoteStateRequest;
  return proto.gossip.RemoteStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.RemoteStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.RemoteStateRequest}
 */
proto.gossip.RemoteStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartSeqNum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndSeqNum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.RemoteStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.RemoteStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.RemoteStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemoteStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getEndSeqNum();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 start_seq_num = 1;
 * @return {number}
 */
proto.gossip.RemoteStateRequest.prototype.getStartSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.RemoteStateRequest} returns this
 */
proto.gossip.RemoteStateRequest.prototype.setStartSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 end_seq_num = 2;
 * @return {number}
 */
proto.gossip.RemoteStateRequest.prototype.getEndSeqNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.RemoteStateRequest} returns this
 */
proto.gossip.RemoteStateRequest.prototype.setEndSeqNum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.RemoteStateResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.RemoteStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.RemoteStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.RemoteStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemoteStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    payloadsList: jspb.Message.toObjectList(msg.getPayloadsList(),
    proto.gossip.Payload.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.RemoteStateResponse}
 */
proto.gossip.RemoteStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.RemoteStateResponse;
  return proto.gossip.RemoteStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.RemoteStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.RemoteStateResponse}
 */
proto.gossip.RemoteStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.Payload;
      reader.readMessage(value,proto.gossip.Payload.deserializeBinaryFromReader);
      msg.addPayloads(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.RemoteStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.RemoteStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.RemoteStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemoteStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayloadsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gossip.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Payload payloads = 1;
 * @return {!Array<!proto.gossip.Payload>}
 */
proto.gossip.RemoteStateResponse.prototype.getPayloadsList = function() {
  return /** @type{!Array<!proto.gossip.Payload>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.Payload, 1));
};


/**
 * @param {!Array<!proto.gossip.Payload>} value
 * @return {!proto.gossip.RemoteStateResponse} returns this
*/
proto.gossip.RemoteStateResponse.prototype.setPayloadsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gossip.Payload=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.Payload}
 */
proto.gossip.RemoteStateResponse.prototype.addPayloads = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gossip.Payload, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.RemoteStateResponse} returns this
 */
proto.gossip.RemoteStateResponse.prototype.clearPayloadsList = function() {
  return this.setPayloadsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.RemotePvtDataRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.RemotePvtDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.RemotePvtDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.RemotePvtDataRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemotePvtDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    digestsList: jspb.Message.toObjectList(msg.getDigestsList(),
    proto.gossip.PvtDataDigest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.RemotePvtDataRequest}
 */
proto.gossip.RemotePvtDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.RemotePvtDataRequest;
  return proto.gossip.RemotePvtDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.RemotePvtDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.RemotePvtDataRequest}
 */
proto.gossip.RemotePvtDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.PvtDataDigest;
      reader.readMessage(value,proto.gossip.PvtDataDigest.deserializeBinaryFromReader);
      msg.addDigests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.RemotePvtDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.RemotePvtDataRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.RemotePvtDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemotePvtDataRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDigestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gossip.PvtDataDigest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PvtDataDigest digests = 1;
 * @return {!Array<!proto.gossip.PvtDataDigest>}
 */
proto.gossip.RemotePvtDataRequest.prototype.getDigestsList = function() {
  return /** @type{!Array<!proto.gossip.PvtDataDigest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.PvtDataDigest, 1));
};


/**
 * @param {!Array<!proto.gossip.PvtDataDigest>} value
 * @return {!proto.gossip.RemotePvtDataRequest} returns this
*/
proto.gossip.RemotePvtDataRequest.prototype.setDigestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gossip.PvtDataDigest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.PvtDataDigest}
 */
proto.gossip.RemotePvtDataRequest.prototype.addDigests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gossip.PvtDataDigest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.RemotePvtDataRequest} returns this
 */
proto.gossip.RemotePvtDataRequest.prototype.clearDigestsList = function() {
  return this.setDigestsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PvtDataDigest.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PvtDataDigest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PvtDataDigest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataDigest.toObject = function(includeInstance, msg) {
  var f, obj = {
    txId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    blockSeq: jspb.Message.getFieldWithDefault(msg, 4, 0),
    seqInBlock: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PvtDataDigest}
 */
proto.gossip.PvtDataDigest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PvtDataDigest;
  return proto.gossip.PvtDataDigest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PvtDataDigest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PvtDataDigest}
 */
proto.gossip.PvtDataDigest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockSeq(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSeqInBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PvtDataDigest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PvtDataDigest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PvtDataDigest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataDigest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBlockSeq();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSeqInBlock();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional string tx_id = 1;
 * @return {string}
 */
proto.gossip.PvtDataDigest.prototype.getTxId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PvtDataDigest} returns this
 */
proto.gossip.PvtDataDigest.prototype.setTxId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.gossip.PvtDataDigest.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PvtDataDigest} returns this
 */
proto.gossip.PvtDataDigest.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.gossip.PvtDataDigest.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.PvtDataDigest} returns this
 */
proto.gossip.PvtDataDigest.prototype.setCollection = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 block_seq = 4;
 * @return {number}
 */
proto.gossip.PvtDataDigest.prototype.getBlockSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PvtDataDigest} returns this
 */
proto.gossip.PvtDataDigest.prototype.setBlockSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 seq_in_block = 5;
 * @return {number}
 */
proto.gossip.PvtDataDigest.prototype.getSeqInBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PvtDataDigest} returns this
 */
proto.gossip.PvtDataDigest.prototype.setSeqInBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.RemotePvtDataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.RemotePvtDataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.RemotePvtDataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.RemotePvtDataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemotePvtDataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.gossip.PvtDataElement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.RemotePvtDataResponse}
 */
proto.gossip.RemotePvtDataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.RemotePvtDataResponse;
  return proto.gossip.RemotePvtDataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.RemotePvtDataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.RemotePvtDataResponse}
 */
proto.gossip.RemotePvtDataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.PvtDataElement;
      reader.readMessage(value,proto.gossip.PvtDataElement.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.RemotePvtDataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.RemotePvtDataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.RemotePvtDataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.RemotePvtDataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gossip.PvtDataElement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PvtDataElement elements = 1;
 * @return {!Array<!proto.gossip.PvtDataElement>}
 */
proto.gossip.RemotePvtDataResponse.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.gossip.PvtDataElement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gossip.PvtDataElement, 1));
};


/**
 * @param {!Array<!proto.gossip.PvtDataElement>} value
 * @return {!proto.gossip.RemotePvtDataResponse} returns this
*/
proto.gossip.RemotePvtDataResponse.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gossip.PvtDataElement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gossip.PvtDataElement}
 */
proto.gossip.RemotePvtDataResponse.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gossip.PvtDataElement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.RemotePvtDataResponse} returns this
 */
proto.gossip.RemotePvtDataResponse.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gossip.PvtDataElement.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PvtDataElement.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PvtDataElement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PvtDataElement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataElement.toObject = function(includeInstance, msg) {
  var f, obj = {
    digest: (f = msg.getDigest()) && proto.gossip.PvtDataDigest.toObject(includeInstance, f),
    payloadList: msg.getPayloadList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PvtDataElement}
 */
proto.gossip.PvtDataElement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PvtDataElement;
  return proto.gossip.PvtDataElement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PvtDataElement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PvtDataElement}
 */
proto.gossip.PvtDataElement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gossip.PvtDataDigest;
      reader.readMessage(value,proto.gossip.PvtDataDigest.deserializeBinaryFromReader);
      msg.setDigest(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PvtDataElement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PvtDataElement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PvtDataElement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataElement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDigest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gossip.PvtDataDigest.serializeBinaryToWriter
    );
  }
  f = message.getPayloadList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
};


/**
 * optional PvtDataDigest digest = 1;
 * @return {?proto.gossip.PvtDataDigest}
 */
proto.gossip.PvtDataElement.prototype.getDigest = function() {
  return /** @type{?proto.gossip.PvtDataDigest} */ (
    jspb.Message.getWrapperField(this, proto.gossip.PvtDataDigest, 1));
};


/**
 * @param {?proto.gossip.PvtDataDigest|undefined} value
 * @return {!proto.gossip.PvtDataElement} returns this
*/
proto.gossip.PvtDataElement.prototype.setDigest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gossip.PvtDataElement} returns this
 */
proto.gossip.PvtDataElement.prototype.clearDigest = function() {
  return this.setDigest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gossip.PvtDataElement.prototype.hasDigest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated bytes payload = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.gossip.PvtDataElement.prototype.getPayloadList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes payload = 2;
 * This is a type-conversion wrapper around `getPayloadList()`
 * @return {!Array<string>}
 */
proto.gossip.PvtDataElement.prototype.getPayloadList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getPayloadList()));
};


/**
 * repeated bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadList()`
 * @return {!Array<!Uint8Array>}
 */
proto.gossip.PvtDataElement.prototype.getPayloadList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getPayloadList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.gossip.PvtDataElement} returns this
 */
proto.gossip.PvtDataElement.prototype.setPayloadList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.gossip.PvtDataElement} returns this
 */
proto.gossip.PvtDataElement.prototype.addPayload = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gossip.PvtDataElement} returns this
 */
proto.gossip.PvtDataElement.prototype.clearPayloadList = function() {
  return this.setPayloadList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.PvtDataPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.PvtDataPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.PvtDataPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    txSeqInBlock: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.PvtDataPayload}
 */
proto.gossip.PvtDataPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.PvtDataPayload;
  return proto.gossip.PvtDataPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.PvtDataPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.PvtDataPayload}
 */
proto.gossip.PvtDataPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTxSeqInBlock(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.PvtDataPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.PvtDataPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.PvtDataPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.PvtDataPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxSeqInBlock();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint64 tx_seq_in_block = 1;
 * @return {number}
 */
proto.gossip.PvtDataPayload.prototype.getTxSeqInBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gossip.PvtDataPayload} returns this
 */
proto.gossip.PvtDataPayload.prototype.setTxSeqInBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.PvtDataPayload.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.gossip.PvtDataPayload.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.gossip.PvtDataPayload.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.PvtDataPayload} returns this
 */
proto.gossip.PvtDataPayload.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Acknowledgement.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Acknowledgement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Acknowledgement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Acknowledgement.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Acknowledgement}
 */
proto.gossip.Acknowledgement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Acknowledgement;
  return proto.gossip.Acknowledgement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Acknowledgement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Acknowledgement}
 */
proto.gossip.Acknowledgement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Acknowledgement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Acknowledgement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Acknowledgement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Acknowledgement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.gossip.Acknowledgement.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.Acknowledgement} returns this
 */
proto.gossip.Acknowledgement.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gossip.Chaincode.prototype.toObject = function(opt_includeInstance) {
  return proto.gossip.Chaincode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gossip.Chaincode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Chaincode.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gossip.Chaincode}
 */
proto.gossip.Chaincode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gossip.Chaincode;
  return proto.gossip.Chaincode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gossip.Chaincode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gossip.Chaincode}
 */
proto.gossip.Chaincode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gossip.Chaincode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gossip.Chaincode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gossip.Chaincode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gossip.Chaincode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.gossip.Chaincode.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.Chaincode} returns this
 */
proto.gossip.Chaincode.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.gossip.Chaincode.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.gossip.Chaincode} returns this
 */
proto.gossip.Chaincode.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.gossip.Chaincode.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.gossip.Chaincode.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.gossip.Chaincode.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.gossip.Chaincode} returns this
 */
proto.gossip.Chaincode.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.gossip.PullMsgType = {
  UNDEFINED: 0,
  BLOCK_MSG: 1,
  IDENTITY_MSG: 2
};

goog.object.extend(exports, proto.gossip);
