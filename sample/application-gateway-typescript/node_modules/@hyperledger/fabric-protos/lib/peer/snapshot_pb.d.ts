// package: protos
// file: peer/snapshot.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import * as common_common_pb from "../common/common_pb";

export class SnapshotRequest extends jspb.Message {
  hasSignatureHeader(): boolean;
  clearSignatureHeader(): void;
  getSignatureHeader(): common_common_pb.SignatureHeader | undefined;
  setSignatureHeader(value?: common_common_pb.SignatureHeader): void;

  getChannelId(): string;
  setChannelId(value: string): void;

  getBlockNumber(): number;
  setBlockNumber(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SnapshotRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SnapshotRequest): SnapshotRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SnapshotRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SnapshotRequest;
  static deserializeBinaryFromReader(message: SnapshotRequest, reader: jspb.BinaryReader): SnapshotRequest;
}

export namespace SnapshotRequest {
  export type AsObject = {
    signatureHeader?: common_common_pb.SignatureHeader.AsObject,
    channelId: string,
    blockNumber: number,
  }
}

export class SnapshotQuery extends jspb.Message {
  hasSignatureHeader(): boolean;
  clearSignatureHeader(): void;
  getSignatureHeader(): common_common_pb.SignatureHeader | undefined;
  setSignatureHeader(value?: common_common_pb.SignatureHeader): void;

  getChannelId(): string;
  setChannelId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SnapshotQuery.AsObject;
  static toObject(includeInstance: boolean, msg: SnapshotQuery): SnapshotQuery.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SnapshotQuery, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SnapshotQuery;
  static deserializeBinaryFromReader(message: SnapshotQuery, reader: jspb.BinaryReader): SnapshotQuery;
}

export namespace SnapshotQuery {
  export type AsObject = {
    signatureHeader?: common_common_pb.SignatureHeader.AsObject,
    channelId: string,
  }
}

export class SignedSnapshotRequest extends jspb.Message {
  getRequest(): Uint8Array | string;
  getRequest_asU8(): Uint8Array;
  getRequest_asB64(): string;
  setRequest(value: Uint8Array | string): void;

  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SignedSnapshotRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SignedSnapshotRequest): SignedSnapshotRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SignedSnapshotRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SignedSnapshotRequest;
  static deserializeBinaryFromReader(message: SignedSnapshotRequest, reader: jspb.BinaryReader): SignedSnapshotRequest;
}

export namespace SignedSnapshotRequest {
  export type AsObject = {
    request: Uint8Array | string,
    signature: Uint8Array | string,
  }
}

export class QueryPendingSnapshotsResponse extends jspb.Message {
  clearBlockNumbersList(): void;
  getBlockNumbersList(): Array<number>;
  setBlockNumbersList(value: Array<number>): void;
  addBlockNumbers(value: number, index?: number): number;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPendingSnapshotsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPendingSnapshotsResponse): QueryPendingSnapshotsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPendingSnapshotsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPendingSnapshotsResponse;
  static deserializeBinaryFromReader(message: QueryPendingSnapshotsResponse, reader: jspb.BinaryReader): QueryPendingSnapshotsResponse;
}

export namespace QueryPendingSnapshotsResponse {
  export type AsObject = {
    blockNumbersList: Array<number>,
  }
}

