// package: protos
// file: peer/collection.proto

import * as jspb from "google-protobuf";
import * as common_policies_pb from "../common/policies_pb";
import * as peer_policy_pb from "../peer/policy_pb";

export class CollectionConfigPackage extends jspb.Message {
  clearConfigList(): void;
  getConfigList(): Array<CollectionConfig>;
  setConfigList(value: Array<CollectionConfig>): void;
  addConfig(value?: CollectionConfig, index?: number): CollectionConfig;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CollectionConfigPackage.AsObject;
  static toObject(includeInstance: boolean, msg: CollectionConfigPackage): CollectionConfigPackage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CollectionConfigPackage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CollectionConfigPackage;
  static deserializeBinaryFromReader(message: CollectionConfigPackage, reader: jspb.BinaryReader): CollectionConfigPackage;
}

export namespace CollectionConfigPackage {
  export type AsObject = {
    configList: Array<CollectionConfig.AsObject>,
  }
}

export class CollectionConfig extends jspb.Message {
  hasStaticCollectionConfig(): boolean;
  clearStaticCollectionConfig(): void;
  getStaticCollectionConfig(): StaticCollectionConfig | undefined;
  setStaticCollectionConfig(value?: StaticCollectionConfig): void;

  getPayloadCase(): CollectionConfig.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CollectionConfig.AsObject;
  static toObject(includeInstance: boolean, msg: CollectionConfig): CollectionConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CollectionConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CollectionConfig;
  static deserializeBinaryFromReader(message: CollectionConfig, reader: jspb.BinaryReader): CollectionConfig;
}

export namespace CollectionConfig {
  export type AsObject = {
    staticCollectionConfig?: StaticCollectionConfig.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    STATIC_COLLECTION_CONFIG = 1,
  }
}

export class StaticCollectionConfig extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  hasMemberOrgsPolicy(): boolean;
  clearMemberOrgsPolicy(): void;
  getMemberOrgsPolicy(): CollectionPolicyConfig | undefined;
  setMemberOrgsPolicy(value?: CollectionPolicyConfig): void;

  getRequiredPeerCount(): number;
  setRequiredPeerCount(value: number): void;

  getMaximumPeerCount(): number;
  setMaximumPeerCount(value: number): void;

  getBlockToLive(): number;
  setBlockToLive(value: number): void;

  getMemberOnlyRead(): boolean;
  setMemberOnlyRead(value: boolean): void;

  getMemberOnlyWrite(): boolean;
  setMemberOnlyWrite(value: boolean): void;

  hasEndorsementPolicy(): boolean;
  clearEndorsementPolicy(): void;
  getEndorsementPolicy(): peer_policy_pb.ApplicationPolicy | undefined;
  setEndorsementPolicy(value?: peer_policy_pb.ApplicationPolicy): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StaticCollectionConfig.AsObject;
  static toObject(includeInstance: boolean, msg: StaticCollectionConfig): StaticCollectionConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StaticCollectionConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StaticCollectionConfig;
  static deserializeBinaryFromReader(message: StaticCollectionConfig, reader: jspb.BinaryReader): StaticCollectionConfig;
}

export namespace StaticCollectionConfig {
  export type AsObject = {
    name: string,
    memberOrgsPolicy?: CollectionPolicyConfig.AsObject,
    requiredPeerCount: number,
    maximumPeerCount: number,
    blockToLive: number,
    memberOnlyRead: boolean,
    memberOnlyWrite: boolean,
    endorsementPolicy?: peer_policy_pb.ApplicationPolicy.AsObject,
  }
}

export class CollectionPolicyConfig extends jspb.Message {
  hasSignaturePolicy(): boolean;
  clearSignaturePolicy(): void;
  getSignaturePolicy(): common_policies_pb.SignaturePolicyEnvelope | undefined;
  setSignaturePolicy(value?: common_policies_pb.SignaturePolicyEnvelope): void;

  getPayloadCase(): CollectionPolicyConfig.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CollectionPolicyConfig.AsObject;
  static toObject(includeInstance: boolean, msg: CollectionPolicyConfig): CollectionPolicyConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CollectionPolicyConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CollectionPolicyConfig;
  static deserializeBinaryFromReader(message: CollectionPolicyConfig, reader: jspb.BinaryReader): CollectionPolicyConfig;
}

export namespace CollectionPolicyConfig {
  export type AsObject = {
    signaturePolicy?: common_policies_pb.SignaturePolicyEnvelope.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    SIGNATURE_POLICY = 1,
  }
}

