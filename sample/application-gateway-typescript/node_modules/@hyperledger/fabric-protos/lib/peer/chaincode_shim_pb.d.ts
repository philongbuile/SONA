// package: protos
// file: peer/chaincode_shim.proto

import * as jspb from "google-protobuf";
import * as peer_chaincode_event_pb from "../peer/chaincode_event_pb";
import * as peer_proposal_pb from "../peer/proposal_pb";
import * as google_protobuf_timestamp_pb from "google-protobuf/google/protobuf/timestamp_pb";

export class ChaincodeMessage extends jspb.Message {
  getType(): ChaincodeMessage.TypeMap[keyof ChaincodeMessage.TypeMap];
  setType(value: ChaincodeMessage.TypeMap[keyof ChaincodeMessage.TypeMap]): void;

  hasTimestamp(): boolean;
  clearTimestamp(): void;
  getTimestamp(): google_protobuf_timestamp_pb.Timestamp | undefined;
  setTimestamp(value?: google_protobuf_timestamp_pb.Timestamp): void;

  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  getTxid(): string;
  setTxid(value: string): void;

  hasProposal(): boolean;
  clearProposal(): void;
  getProposal(): peer_proposal_pb.SignedProposal | undefined;
  setProposal(value?: peer_proposal_pb.SignedProposal): void;

  hasChaincodeEvent(): boolean;
  clearChaincodeEvent(): void;
  getChaincodeEvent(): peer_chaincode_event_pb.ChaincodeEvent | undefined;
  setChaincodeEvent(value?: peer_chaincode_event_pb.ChaincodeEvent): void;

  getChannelId(): string;
  setChannelId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChaincodeMessage.AsObject;
  static toObject(includeInstance: boolean, msg: ChaincodeMessage): ChaincodeMessage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChaincodeMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChaincodeMessage;
  static deserializeBinaryFromReader(message: ChaincodeMessage, reader: jspb.BinaryReader): ChaincodeMessage;
}

export namespace ChaincodeMessage {
  export type AsObject = {
    type: ChaincodeMessage.TypeMap[keyof ChaincodeMessage.TypeMap],
    timestamp?: google_protobuf_timestamp_pb.Timestamp.AsObject,
    payload: Uint8Array | string,
    txid: string,
    proposal?: peer_proposal_pb.SignedProposal.AsObject,
    chaincodeEvent?: peer_chaincode_event_pb.ChaincodeEvent.AsObject,
    channelId: string,
  }

  export interface TypeMap {
    UNDEFINED: 0;
    REGISTER: 1;
    REGISTERED: 2;
    INIT: 3;
    READY: 4;
    TRANSACTION: 5;
    COMPLETED: 6;
    ERROR: 7;
    GET_STATE: 8;
    PUT_STATE: 9;
    DEL_STATE: 10;
    INVOKE_CHAINCODE: 11;
    RESPONSE: 13;
    GET_STATE_BY_RANGE: 14;
    GET_QUERY_RESULT: 15;
    QUERY_STATE_NEXT: 16;
    QUERY_STATE_CLOSE: 17;
    KEEPALIVE: 18;
    GET_HISTORY_FOR_KEY: 19;
    GET_STATE_METADATA: 20;
    PUT_STATE_METADATA: 21;
    GET_PRIVATE_DATA_HASH: 22;
    PURGE_PRIVATE_DATA: 23;
  }

  export const Type: TypeMap;
}

export class GetState extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetState.AsObject;
  static toObject(includeInstance: boolean, msg: GetState): GetState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetState;
  static deserializeBinaryFromReader(message: GetState, reader: jspb.BinaryReader): GetState;
}

export namespace GetState {
  export type AsObject = {
    key: string,
    collection: string,
  }
}

export class GetStateMetadata extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStateMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: GetStateMetadata): GetStateMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStateMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStateMetadata;
  static deserializeBinaryFromReader(message: GetStateMetadata, reader: jspb.BinaryReader): GetStateMetadata;
}

export namespace GetStateMetadata {
  export type AsObject = {
    key: string,
    collection: string,
  }
}

export class PutState extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getValue(): Uint8Array | string;
  getValue_asU8(): Uint8Array;
  getValue_asB64(): string;
  setValue(value: Uint8Array | string): void;

  getCollection(): string;
  setCollection(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PutState.AsObject;
  static toObject(includeInstance: boolean, msg: PutState): PutState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PutState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PutState;
  static deserializeBinaryFromReader(message: PutState, reader: jspb.BinaryReader): PutState;
}

export namespace PutState {
  export type AsObject = {
    key: string,
    value: Uint8Array | string,
    collection: string,
  }
}

export class PutStateMetadata extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): StateMetadata | undefined;
  setMetadata(value?: StateMetadata): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PutStateMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: PutStateMetadata): PutStateMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PutStateMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PutStateMetadata;
  static deserializeBinaryFromReader(message: PutStateMetadata, reader: jspb.BinaryReader): PutStateMetadata;
}

export namespace PutStateMetadata {
  export type AsObject = {
    key: string,
    collection: string,
    metadata?: StateMetadata.AsObject,
  }
}

export class DelState extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DelState.AsObject;
  static toObject(includeInstance: boolean, msg: DelState): DelState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DelState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DelState;
  static deserializeBinaryFromReader(message: DelState, reader: jspb.BinaryReader): DelState;
}

export namespace DelState {
  export type AsObject = {
    key: string,
    collection: string,
  }
}

export class PurgePrivateState extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PurgePrivateState.AsObject;
  static toObject(includeInstance: boolean, msg: PurgePrivateState): PurgePrivateState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PurgePrivateState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PurgePrivateState;
  static deserializeBinaryFromReader(message: PurgePrivateState, reader: jspb.BinaryReader): PurgePrivateState;
}

export namespace PurgePrivateState {
  export type AsObject = {
    key: string,
    collection: string,
  }
}

export class GetStateByRange extends jspb.Message {
  getStartkey(): string;
  setStartkey(value: string): void;

  getEndkey(): string;
  setEndkey(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  getMetadata(): Uint8Array | string;
  getMetadata_asU8(): Uint8Array;
  getMetadata_asB64(): string;
  setMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetStateByRange.AsObject;
  static toObject(includeInstance: boolean, msg: GetStateByRange): GetStateByRange.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetStateByRange, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetStateByRange;
  static deserializeBinaryFromReader(message: GetStateByRange, reader: jspb.BinaryReader): GetStateByRange;
}

export namespace GetStateByRange {
  export type AsObject = {
    startkey: string,
    endkey: string,
    collection: string,
    metadata: Uint8Array | string,
  }
}

export class GetQueryResult extends jspb.Message {
  getQuery(): string;
  setQuery(value: string): void;

  getCollection(): string;
  setCollection(value: string): void;

  getMetadata(): Uint8Array | string;
  getMetadata_asU8(): Uint8Array;
  getMetadata_asB64(): string;
  setMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetQueryResult.AsObject;
  static toObject(includeInstance: boolean, msg: GetQueryResult): GetQueryResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetQueryResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetQueryResult;
  static deserializeBinaryFromReader(message: GetQueryResult, reader: jspb.BinaryReader): GetQueryResult;
}

export namespace GetQueryResult {
  export type AsObject = {
    query: string,
    collection: string,
    metadata: Uint8Array | string,
  }
}

export class QueryMetadata extends jspb.Message {
  getPagesize(): number;
  setPagesize(value: number): void;

  getBookmark(): string;
  setBookmark(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMetadata): QueryMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMetadata;
  static deserializeBinaryFromReader(message: QueryMetadata, reader: jspb.BinaryReader): QueryMetadata;
}

export namespace QueryMetadata {
  export type AsObject = {
    pagesize: number,
    bookmark: string,
  }
}

export class GetHistoryForKey extends jspb.Message {
  getKey(): string;
  setKey(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetHistoryForKey.AsObject;
  static toObject(includeInstance: boolean, msg: GetHistoryForKey): GetHistoryForKey.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetHistoryForKey, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetHistoryForKey;
  static deserializeBinaryFromReader(message: GetHistoryForKey, reader: jspb.BinaryReader): GetHistoryForKey;
}

export namespace GetHistoryForKey {
  export type AsObject = {
    key: string,
  }
}

export class QueryStateNext extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryStateNext.AsObject;
  static toObject(includeInstance: boolean, msg: QueryStateNext): QueryStateNext.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryStateNext, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryStateNext;
  static deserializeBinaryFromReader(message: QueryStateNext, reader: jspb.BinaryReader): QueryStateNext;
}

export namespace QueryStateNext {
  export type AsObject = {
    id: string,
  }
}

export class QueryStateClose extends jspb.Message {
  getId(): string;
  setId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryStateClose.AsObject;
  static toObject(includeInstance: boolean, msg: QueryStateClose): QueryStateClose.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryStateClose, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryStateClose;
  static deserializeBinaryFromReader(message: QueryStateClose, reader: jspb.BinaryReader): QueryStateClose;
}

export namespace QueryStateClose {
  export type AsObject = {
    id: string,
  }
}

export class QueryResultBytes extends jspb.Message {
  getResultbytes(): Uint8Array | string;
  getResultbytes_asU8(): Uint8Array;
  getResultbytes_asB64(): string;
  setResultbytes(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryResultBytes.AsObject;
  static toObject(includeInstance: boolean, msg: QueryResultBytes): QueryResultBytes.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryResultBytes, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryResultBytes;
  static deserializeBinaryFromReader(message: QueryResultBytes, reader: jspb.BinaryReader): QueryResultBytes;
}

export namespace QueryResultBytes {
  export type AsObject = {
    resultbytes: Uint8Array | string,
  }
}

export class QueryResponse extends jspb.Message {
  clearResultsList(): void;
  getResultsList(): Array<QueryResultBytes>;
  setResultsList(value: Array<QueryResultBytes>): void;
  addResults(value?: QueryResultBytes, index?: number): QueryResultBytes;

  getHasMore(): boolean;
  setHasMore(value: boolean): void;

  getId(): string;
  setId(value: string): void;

  getMetadata(): Uint8Array | string;
  getMetadata_asU8(): Uint8Array;
  getMetadata_asB64(): string;
  setMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryResponse): QueryResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryResponse;
  static deserializeBinaryFromReader(message: QueryResponse, reader: jspb.BinaryReader): QueryResponse;
}

export namespace QueryResponse {
  export type AsObject = {
    resultsList: Array<QueryResultBytes.AsObject>,
    hasMore: boolean,
    id: string,
    metadata: Uint8Array | string,
  }
}

export class QueryResponseMetadata extends jspb.Message {
  getFetchedRecordsCount(): number;
  setFetchedRecordsCount(value: number): void;

  getBookmark(): string;
  setBookmark(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryResponseMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: QueryResponseMetadata): QueryResponseMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryResponseMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryResponseMetadata;
  static deserializeBinaryFromReader(message: QueryResponseMetadata, reader: jspb.BinaryReader): QueryResponseMetadata;
}

export namespace QueryResponseMetadata {
  export type AsObject = {
    fetchedRecordsCount: number,
    bookmark: string,
  }
}

export class StateMetadata extends jspb.Message {
  getMetakey(): string;
  setMetakey(value: string): void;

  getValue(): Uint8Array | string;
  getValue_asU8(): Uint8Array;
  getValue_asB64(): string;
  setValue(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StateMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: StateMetadata): StateMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StateMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StateMetadata;
  static deserializeBinaryFromReader(message: StateMetadata, reader: jspb.BinaryReader): StateMetadata;
}

export namespace StateMetadata {
  export type AsObject = {
    metakey: string,
    value: Uint8Array | string,
  }
}

export class StateMetadataResult extends jspb.Message {
  clearEntriesList(): void;
  getEntriesList(): Array<StateMetadata>;
  setEntriesList(value: Array<StateMetadata>): void;
  addEntries(value?: StateMetadata, index?: number): StateMetadata;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StateMetadataResult.AsObject;
  static toObject(includeInstance: boolean, msg: StateMetadataResult): StateMetadataResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StateMetadataResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StateMetadataResult;
  static deserializeBinaryFromReader(message: StateMetadataResult, reader: jspb.BinaryReader): StateMetadataResult;
}

export namespace StateMetadataResult {
  export type AsObject = {
    entriesList: Array<StateMetadata.AsObject>,
  }
}

