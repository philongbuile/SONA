// package: lifecycle
// file: peer/lifecycle/db.proto

import * as jspb from "google-protobuf";

export class StateMetadata extends jspb.Message {
  getDatatype(): string;
  setDatatype(value: string): void;

  clearFieldsList(): void;
  getFieldsList(): Array<string>;
  setFieldsList(value: Array<string>): void;
  addFields(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StateMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: StateMetadata): StateMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StateMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StateMetadata;
  static deserializeBinaryFromReader(message: StateMetadata, reader: jspb.BinaryReader): StateMetadata;
}

export namespace StateMetadata {
  export type AsObject = {
    datatype: string,
    fieldsList: Array<string>,
  }
}

export class StateData extends jspb.Message {
  hasInt64(): boolean;
  clearInt64(): void;
  getInt64(): number;
  setInt64(value: number): void;

  hasBytes(): boolean;
  clearBytes(): void;
  getBytes(): Uint8Array | string;
  getBytes_asU8(): Uint8Array;
  getBytes_asB64(): string;
  setBytes(value: Uint8Array | string): void;

  hasString(): boolean;
  clearString(): void;
  getString(): string;
  setString(value: string): void;

  getTypeCase(): StateData.TypeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StateData.AsObject;
  static toObject(includeInstance: boolean, msg: StateData): StateData.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StateData, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StateData;
  static deserializeBinaryFromReader(message: StateData, reader: jspb.BinaryReader): StateData;
}

export namespace StateData {
  export type AsObject = {
    int64: number,
    bytes: Uint8Array | string,
    string: string,
  }

  export enum TypeCase {
    TYPE_NOT_SET = 0,
    INT64 = 1,
    BYTES = 2,
    STRING = 3,
  }
}

