// package: lifecycle
// file: peer/lifecycle/lifecycle.proto

import * as jspb from "google-protobuf";
import * as peer_collection_pb from "../../peer/collection_pb";

export class InstallChaincodeArgs extends jspb.Message {
  getChaincodeInstallPackage(): Uint8Array | string;
  getChaincodeInstallPackage_asU8(): Uint8Array;
  getChaincodeInstallPackage_asB64(): string;
  setChaincodeInstallPackage(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InstallChaincodeArgs.AsObject;
  static toObject(includeInstance: boolean, msg: InstallChaincodeArgs): InstallChaincodeArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InstallChaincodeArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InstallChaincodeArgs;
  static deserializeBinaryFromReader(message: InstallChaincodeArgs, reader: jspb.BinaryReader): InstallChaincodeArgs;
}

export namespace InstallChaincodeArgs {
  export type AsObject = {
    chaincodeInstallPackage: Uint8Array | string,
  }
}

export class InstallChaincodeResult extends jspb.Message {
  getPackageId(): string;
  setPackageId(value: string): void;

  getLabel(): string;
  setLabel(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): InstallChaincodeResult.AsObject;
  static toObject(includeInstance: boolean, msg: InstallChaincodeResult): InstallChaincodeResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: InstallChaincodeResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): InstallChaincodeResult;
  static deserializeBinaryFromReader(message: InstallChaincodeResult, reader: jspb.BinaryReader): InstallChaincodeResult;
}

export namespace InstallChaincodeResult {
  export type AsObject = {
    packageId: string,
    label: string,
  }
}

export class QueryInstalledChaincodeArgs extends jspb.Message {
  getPackageId(): string;
  setPackageId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryInstalledChaincodeArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QueryInstalledChaincodeArgs): QueryInstalledChaincodeArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryInstalledChaincodeArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryInstalledChaincodeArgs;
  static deserializeBinaryFromReader(message: QueryInstalledChaincodeArgs, reader: jspb.BinaryReader): QueryInstalledChaincodeArgs;
}

export namespace QueryInstalledChaincodeArgs {
  export type AsObject = {
    packageId: string,
  }
}

export class QueryInstalledChaincodeResult extends jspb.Message {
  getPackageId(): string;
  setPackageId(value: string): void;

  getLabel(): string;
  setLabel(value: string): void;

  getReferencesMap(): jspb.Map<string, QueryInstalledChaincodeResult.References>;
  clearReferencesMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryInstalledChaincodeResult.AsObject;
  static toObject(includeInstance: boolean, msg: QueryInstalledChaincodeResult): QueryInstalledChaincodeResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryInstalledChaincodeResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryInstalledChaincodeResult;
  static deserializeBinaryFromReader(message: QueryInstalledChaincodeResult, reader: jspb.BinaryReader): QueryInstalledChaincodeResult;
}

export namespace QueryInstalledChaincodeResult {
  export type AsObject = {
    packageId: string,
    label: string,
    referencesMap: Array<[string, QueryInstalledChaincodeResult.References.AsObject]>,
  }

  export class References extends jspb.Message {
    clearChaincodesList(): void;
    getChaincodesList(): Array<QueryInstalledChaincodeResult.Chaincode>;
    setChaincodesList(value: Array<QueryInstalledChaincodeResult.Chaincode>): void;
    addChaincodes(value?: QueryInstalledChaincodeResult.Chaincode, index?: number): QueryInstalledChaincodeResult.Chaincode;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): References.AsObject;
    static toObject(includeInstance: boolean, msg: References): References.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: References, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): References;
    static deserializeBinaryFromReader(message: References, reader: jspb.BinaryReader): References;
  }

  export namespace References {
    export type AsObject = {
      chaincodesList: Array<QueryInstalledChaincodeResult.Chaincode.AsObject>,
    }
  }

  export class Chaincode extends jspb.Message {
    getName(): string;
    setName(value: string): void;

    getVersion(): string;
    setVersion(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Chaincode.AsObject;
    static toObject(includeInstance: boolean, msg: Chaincode): Chaincode.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Chaincode, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Chaincode;
    static deserializeBinaryFromReader(message: Chaincode, reader: jspb.BinaryReader): Chaincode;
  }

  export namespace Chaincode {
    export type AsObject = {
      name: string,
      version: string,
    }
  }
}

export class GetInstalledChaincodePackageArgs extends jspb.Message {
  getPackageId(): string;
  setPackageId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetInstalledChaincodePackageArgs.AsObject;
  static toObject(includeInstance: boolean, msg: GetInstalledChaincodePackageArgs): GetInstalledChaincodePackageArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetInstalledChaincodePackageArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetInstalledChaincodePackageArgs;
  static deserializeBinaryFromReader(message: GetInstalledChaincodePackageArgs, reader: jspb.BinaryReader): GetInstalledChaincodePackageArgs;
}

export namespace GetInstalledChaincodePackageArgs {
  export type AsObject = {
    packageId: string,
  }
}

export class GetInstalledChaincodePackageResult extends jspb.Message {
  getChaincodeInstallPackage(): Uint8Array | string;
  getChaincodeInstallPackage_asU8(): Uint8Array;
  getChaincodeInstallPackage_asB64(): string;
  setChaincodeInstallPackage(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GetInstalledChaincodePackageResult.AsObject;
  static toObject(includeInstance: boolean, msg: GetInstalledChaincodePackageResult): GetInstalledChaincodePackageResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GetInstalledChaincodePackageResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GetInstalledChaincodePackageResult;
  static deserializeBinaryFromReader(message: GetInstalledChaincodePackageResult, reader: jspb.BinaryReader): GetInstalledChaincodePackageResult;
}

export namespace GetInstalledChaincodePackageResult {
  export type AsObject = {
    chaincodeInstallPackage: Uint8Array | string,
  }
}

export class QueryInstalledChaincodesArgs extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryInstalledChaincodesArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QueryInstalledChaincodesArgs): QueryInstalledChaincodesArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryInstalledChaincodesArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryInstalledChaincodesArgs;
  static deserializeBinaryFromReader(message: QueryInstalledChaincodesArgs, reader: jspb.BinaryReader): QueryInstalledChaincodesArgs;
}

export namespace QueryInstalledChaincodesArgs {
  export type AsObject = {
  }
}

export class QueryInstalledChaincodesResult extends jspb.Message {
  clearInstalledChaincodesList(): void;
  getInstalledChaincodesList(): Array<QueryInstalledChaincodesResult.InstalledChaincode>;
  setInstalledChaincodesList(value: Array<QueryInstalledChaincodesResult.InstalledChaincode>): void;
  addInstalledChaincodes(value?: QueryInstalledChaincodesResult.InstalledChaincode, index?: number): QueryInstalledChaincodesResult.InstalledChaincode;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryInstalledChaincodesResult.AsObject;
  static toObject(includeInstance: boolean, msg: QueryInstalledChaincodesResult): QueryInstalledChaincodesResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryInstalledChaincodesResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryInstalledChaincodesResult;
  static deserializeBinaryFromReader(message: QueryInstalledChaincodesResult, reader: jspb.BinaryReader): QueryInstalledChaincodesResult;
}

export namespace QueryInstalledChaincodesResult {
  export type AsObject = {
    installedChaincodesList: Array<QueryInstalledChaincodesResult.InstalledChaincode.AsObject>,
  }

  export class InstalledChaincode extends jspb.Message {
    getPackageId(): string;
    setPackageId(value: string): void;

    getLabel(): string;
    setLabel(value: string): void;

    getReferencesMap(): jspb.Map<string, QueryInstalledChaincodesResult.References>;
    clearReferencesMap(): void;
    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): InstalledChaincode.AsObject;
    static toObject(includeInstance: boolean, msg: InstalledChaincode): InstalledChaincode.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: InstalledChaincode, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): InstalledChaincode;
    static deserializeBinaryFromReader(message: InstalledChaincode, reader: jspb.BinaryReader): InstalledChaincode;
  }

  export namespace InstalledChaincode {
    export type AsObject = {
      packageId: string,
      label: string,
      referencesMap: Array<[string, QueryInstalledChaincodesResult.References.AsObject]>,
    }
  }

  export class References extends jspb.Message {
    clearChaincodesList(): void;
    getChaincodesList(): Array<QueryInstalledChaincodesResult.Chaincode>;
    setChaincodesList(value: Array<QueryInstalledChaincodesResult.Chaincode>): void;
    addChaincodes(value?: QueryInstalledChaincodesResult.Chaincode, index?: number): QueryInstalledChaincodesResult.Chaincode;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): References.AsObject;
    static toObject(includeInstance: boolean, msg: References): References.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: References, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): References;
    static deserializeBinaryFromReader(message: References, reader: jspb.BinaryReader): References;
  }

  export namespace References {
    export type AsObject = {
      chaincodesList: Array<QueryInstalledChaincodesResult.Chaincode.AsObject>,
    }
  }

  export class Chaincode extends jspb.Message {
    getName(): string;
    setName(value: string): void;

    getVersion(): string;
    setVersion(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Chaincode.AsObject;
    static toObject(includeInstance: boolean, msg: Chaincode): Chaincode.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Chaincode, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Chaincode;
    static deserializeBinaryFromReader(message: Chaincode, reader: jspb.BinaryReader): Chaincode;
  }

  export namespace Chaincode {
    export type AsObject = {
      name: string,
      version: string,
    }
  }
}

export class ApproveChaincodeDefinitionForMyOrgArgs extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getName(): string;
  setName(value: string): void;

  getVersion(): string;
  setVersion(value: string): void;

  getEndorsementPlugin(): string;
  setEndorsementPlugin(value: string): void;

  getValidationPlugin(): string;
  setValidationPlugin(value: string): void;

  getValidationParameter(): Uint8Array | string;
  getValidationParameter_asU8(): Uint8Array;
  getValidationParameter_asB64(): string;
  setValidationParameter(value: Uint8Array | string): void;

  hasCollections(): boolean;
  clearCollections(): void;
  getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
  setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

  getInitRequired(): boolean;
  setInitRequired(value: boolean): void;

  hasSource(): boolean;
  clearSource(): void;
  getSource(): ChaincodeSource | undefined;
  setSource(value?: ChaincodeSource): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveChaincodeDefinitionForMyOrgArgs.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveChaincodeDefinitionForMyOrgArgs): ApproveChaincodeDefinitionForMyOrgArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ApproveChaincodeDefinitionForMyOrgArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveChaincodeDefinitionForMyOrgArgs;
  static deserializeBinaryFromReader(message: ApproveChaincodeDefinitionForMyOrgArgs, reader: jspb.BinaryReader): ApproveChaincodeDefinitionForMyOrgArgs;
}

export namespace ApproveChaincodeDefinitionForMyOrgArgs {
  export type AsObject = {
    sequence: number,
    name: string,
    version: string,
    endorsementPlugin: string,
    validationPlugin: string,
    validationParameter: Uint8Array | string,
    collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
    initRequired: boolean,
    source?: ChaincodeSource.AsObject,
  }
}

export class ChaincodeSource extends jspb.Message {
  hasUnavailable(): boolean;
  clearUnavailable(): void;
  getUnavailable(): ChaincodeSource.Unavailable | undefined;
  setUnavailable(value?: ChaincodeSource.Unavailable): void;

  hasLocalPackage(): boolean;
  clearLocalPackage(): void;
  getLocalPackage(): ChaincodeSource.Local | undefined;
  setLocalPackage(value?: ChaincodeSource.Local): void;

  getTypeCase(): ChaincodeSource.TypeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChaincodeSource.AsObject;
  static toObject(includeInstance: boolean, msg: ChaincodeSource): ChaincodeSource.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChaincodeSource, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChaincodeSource;
  static deserializeBinaryFromReader(message: ChaincodeSource, reader: jspb.BinaryReader): ChaincodeSource;
}

export namespace ChaincodeSource {
  export type AsObject = {
    unavailable?: ChaincodeSource.Unavailable.AsObject,
    localPackage?: ChaincodeSource.Local.AsObject,
  }

  export class Unavailable extends jspb.Message {
    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Unavailable.AsObject;
    static toObject(includeInstance: boolean, msg: Unavailable): Unavailable.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Unavailable, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Unavailable;
    static deserializeBinaryFromReader(message: Unavailable, reader: jspb.BinaryReader): Unavailable;
  }

  export namespace Unavailable {
    export type AsObject = {
    }
  }

  export class Local extends jspb.Message {
    getPackageId(): string;
    setPackageId(value: string): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): Local.AsObject;
    static toObject(includeInstance: boolean, msg: Local): Local.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: Local, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): Local;
    static deserializeBinaryFromReader(message: Local, reader: jspb.BinaryReader): Local;
  }

  export namespace Local {
    export type AsObject = {
      packageId: string,
    }
  }

  export enum TypeCase {
    TYPE_NOT_SET = 0,
    UNAVAILABLE = 1,
    LOCAL_PACKAGE = 2,
  }
}

export class ApproveChaincodeDefinitionForMyOrgResult extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApproveChaincodeDefinitionForMyOrgResult.AsObject;
  static toObject(includeInstance: boolean, msg: ApproveChaincodeDefinitionForMyOrgResult): ApproveChaincodeDefinitionForMyOrgResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ApproveChaincodeDefinitionForMyOrgResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApproveChaincodeDefinitionForMyOrgResult;
  static deserializeBinaryFromReader(message: ApproveChaincodeDefinitionForMyOrgResult, reader: jspb.BinaryReader): ApproveChaincodeDefinitionForMyOrgResult;
}

export namespace ApproveChaincodeDefinitionForMyOrgResult {
  export type AsObject = {
  }
}

export class CommitChaincodeDefinitionArgs extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getName(): string;
  setName(value: string): void;

  getVersion(): string;
  setVersion(value: string): void;

  getEndorsementPlugin(): string;
  setEndorsementPlugin(value: string): void;

  getValidationPlugin(): string;
  setValidationPlugin(value: string): void;

  getValidationParameter(): Uint8Array | string;
  getValidationParameter_asU8(): Uint8Array;
  getValidationParameter_asB64(): string;
  setValidationParameter(value: Uint8Array | string): void;

  hasCollections(): boolean;
  clearCollections(): void;
  getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
  setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

  getInitRequired(): boolean;
  setInitRequired(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CommitChaincodeDefinitionArgs.AsObject;
  static toObject(includeInstance: boolean, msg: CommitChaincodeDefinitionArgs): CommitChaincodeDefinitionArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CommitChaincodeDefinitionArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CommitChaincodeDefinitionArgs;
  static deserializeBinaryFromReader(message: CommitChaincodeDefinitionArgs, reader: jspb.BinaryReader): CommitChaincodeDefinitionArgs;
}

export namespace CommitChaincodeDefinitionArgs {
  export type AsObject = {
    sequence: number,
    name: string,
    version: string,
    endorsementPlugin: string,
    validationPlugin: string,
    validationParameter: Uint8Array | string,
    collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
    initRequired: boolean,
  }
}

export class CommitChaincodeDefinitionResult extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CommitChaincodeDefinitionResult.AsObject;
  static toObject(includeInstance: boolean, msg: CommitChaincodeDefinitionResult): CommitChaincodeDefinitionResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CommitChaincodeDefinitionResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CommitChaincodeDefinitionResult;
  static deserializeBinaryFromReader(message: CommitChaincodeDefinitionResult, reader: jspb.BinaryReader): CommitChaincodeDefinitionResult;
}

export namespace CommitChaincodeDefinitionResult {
  export type AsObject = {
  }
}

export class CheckCommitReadinessArgs extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getName(): string;
  setName(value: string): void;

  getVersion(): string;
  setVersion(value: string): void;

  getEndorsementPlugin(): string;
  setEndorsementPlugin(value: string): void;

  getValidationPlugin(): string;
  setValidationPlugin(value: string): void;

  getValidationParameter(): Uint8Array | string;
  getValidationParameter_asU8(): Uint8Array;
  getValidationParameter_asB64(): string;
  setValidationParameter(value: Uint8Array | string): void;

  hasCollections(): boolean;
  clearCollections(): void;
  getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
  setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

  getInitRequired(): boolean;
  setInitRequired(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CheckCommitReadinessArgs.AsObject;
  static toObject(includeInstance: boolean, msg: CheckCommitReadinessArgs): CheckCommitReadinessArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CheckCommitReadinessArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CheckCommitReadinessArgs;
  static deserializeBinaryFromReader(message: CheckCommitReadinessArgs, reader: jspb.BinaryReader): CheckCommitReadinessArgs;
}

export namespace CheckCommitReadinessArgs {
  export type AsObject = {
    sequence: number,
    name: string,
    version: string,
    endorsementPlugin: string,
    validationPlugin: string,
    validationParameter: Uint8Array | string,
    collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
    initRequired: boolean,
  }
}

export class CheckCommitReadinessResult extends jspb.Message {
  getApprovalsMap(): jspb.Map<string, boolean>;
  clearApprovalsMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CheckCommitReadinessResult.AsObject;
  static toObject(includeInstance: boolean, msg: CheckCommitReadinessResult): CheckCommitReadinessResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CheckCommitReadinessResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CheckCommitReadinessResult;
  static deserializeBinaryFromReader(message: CheckCommitReadinessResult, reader: jspb.BinaryReader): CheckCommitReadinessResult;
}

export namespace CheckCommitReadinessResult {
  export type AsObject = {
    approvalsMap: Array<[string, boolean]>,
  }
}

export class QueryApprovedChaincodeDefinitionArgs extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getSequence(): number;
  setSequence(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryApprovedChaincodeDefinitionArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QueryApprovedChaincodeDefinitionArgs): QueryApprovedChaincodeDefinitionArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryApprovedChaincodeDefinitionArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryApprovedChaincodeDefinitionArgs;
  static deserializeBinaryFromReader(message: QueryApprovedChaincodeDefinitionArgs, reader: jspb.BinaryReader): QueryApprovedChaincodeDefinitionArgs;
}

export namespace QueryApprovedChaincodeDefinitionArgs {
  export type AsObject = {
    name: string,
    sequence: number,
  }
}

export class QueryApprovedChaincodeDefinitionResult extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getVersion(): string;
  setVersion(value: string): void;

  getEndorsementPlugin(): string;
  setEndorsementPlugin(value: string): void;

  getValidationPlugin(): string;
  setValidationPlugin(value: string): void;

  getValidationParameter(): Uint8Array | string;
  getValidationParameter_asU8(): Uint8Array;
  getValidationParameter_asB64(): string;
  setValidationParameter(value: Uint8Array | string): void;

  hasCollections(): boolean;
  clearCollections(): void;
  getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
  setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

  getInitRequired(): boolean;
  setInitRequired(value: boolean): void;

  hasSource(): boolean;
  clearSource(): void;
  getSource(): ChaincodeSource | undefined;
  setSource(value?: ChaincodeSource): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryApprovedChaincodeDefinitionResult.AsObject;
  static toObject(includeInstance: boolean, msg: QueryApprovedChaincodeDefinitionResult): QueryApprovedChaincodeDefinitionResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryApprovedChaincodeDefinitionResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryApprovedChaincodeDefinitionResult;
  static deserializeBinaryFromReader(message: QueryApprovedChaincodeDefinitionResult, reader: jspb.BinaryReader): QueryApprovedChaincodeDefinitionResult;
}

export namespace QueryApprovedChaincodeDefinitionResult {
  export type AsObject = {
    sequence: number,
    version: string,
    endorsementPlugin: string,
    validationPlugin: string,
    validationParameter: Uint8Array | string,
    collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
    initRequired: boolean,
    source?: ChaincodeSource.AsObject,
  }
}

export class QueryChaincodeDefinitionArgs extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryChaincodeDefinitionArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QueryChaincodeDefinitionArgs): QueryChaincodeDefinitionArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryChaincodeDefinitionArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryChaincodeDefinitionArgs;
  static deserializeBinaryFromReader(message: QueryChaincodeDefinitionArgs, reader: jspb.BinaryReader): QueryChaincodeDefinitionArgs;
}

export namespace QueryChaincodeDefinitionArgs {
  export type AsObject = {
    name: string,
  }
}

export class QueryChaincodeDefinitionResult extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getVersion(): string;
  setVersion(value: string): void;

  getEndorsementPlugin(): string;
  setEndorsementPlugin(value: string): void;

  getValidationPlugin(): string;
  setValidationPlugin(value: string): void;

  getValidationParameter(): Uint8Array | string;
  getValidationParameter_asU8(): Uint8Array;
  getValidationParameter_asB64(): string;
  setValidationParameter(value: Uint8Array | string): void;

  hasCollections(): boolean;
  clearCollections(): void;
  getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
  setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

  getInitRequired(): boolean;
  setInitRequired(value: boolean): void;

  getApprovalsMap(): jspb.Map<string, boolean>;
  clearApprovalsMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryChaincodeDefinitionResult.AsObject;
  static toObject(includeInstance: boolean, msg: QueryChaincodeDefinitionResult): QueryChaincodeDefinitionResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryChaincodeDefinitionResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryChaincodeDefinitionResult;
  static deserializeBinaryFromReader(message: QueryChaincodeDefinitionResult, reader: jspb.BinaryReader): QueryChaincodeDefinitionResult;
}

export namespace QueryChaincodeDefinitionResult {
  export type AsObject = {
    sequence: number,
    version: string,
    endorsementPlugin: string,
    validationPlugin: string,
    validationParameter: Uint8Array | string,
    collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
    initRequired: boolean,
    approvalsMap: Array<[string, boolean]>,
  }
}

export class QueryChaincodeDefinitionsArgs extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryChaincodeDefinitionsArgs.AsObject;
  static toObject(includeInstance: boolean, msg: QueryChaincodeDefinitionsArgs): QueryChaincodeDefinitionsArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryChaincodeDefinitionsArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryChaincodeDefinitionsArgs;
  static deserializeBinaryFromReader(message: QueryChaincodeDefinitionsArgs, reader: jspb.BinaryReader): QueryChaincodeDefinitionsArgs;
}

export namespace QueryChaincodeDefinitionsArgs {
  export type AsObject = {
  }
}

export class QueryChaincodeDefinitionsResult extends jspb.Message {
  clearChaincodeDefinitionsList(): void;
  getChaincodeDefinitionsList(): Array<QueryChaincodeDefinitionsResult.ChaincodeDefinition>;
  setChaincodeDefinitionsList(value: Array<QueryChaincodeDefinitionsResult.ChaincodeDefinition>): void;
  addChaincodeDefinitions(value?: QueryChaincodeDefinitionsResult.ChaincodeDefinition, index?: number): QueryChaincodeDefinitionsResult.ChaincodeDefinition;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryChaincodeDefinitionsResult.AsObject;
  static toObject(includeInstance: boolean, msg: QueryChaincodeDefinitionsResult): QueryChaincodeDefinitionsResult.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryChaincodeDefinitionsResult, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryChaincodeDefinitionsResult;
  static deserializeBinaryFromReader(message: QueryChaincodeDefinitionsResult, reader: jspb.BinaryReader): QueryChaincodeDefinitionsResult;
}

export namespace QueryChaincodeDefinitionsResult {
  export type AsObject = {
    chaincodeDefinitionsList: Array<QueryChaincodeDefinitionsResult.ChaincodeDefinition.AsObject>,
  }

  export class ChaincodeDefinition extends jspb.Message {
    getName(): string;
    setName(value: string): void;

    getSequence(): number;
    setSequence(value: number): void;

    getVersion(): string;
    setVersion(value: string): void;

    getEndorsementPlugin(): string;
    setEndorsementPlugin(value: string): void;

    getValidationPlugin(): string;
    setValidationPlugin(value: string): void;

    getValidationParameter(): Uint8Array | string;
    getValidationParameter_asU8(): Uint8Array;
    getValidationParameter_asB64(): string;
    setValidationParameter(value: Uint8Array | string): void;

    hasCollections(): boolean;
    clearCollections(): void;
    getCollections(): peer_collection_pb.CollectionConfigPackage | undefined;
    setCollections(value?: peer_collection_pb.CollectionConfigPackage): void;

    getInitRequired(): boolean;
    setInitRequired(value: boolean): void;

    serializeBinary(): Uint8Array;
    toObject(includeInstance?: boolean): ChaincodeDefinition.AsObject;
    static toObject(includeInstance: boolean, msg: ChaincodeDefinition): ChaincodeDefinition.AsObject;
    static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
    static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
    static serializeBinaryToWriter(message: ChaincodeDefinition, writer: jspb.BinaryWriter): void;
    static deserializeBinary(bytes: Uint8Array): ChaincodeDefinition;
    static deserializeBinaryFromReader(message: ChaincodeDefinition, reader: jspb.BinaryReader): ChaincodeDefinition;
  }

  export namespace ChaincodeDefinition {
    export type AsObject = {
      name: string,
      sequence: number,
      version: string,
      endorsementPlugin: string,
      validationPlugin: string,
      validationParameter: Uint8Array | string,
      collections?: peer_collection_pb.CollectionConfigPackage.AsObject,
      initRequired: boolean,
    }
  }
}

