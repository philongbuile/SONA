// package: protos
// file: peer/resources.proto

import * as jspb from "google-protobuf";
import * as common_configtx_pb from "../common/configtx_pb";

export class ChaincodeIdentifier extends jspb.Message {
  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;

  getVersion(): string;
  setVersion(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChaincodeIdentifier.AsObject;
  static toObject(includeInstance: boolean, msg: ChaincodeIdentifier): ChaincodeIdentifier.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChaincodeIdentifier, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChaincodeIdentifier;
  static deserializeBinaryFromReader(message: ChaincodeIdentifier, reader: jspb.BinaryReader): ChaincodeIdentifier;
}

export namespace ChaincodeIdentifier {
  export type AsObject = {
    hash: Uint8Array | string,
    version: string,
  }
}

export class ChaincodeValidation extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  getArgument(): Uint8Array | string;
  getArgument_asU8(): Uint8Array;
  getArgument_asB64(): string;
  setArgument(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChaincodeValidation.AsObject;
  static toObject(includeInstance: boolean, msg: ChaincodeValidation): ChaincodeValidation.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChaincodeValidation, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChaincodeValidation;
  static deserializeBinaryFromReader(message: ChaincodeValidation, reader: jspb.BinaryReader): ChaincodeValidation;
}

export namespace ChaincodeValidation {
  export type AsObject = {
    name: string,
    argument: Uint8Array | string,
  }
}

export class VSCCArgs extends jspb.Message {
  getEndorsementPolicyRef(): string;
  setEndorsementPolicyRef(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VSCCArgs.AsObject;
  static toObject(includeInstance: boolean, msg: VSCCArgs): VSCCArgs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: VSCCArgs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VSCCArgs;
  static deserializeBinaryFromReader(message: VSCCArgs, reader: jspb.BinaryReader): VSCCArgs;
}

export namespace VSCCArgs {
  export type AsObject = {
    endorsementPolicyRef: string,
  }
}

export class ChaincodeEndorsement extends jspb.Message {
  getName(): string;
  setName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChaincodeEndorsement.AsObject;
  static toObject(includeInstance: boolean, msg: ChaincodeEndorsement): ChaincodeEndorsement.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChaincodeEndorsement, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChaincodeEndorsement;
  static deserializeBinaryFromReader(message: ChaincodeEndorsement, reader: jspb.BinaryReader): ChaincodeEndorsement;
}

export namespace ChaincodeEndorsement {
  export type AsObject = {
    name: string,
  }
}

export class ConfigTree extends jspb.Message {
  hasChannelConfig(): boolean;
  clearChannelConfig(): void;
  getChannelConfig(): common_configtx_pb.Config | undefined;
  setChannelConfig(value?: common_configtx_pb.Config): void;

  hasResourcesConfig(): boolean;
  clearResourcesConfig(): void;
  getResourcesConfig(): common_configtx_pb.Config | undefined;
  setResourcesConfig(value?: common_configtx_pb.Config): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfigTree.AsObject;
  static toObject(includeInstance: boolean, msg: ConfigTree): ConfigTree.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConfigTree, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfigTree;
  static deserializeBinaryFromReader(message: ConfigTree, reader: jspb.BinaryReader): ConfigTree;
}

export namespace ConfigTree {
  export type AsObject = {
    channelConfig?: common_configtx_pb.Config.AsObject,
    resourcesConfig?: common_configtx_pb.Config.AsObject,
  }
}

