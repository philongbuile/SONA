// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
'use strict';
var grpc = require('@grpc/grpc-js');
var peer_chaincode_shim_pb = require('../peer/chaincode_shim_pb.js');
var peer_chaincode_event_pb = require('../peer/chaincode_event_pb.js');
var peer_proposal_pb = require('../peer/proposal_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');

function serialize_protos_ChaincodeMessage(arg) {
  if (!(arg instanceof peer_chaincode_shim_pb.ChaincodeMessage)) {
    throw new Error('Expected argument of type protos.ChaincodeMessage');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_protos_ChaincodeMessage(buffer_arg) {
  return peer_chaincode_shim_pb.ChaincodeMessage.deserializeBinary(new Uint8Array(buffer_arg));
}


// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
var ChaincodeSupportService = exports.ChaincodeSupportService = {
  register: {
    path: '/protos.ChaincodeSupport/Register',
    requestStream: true,
    responseStream: true,
    requestType: peer_chaincode_shim_pb.ChaincodeMessage,
    responseType: peer_chaincode_shim_pb.ChaincodeMessage,
    requestSerialize: serialize_protos_ChaincodeMessage,
    requestDeserialize: deserialize_protos_ChaincodeMessage,
    responseSerialize: serialize_protos_ChaincodeMessage,
    responseDeserialize: deserialize_protos_ChaincodeMessage,
  },
};

exports.ChaincodeSupportClient = grpc.makeGenericClientConstructor(ChaincodeSupportService);
// Chaincode as a server - peer establishes a connection to the chaincode as a client
// Currently only supports a stream connection.
var ChaincodeService = exports.ChaincodeService = {
  connect: {
    path: '/protos.Chaincode/Connect',
    requestStream: true,
    responseStream: true,
    requestType: peer_chaincode_shim_pb.ChaincodeMessage,
    responseType: peer_chaincode_shim_pb.ChaincodeMessage,
    requestSerialize: serialize_protos_ChaincodeMessage,
    requestDeserialize: deserialize_protos_ChaincodeMessage,
    responseSerialize: serialize_protos_ChaincodeMessage,
    responseDeserialize: deserialize_protos_ChaincodeMessage,
  },
};

exports.ChaincodeClient = grpc.makeGenericClientConstructor(ChaincodeService);
