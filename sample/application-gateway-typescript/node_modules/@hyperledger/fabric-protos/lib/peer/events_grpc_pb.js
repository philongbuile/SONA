// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
'use strict';
var grpc = require('@grpc/grpc-js');
var peer_events_pb = require('../peer/events_pb.js');
var common_common_pb = require('../common/common_pb.js');
var ledger_rwset_rwset_pb = require('../ledger/rwset/rwset_pb.js');
var peer_chaincode_event_pb = require('../peer/chaincode_event_pb.js');
var peer_transaction_pb = require('../peer/transaction_pb.js');

function serialize_common_Envelope(arg) {
  if (!(arg instanceof common_common_pb.Envelope)) {
    throw new Error('Expected argument of type common.Envelope');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_common_Envelope(buffer_arg) {
  return common_common_pb.Envelope.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_protos_DeliverResponse(arg) {
  if (!(arg instanceof peer_events_pb.DeliverResponse)) {
    throw new Error('Expected argument of type protos.DeliverResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_protos_DeliverResponse(buffer_arg) {
  return peer_events_pb.DeliverResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var DeliverService = exports.DeliverService = {
  // Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
// Payload data as a marshaled orderer.SeekInfo message,
// then a stream of block replies is received
deliver: {
    path: '/protos.Deliver/Deliver',
    requestStream: true,
    responseStream: true,
    requestType: common_common_pb.Envelope,
    responseType: peer_events_pb.DeliverResponse,
    requestSerialize: serialize_common_Envelope,
    requestDeserialize: deserialize_common_Envelope,
    responseSerialize: serialize_protos_DeliverResponse,
    responseDeserialize: deserialize_protos_DeliverResponse,
  },
  // DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
// Payload data as a marshaled orderer.SeekInfo message,
// then a stream of **filtered** block replies is received
deliverFiltered: {
    path: '/protos.Deliver/DeliverFiltered',
    requestStream: true,
    responseStream: true,
    requestType: common_common_pb.Envelope,
    responseType: peer_events_pb.DeliverResponse,
    requestSerialize: serialize_common_Envelope,
    requestDeserialize: deserialize_common_Envelope,
    responseSerialize: serialize_protos_DeliverResponse,
    responseDeserialize: deserialize_protos_DeliverResponse,
  },
  // DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
// Payload data as a marshaled orderer.SeekInfo message,
// then a stream of block and private data replies is received
deliverWithPrivateData: {
    path: '/protos.Deliver/DeliverWithPrivateData',
    requestStream: true,
    responseStream: true,
    requestType: common_common_pb.Envelope,
    responseType: peer_events_pb.DeliverResponse,
    requestSerialize: serialize_common_Envelope,
    requestDeserialize: deserialize_common_Envelope,
    responseSerialize: serialize_protos_DeliverResponse,
    responseDeserialize: deserialize_protos_DeliverResponse,
  },
};

exports.DeliverClient = grpc.makeGenericClientConstructor(DeliverService);
