// source: peer/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
var ledger_rwset_rwset_pb = require('../ledger/rwset/rwset_pb.js');
goog.object.extend(proto, ledger_rwset_rwset_pb);
var peer_chaincode_event_pb = require('../peer/chaincode_event_pb.js');
goog.object.extend(proto, peer_chaincode_event_pb);
var peer_transaction_pb = require('../peer/transaction_pb.js');
goog.object.extend(proto, peer_transaction_pb);
goog.exportSymbol('proto.protos.BlockAndPrivateData', null, global);
goog.exportSymbol('proto.protos.DeliverResponse', null, global);
goog.exportSymbol('proto.protos.DeliverResponse.TypeCase', null, global);
goog.exportSymbol('proto.protos.FilteredBlock', null, global);
goog.exportSymbol('proto.protos.FilteredChaincodeAction', null, global);
goog.exportSymbol('proto.protos.FilteredTransaction', null, global);
goog.exportSymbol('proto.protos.FilteredTransaction.DataCase', null, global);
goog.exportSymbol('proto.protos.FilteredTransactionActions', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.FilteredBlock.repeatedFields_, null);
};
goog.inherits(proto.protos.FilteredBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.FilteredBlock.displayName = 'proto.protos.FilteredBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.FilteredTransaction.oneofGroups_);
};
goog.inherits(proto.protos.FilteredTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.FilteredTransaction.displayName = 'proto.protos.FilteredTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredTransactionActions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protos.FilteredTransactionActions.repeatedFields_, null);
};
goog.inherits(proto.protos.FilteredTransactionActions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.FilteredTransactionActions.displayName = 'proto.protos.FilteredTransactionActions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.FilteredChaincodeAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.FilteredChaincodeAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.FilteredChaincodeAction.displayName = 'proto.protos.FilteredChaincodeAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.BlockAndPrivateData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protos.BlockAndPrivateData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.BlockAndPrivateData.displayName = 'proto.protos.BlockAndPrivateData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protos.DeliverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protos.DeliverResponse.oneofGroups_);
};
goog.inherits(proto.protos.DeliverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protos.DeliverResponse.displayName = 'proto.protos.DeliverResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.FilteredBlock.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    number: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filteredTransactionsList: jspb.Message.toObjectList(msg.getFilteredTransactionsList(),
    proto.protos.FilteredTransaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredBlock}
 */
proto.protos.FilteredBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredBlock;
  return proto.protos.FilteredBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredBlock}
 */
proto.protos.FilteredBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    case 4:
      var value = new proto.protos.FilteredTransaction;
      reader.readMessage(value,proto.protos.FilteredTransaction.deserializeBinaryFromReader);
      msg.addFilteredTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFilteredTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.protos.FilteredTransaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.protos.FilteredBlock.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.FilteredBlock} returns this
 */
proto.protos.FilteredBlock.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 number = 2;
 * @return {number}
 */
proto.protos.FilteredBlock.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protos.FilteredBlock} returns this
 */
proto.protos.FilteredBlock.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated FilteredTransaction filtered_transactions = 4;
 * @return {!Array<!proto.protos.FilteredTransaction>}
 */
proto.protos.FilteredBlock.prototype.getFilteredTransactionsList = function() {
  return /** @type{!Array<!proto.protos.FilteredTransaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.FilteredTransaction, 4));
};


/**
 * @param {!Array<!proto.protos.FilteredTransaction>} value
 * @return {!proto.protos.FilteredBlock} returns this
*/
proto.protos.FilteredBlock.prototype.setFilteredTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.protos.FilteredTransaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredBlock.prototype.addFilteredTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.protos.FilteredTransaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.FilteredBlock} returns this
 */
proto.protos.FilteredBlock.prototype.clearFilteredTransactionsList = function() {
  return this.setFilteredTransactionsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.FilteredTransaction.oneofGroups_ = [[4]];

/**
 * @enum {number}
 */
proto.protos.FilteredTransaction.DataCase = {
  DATA_NOT_SET: 0,
  TRANSACTION_ACTIONS: 4
};

/**
 * @return {proto.protos.FilteredTransaction.DataCase}
 */
proto.protos.FilteredTransaction.prototype.getDataCase = function() {
  return /** @type {proto.protos.FilteredTransaction.DataCase} */(jspb.Message.computeOneofCase(this, proto.protos.FilteredTransaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    txid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    txValidationCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    transactionActions: (f = msg.getTransactionActions()) && proto.protos.FilteredTransactionActions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredTransaction;
  return proto.protos.FilteredTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredTransaction}
 */
proto.protos.FilteredTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxid(value);
      break;
    case 2:
      var value = /** @type {!proto.common.HeaderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {!proto.protos.TxValidationCode} */ (reader.readEnum());
      msg.setTxValidationCode(value);
      break;
    case 4:
      var value = new proto.protos.FilteredTransactionActions;
      reader.readMessage(value,proto.protos.FilteredTransactionActions.deserializeBinaryFromReader);
      msg.setTransactionActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTxValidationCode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTransactionActions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protos.FilteredTransactionActions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string txid = 1;
 * @return {string}
 */
proto.protos.FilteredTransaction.prototype.getTxid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protos.FilteredTransaction} returns this
 */
proto.protos.FilteredTransaction.prototype.setTxid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.HeaderType type = 2;
 * @return {!proto.common.HeaderType}
 */
proto.protos.FilteredTransaction.prototype.getType = function() {
  return /** @type {!proto.common.HeaderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.common.HeaderType} value
 * @return {!proto.protos.FilteredTransaction} returns this
 */
proto.protos.FilteredTransaction.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TxValidationCode tx_validation_code = 3;
 * @return {!proto.protos.TxValidationCode}
 */
proto.protos.FilteredTransaction.prototype.getTxValidationCode = function() {
  return /** @type {!proto.protos.TxValidationCode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.protos.TxValidationCode} value
 * @return {!proto.protos.FilteredTransaction} returns this
 */
proto.protos.FilteredTransaction.prototype.setTxValidationCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional FilteredTransactionActions transaction_actions = 4;
 * @return {?proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransaction.prototype.getTransactionActions = function() {
  return /** @type{?proto.protos.FilteredTransactionActions} */ (
    jspb.Message.getWrapperField(this, proto.protos.FilteredTransactionActions, 4));
};


/**
 * @param {?proto.protos.FilteredTransactionActions|undefined} value
 * @return {!proto.protos.FilteredTransaction} returns this
*/
proto.protos.FilteredTransaction.prototype.setTransactionActions = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.protos.FilteredTransaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.FilteredTransaction} returns this
 */
proto.protos.FilteredTransaction.prototype.clearTransactionActions = function() {
  return this.setTransactionActions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.FilteredTransaction.prototype.hasTransactionActions = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protos.FilteredTransactionActions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredTransactionActions.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredTransactionActions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredTransactionActions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransactionActions.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeActionsList: jspb.Message.toObjectList(msg.getChaincodeActionsList(),
    proto.protos.FilteredChaincodeAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransactionActions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredTransactionActions;
  return proto.protos.FilteredTransactionActions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredTransactionActions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredTransactionActions}
 */
proto.protos.FilteredTransactionActions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protos.FilteredChaincodeAction;
      reader.readMessage(value,proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader);
      msg.addChaincodeActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredTransactionActions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredTransactionActions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredTransactionActions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredTransactionActions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protos.FilteredChaincodeAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated FilteredChaincodeAction chaincode_actions = 1;
 * @return {!Array<!proto.protos.FilteredChaincodeAction>}
 */
proto.protos.FilteredTransactionActions.prototype.getChaincodeActionsList = function() {
  return /** @type{!Array<!proto.protos.FilteredChaincodeAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protos.FilteredChaincodeAction, 1));
};


/**
 * @param {!Array<!proto.protos.FilteredChaincodeAction>} value
 * @return {!proto.protos.FilteredTransactionActions} returns this
*/
proto.protos.FilteredTransactionActions.prototype.setChaincodeActionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.FilteredChaincodeAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredTransactionActions.prototype.addChaincodeActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.FilteredChaincodeAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protos.FilteredTransactionActions} returns this
 */
proto.protos.FilteredTransactionActions.prototype.clearChaincodeActionsList = function() {
  return this.setChaincodeActionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.FilteredChaincodeAction.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.FilteredChaincodeAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.FilteredChaincodeAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredChaincodeAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincodeEvent: (f = msg.getChaincodeEvent()) && peer_chaincode_event_pb.ChaincodeEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredChaincodeAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.FilteredChaincodeAction;
  return proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.FilteredChaincodeAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.FilteredChaincodeAction}
 */
proto.protos.FilteredChaincodeAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new peer_chaincode_event_pb.ChaincodeEvent;
      reader.readMessage(value,peer_chaincode_event_pb.ChaincodeEvent.deserializeBinaryFromReader);
      msg.setChaincodeEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.FilteredChaincodeAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.FilteredChaincodeAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.FilteredChaincodeAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.FilteredChaincodeAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincodeEvent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      peer_chaincode_event_pb.ChaincodeEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChaincodeEvent chaincode_event = 1;
 * @return {?proto.protos.ChaincodeEvent}
 */
proto.protos.FilteredChaincodeAction.prototype.getChaincodeEvent = function() {
  return /** @type{?proto.protos.ChaincodeEvent} */ (
    jspb.Message.getWrapperField(this, peer_chaincode_event_pb.ChaincodeEvent, 1));
};


/**
 * @param {?proto.protos.ChaincodeEvent|undefined} value
 * @return {!proto.protos.FilteredChaincodeAction} returns this
*/
proto.protos.FilteredChaincodeAction.prototype.setChaincodeEvent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.FilteredChaincodeAction} returns this
 */
proto.protos.FilteredChaincodeAction.prototype.clearChaincodeEvent = function() {
  return this.setChaincodeEvent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.FilteredChaincodeAction.prototype.hasChaincodeEvent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.BlockAndPrivateData.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.BlockAndPrivateData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.BlockAndPrivateData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.BlockAndPrivateData.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && common_common_pb.Block.toObject(includeInstance, f),
    privateDataMapMap: (f = msg.getPrivateDataMapMap()) ? f.toObject(includeInstance, proto.rwset.TxPvtReadWriteSet.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.BlockAndPrivateData}
 */
proto.protos.BlockAndPrivateData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.BlockAndPrivateData;
  return proto.protos.BlockAndPrivateData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.BlockAndPrivateData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.BlockAndPrivateData}
 */
proto.protos.BlockAndPrivateData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.Block;
      reader.readMessage(value,common_common_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = msg.getPrivateDataMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint64, jspb.BinaryReader.prototype.readMessage, proto.rwset.TxPvtReadWriteSet.deserializeBinaryFromReader, 0, new proto.rwset.TxPvtReadWriteSet());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.BlockAndPrivateData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.BlockAndPrivateData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.BlockAndPrivateData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.BlockAndPrivateData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_common_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getPrivateDataMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint64, jspb.BinaryWriter.prototype.writeMessage, proto.rwset.TxPvtReadWriteSet.serializeBinaryToWriter);
  }
};


/**
 * optional common.Block block = 1;
 * @return {?proto.common.Block}
 */
proto.protos.BlockAndPrivateData.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Block, 1));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.protos.BlockAndPrivateData} returns this
*/
proto.protos.BlockAndPrivateData.prototype.setBlock = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.BlockAndPrivateData} returns this
 */
proto.protos.BlockAndPrivateData.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.BlockAndPrivateData.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * map<uint64, rwset.TxPvtReadWriteSet> private_data_map = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.rwset.TxPvtReadWriteSet>}
 */
proto.protos.BlockAndPrivateData.prototype.getPrivateDataMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.rwset.TxPvtReadWriteSet>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.rwset.TxPvtReadWriteSet));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.protos.BlockAndPrivateData} returns this
 */
proto.protos.BlockAndPrivateData.prototype.clearPrivateDataMapMap = function() {
  this.getPrivateDataMapMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protos.DeliverResponse.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.protos.DeliverResponse.TypeCase = {
  TYPE_NOT_SET: 0,
  STATUS: 1,
  BLOCK: 2,
  FILTERED_BLOCK: 3,
  BLOCK_AND_PRIVATE_DATA: 4
};

/**
 * @return {proto.protos.DeliverResponse.TypeCase}
 */
proto.protos.DeliverResponse.prototype.getTypeCase = function() {
  return /** @type {proto.protos.DeliverResponse.TypeCase} */(jspb.Message.computeOneofCase(this, proto.protos.DeliverResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protos.DeliverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protos.DeliverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protos.DeliverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeliverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: (f = msg.getBlock()) && common_common_pb.Block.toObject(includeInstance, f),
    filteredBlock: (f = msg.getFilteredBlock()) && proto.protos.FilteredBlock.toObject(includeInstance, f),
    blockAndPrivateData: (f = msg.getBlockAndPrivateData()) && proto.protos.BlockAndPrivateData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protos.DeliverResponse}
 */
proto.protos.DeliverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protos.DeliverResponse;
  return proto.protos.DeliverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protos.DeliverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protos.DeliverResponse}
 */
proto.protos.DeliverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new common_common_pb.Block;
      reader.readMessage(value,common_common_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 3:
      var value = new proto.protos.FilteredBlock;
      reader.readMessage(value,proto.protos.FilteredBlock.deserializeBinaryFromReader);
      msg.setFilteredBlock(value);
      break;
    case 4:
      var value = new proto.protos.BlockAndPrivateData;
      reader.readMessage(value,proto.protos.BlockAndPrivateData.deserializeBinaryFromReader);
      msg.setBlockAndPrivateData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protos.DeliverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protos.DeliverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protos.DeliverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protos.DeliverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.common.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Block.serializeBinaryToWriter
    );
  }
  f = message.getFilteredBlock();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protos.FilteredBlock.serializeBinaryToWriter
    );
  }
  f = message.getBlockAndPrivateData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protos.BlockAndPrivateData.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1;
 * @return {!proto.common.Status}
 */
proto.protos.DeliverResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.Status} value
 * @return {!proto.protos.DeliverResponse} returns this
 */
proto.protos.DeliverResponse.prototype.setStatus = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protos.DeliverResponse} returns this
 */
proto.protos.DeliverResponse.prototype.clearStatus = function() {
  return jspb.Message.setOneofField(this, 1, proto.protos.DeliverResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.Block block = 2;
 * @return {?proto.common.Block}
 */
proto.protos.DeliverResponse.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Block, 2));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.protos.DeliverResponse} returns this
*/
proto.protos.DeliverResponse.prototype.setBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.DeliverResponse} returns this
 */
proto.protos.DeliverResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FilteredBlock filtered_block = 3;
 * @return {?proto.protos.FilteredBlock}
 */
proto.protos.DeliverResponse.prototype.getFilteredBlock = function() {
  return /** @type{?proto.protos.FilteredBlock} */ (
    jspb.Message.getWrapperField(this, proto.protos.FilteredBlock, 3));
};


/**
 * @param {?proto.protos.FilteredBlock|undefined} value
 * @return {!proto.protos.DeliverResponse} returns this
*/
proto.protos.DeliverResponse.prototype.setFilteredBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.DeliverResponse} returns this
 */
proto.protos.DeliverResponse.prototype.clearFilteredBlock = function() {
  return this.setFilteredBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasFilteredBlock = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BlockAndPrivateData block_and_private_data = 4;
 * @return {?proto.protos.BlockAndPrivateData}
 */
proto.protos.DeliverResponse.prototype.getBlockAndPrivateData = function() {
  return /** @type{?proto.protos.BlockAndPrivateData} */ (
    jspb.Message.getWrapperField(this, proto.protos.BlockAndPrivateData, 4));
};


/**
 * @param {?proto.protos.BlockAndPrivateData|undefined} value
 * @return {!proto.protos.DeliverResponse} returns this
*/
proto.protos.DeliverResponse.prototype.setBlockAndPrivateData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.protos.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protos.DeliverResponse} returns this
 */
proto.protos.DeliverResponse.prototype.clearBlockAndPrivateData = function() {
  return this.setBlockAndPrivateData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protos.DeliverResponse.prototype.hasBlockAndPrivateData = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.protos);
