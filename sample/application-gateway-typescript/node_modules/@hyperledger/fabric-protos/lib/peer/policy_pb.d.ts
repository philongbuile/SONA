// package: protos
// file: peer/policy.proto

import * as jspb from "google-protobuf";
import * as common_policies_pb from "../common/policies_pb";

export class ApplicationPolicy extends jspb.Message {
  hasSignaturePolicy(): boolean;
  clearSignaturePolicy(): void;
  getSignaturePolicy(): common_policies_pb.SignaturePolicyEnvelope | undefined;
  setSignaturePolicy(value?: common_policies_pb.SignaturePolicyEnvelope): void;

  hasChannelConfigPolicyReference(): boolean;
  clearChannelConfigPolicyReference(): void;
  getChannelConfigPolicyReference(): string;
  setChannelConfigPolicyReference(value: string): void;

  getTypeCase(): ApplicationPolicy.TypeCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ApplicationPolicy.AsObject;
  static toObject(includeInstance: boolean, msg: ApplicationPolicy): ApplicationPolicy.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ApplicationPolicy, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ApplicationPolicy;
  static deserializeBinaryFromReader(message: ApplicationPolicy, reader: jspb.BinaryReader): ApplicationPolicy;
}

export namespace ApplicationPolicy {
  export type AsObject = {
    signaturePolicy?: common_policies_pb.SignaturePolicyEnvelope.AsObject,
    channelConfigPolicyReference: string,
  }

  export enum TypeCase {
    TYPE_NOT_SET = 0,
    SIGNATURE_POLICY = 1,
    CHANNEL_CONFIG_POLICY_REFERENCE = 2,
  }
}

