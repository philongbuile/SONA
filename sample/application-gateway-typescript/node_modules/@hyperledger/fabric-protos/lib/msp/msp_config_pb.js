// source: msp/msp_config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.msp.FabricCryptoConfig', null, global);
goog.exportSymbol('proto.msp.FabricMSPConfig', null, global);
goog.exportSymbol('proto.msp.FabricNodeOUs', null, global);
goog.exportSymbol('proto.msp.FabricOUIdentifier', null, global);
goog.exportSymbol('proto.msp.IdemixMSPConfig', null, global);
goog.exportSymbol('proto.msp.IdemixMSPSignerConfig', null, global);
goog.exportSymbol('proto.msp.KeyInfo', null, global);
goog.exportSymbol('proto.msp.MSPConfig', null, global);
goog.exportSymbol('proto.msp.SigningIdentityInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.MSPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.MSPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.MSPConfig.displayName = 'proto.msp.MSPConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.FabricMSPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msp.FabricMSPConfig.repeatedFields_, null);
};
goog.inherits(proto.msp.FabricMSPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.FabricMSPConfig.displayName = 'proto.msp.FabricMSPConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.FabricCryptoConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.FabricCryptoConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.FabricCryptoConfig.displayName = 'proto.msp.FabricCryptoConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.IdemixMSPConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.IdemixMSPConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.IdemixMSPConfig.displayName = 'proto.msp.IdemixMSPConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.IdemixMSPSignerConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.IdemixMSPSignerConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.IdemixMSPSignerConfig.displayName = 'proto.msp.IdemixMSPSignerConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.SigningIdentityInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.SigningIdentityInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.SigningIdentityInfo.displayName = 'proto.msp.SigningIdentityInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.KeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.KeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.KeyInfo.displayName = 'proto.msp.KeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.FabricOUIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.FabricOUIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.FabricOUIdentifier.displayName = 'proto.msp.FabricOUIdentifier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msp.FabricNodeOUs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msp.FabricNodeOUs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msp.FabricNodeOUs.displayName = 'proto.msp.FabricNodeOUs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.MSPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.MSPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.MSPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.MSPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: msg.getConfig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.MSPConfig}
 */
proto.msp.MSPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.MSPConfig;
  return proto.msp.MSPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.MSPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.MSPConfig}
 */
proto.msp.MSPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.MSPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.MSPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.MSPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.MSPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.msp.MSPConfig.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.MSPConfig} returns this
 */
proto.msp.MSPConfig.prototype.setType = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes config = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msp.MSPConfig.prototype.getConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes config = 2;
 * This is a type-conversion wrapper around `getConfig()`
 * @return {string}
 */
proto.msp.MSPConfig.prototype.getConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfig()));
};


/**
 * optional bytes config = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfig()`
 * @return {!Uint8Array}
 */
proto.msp.MSPConfig.prototype.getConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.MSPConfig} returns this
 */
proto.msp.MSPConfig.prototype.setConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msp.FabricMSPConfig.repeatedFields_ = [2,3,4,5,7,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.FabricMSPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.FabricMSPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.FabricMSPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricMSPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rootCertsList: msg.getRootCertsList_asB64(),
    intermediateCertsList: msg.getIntermediateCertsList_asB64(),
    adminsList: msg.getAdminsList_asB64(),
    revocationListList: msg.getRevocationListList_asB64(),
    signingIdentity: (f = msg.getSigningIdentity()) && proto.msp.SigningIdentityInfo.toObject(includeInstance, f),
    organizationalUnitIdentifiersList: jspb.Message.toObjectList(msg.getOrganizationalUnitIdentifiersList(),
    proto.msp.FabricOUIdentifier.toObject, includeInstance),
    cryptoConfig: (f = msg.getCryptoConfig()) && proto.msp.FabricCryptoConfig.toObject(includeInstance, f),
    tlsRootCertsList: msg.getTlsRootCertsList_asB64(),
    tlsIntermediateCertsList: msg.getTlsIntermediateCertsList_asB64(),
    fabricNodeOus: (f = msg.getFabricNodeOus()) && proto.msp.FabricNodeOUs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.FabricMSPConfig}
 */
proto.msp.FabricMSPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.FabricMSPConfig;
  return proto.msp.FabricMSPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.FabricMSPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.FabricMSPConfig}
 */
proto.msp.FabricMSPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRootCerts(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addIntermediateCerts(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAdmins(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addRevocationList(value);
      break;
    case 6:
      var value = new proto.msp.SigningIdentityInfo;
      reader.readMessage(value,proto.msp.SigningIdentityInfo.deserializeBinaryFromReader);
      msg.setSigningIdentity(value);
      break;
    case 7:
      var value = new proto.msp.FabricOUIdentifier;
      reader.readMessage(value,proto.msp.FabricOUIdentifier.deserializeBinaryFromReader);
      msg.addOrganizationalUnitIdentifiers(value);
      break;
    case 8:
      var value = new proto.msp.FabricCryptoConfig;
      reader.readMessage(value,proto.msp.FabricCryptoConfig.deserializeBinaryFromReader);
      msg.setCryptoConfig(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTlsRootCerts(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addTlsIntermediateCerts(value);
      break;
    case 11:
      var value = new proto.msp.FabricNodeOUs;
      reader.readMessage(value,proto.msp.FabricNodeOUs.deserializeBinaryFromReader);
      msg.setFabricNodeOus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.FabricMSPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.FabricMSPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.FabricMSPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricMSPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRootCertsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getIntermediateCertsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getAdminsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getRevocationListList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = message.getSigningIdentity();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.msp.SigningIdentityInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrganizationalUnitIdentifiersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.msp.FabricOUIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getCryptoConfig();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msp.FabricCryptoConfig.serializeBinaryToWriter
    );
  }
  f = message.getTlsRootCertsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      9,
      f
    );
  }
  f = message.getTlsIntermediateCertsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      10,
      f
    );
  }
  f = message.getFabricNodeOus();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.msp.FabricNodeOUs.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.FabricMSPConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated bytes root_certs = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getRootCertsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes root_certs = 2;
 * This is a type-conversion wrapper around `getRootCertsList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getRootCertsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRootCertsList()));
};


/**
 * repeated bytes root_certs = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootCertsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getRootCertsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRootCertsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setRootCertsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addRootCerts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearRootCertsList = function() {
  return this.setRootCertsList([]);
};


/**
 * repeated bytes intermediate_certs = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getIntermediateCertsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes intermediate_certs = 3;
 * This is a type-conversion wrapper around `getIntermediateCertsList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getIntermediateCertsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getIntermediateCertsList()));
};


/**
 * repeated bytes intermediate_certs = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIntermediateCertsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getIntermediateCertsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getIntermediateCertsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setIntermediateCertsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addIntermediateCerts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearIntermediateCertsList = function() {
  return this.setIntermediateCertsList([]);
};


/**
 * repeated bytes admins = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getAdminsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes admins = 4;
 * This is a type-conversion wrapper around `getAdminsList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getAdminsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAdminsList()));
};


/**
 * repeated bytes admins = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdminsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getAdminsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAdminsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setAdminsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addAdmins = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearAdminsList = function() {
  return this.setAdminsList([]);
};


/**
 * repeated bytes revocation_list = 5;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getRevocationListList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * repeated bytes revocation_list = 5;
 * This is a type-conversion wrapper around `getRevocationListList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getRevocationListList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getRevocationListList()));
};


/**
 * repeated bytes revocation_list = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRevocationListList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getRevocationListList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getRevocationListList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setRevocationListList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addRevocationList = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearRevocationListList = function() {
  return this.setRevocationListList([]);
};


/**
 * optional SigningIdentityInfo signing_identity = 6;
 * @return {?proto.msp.SigningIdentityInfo}
 */
proto.msp.FabricMSPConfig.prototype.getSigningIdentity = function() {
  return /** @type{?proto.msp.SigningIdentityInfo} */ (
    jspb.Message.getWrapperField(this, proto.msp.SigningIdentityInfo, 6));
};


/**
 * @param {?proto.msp.SigningIdentityInfo|undefined} value
 * @return {!proto.msp.FabricMSPConfig} returns this
*/
proto.msp.FabricMSPConfig.prototype.setSigningIdentity = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearSigningIdentity = function() {
  return this.setSigningIdentity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricMSPConfig.prototype.hasSigningIdentity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated FabricOUIdentifier organizational_unit_identifiers = 7;
 * @return {!Array<!proto.msp.FabricOUIdentifier>}
 */
proto.msp.FabricMSPConfig.prototype.getOrganizationalUnitIdentifiersList = function() {
  return /** @type{!Array<!proto.msp.FabricOUIdentifier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msp.FabricOUIdentifier, 7));
};


/**
 * @param {!Array<!proto.msp.FabricOUIdentifier>} value
 * @return {!proto.msp.FabricMSPConfig} returns this
*/
proto.msp.FabricMSPConfig.prototype.setOrganizationalUnitIdentifiersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.msp.FabricOUIdentifier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricMSPConfig.prototype.addOrganizationalUnitIdentifiers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.msp.FabricOUIdentifier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearOrganizationalUnitIdentifiersList = function() {
  return this.setOrganizationalUnitIdentifiersList([]);
};


/**
 * optional FabricCryptoConfig crypto_config = 8;
 * @return {?proto.msp.FabricCryptoConfig}
 */
proto.msp.FabricMSPConfig.prototype.getCryptoConfig = function() {
  return /** @type{?proto.msp.FabricCryptoConfig} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricCryptoConfig, 8));
};


/**
 * @param {?proto.msp.FabricCryptoConfig|undefined} value
 * @return {!proto.msp.FabricMSPConfig} returns this
*/
proto.msp.FabricMSPConfig.prototype.setCryptoConfig = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearCryptoConfig = function() {
  return this.setCryptoConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricMSPConfig.prototype.hasCryptoConfig = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated bytes tls_root_certs = 9;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getTlsRootCertsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * repeated bytes tls_root_certs = 9;
 * This is a type-conversion wrapper around `getTlsRootCertsList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getTlsRootCertsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTlsRootCertsList()));
};


/**
 * repeated bytes tls_root_certs = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsRootCertsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getTlsRootCertsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTlsRootCertsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setTlsRootCertsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addTlsRootCerts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearTlsRootCertsList = function() {
  return this.setTlsRootCertsList([]);
};


/**
 * repeated bytes tls_intermediate_certs = 10;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.msp.FabricMSPConfig.prototype.getTlsIntermediateCertsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * repeated bytes tls_intermediate_certs = 10;
 * This is a type-conversion wrapper around `getTlsIntermediateCertsList()`
 * @return {!Array<string>}
 */
proto.msp.FabricMSPConfig.prototype.getTlsIntermediateCertsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getTlsIntermediateCertsList()));
};


/**
 * repeated bytes tls_intermediate_certs = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTlsIntermediateCertsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.msp.FabricMSPConfig.prototype.getTlsIntermediateCertsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getTlsIntermediateCertsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.setTlsIntermediateCertsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.addTlsIntermediateCerts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearTlsIntermediateCertsList = function() {
  return this.setTlsIntermediateCertsList([]);
};


/**
 * optional FabricNodeOUs fabric_node_ous = 11;
 * @return {?proto.msp.FabricNodeOUs}
 */
proto.msp.FabricMSPConfig.prototype.getFabricNodeOus = function() {
  return /** @type{?proto.msp.FabricNodeOUs} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricNodeOUs, 11));
};


/**
 * @param {?proto.msp.FabricNodeOUs|undefined} value
 * @return {!proto.msp.FabricMSPConfig} returns this
*/
proto.msp.FabricMSPConfig.prototype.setFabricNodeOus = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricMSPConfig} returns this
 */
proto.msp.FabricMSPConfig.prototype.clearFabricNodeOus = function() {
  return this.setFabricNodeOus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricMSPConfig.prototype.hasFabricNodeOus = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.FabricCryptoConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.FabricCryptoConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.FabricCryptoConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricCryptoConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    signatureHashFamily: jspb.Message.getFieldWithDefault(msg, 1, ""),
    identityIdentifierHashFunction: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.FabricCryptoConfig}
 */
proto.msp.FabricCryptoConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.FabricCryptoConfig;
  return proto.msp.FabricCryptoConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.FabricCryptoConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.FabricCryptoConfig}
 */
proto.msp.FabricCryptoConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignatureHashFamily(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentityIdentifierHashFunction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.FabricCryptoConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.FabricCryptoConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.FabricCryptoConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricCryptoConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignatureHashFamily();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIdentityIdentifierHashFunction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string signature_hash_family = 1;
 * @return {string}
 */
proto.msp.FabricCryptoConfig.prototype.getSignatureHashFamily = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.FabricCryptoConfig} returns this
 */
proto.msp.FabricCryptoConfig.prototype.setSignatureHashFamily = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string identity_identifier_hash_function = 2;
 * @return {string}
 */
proto.msp.FabricCryptoConfig.prototype.getIdentityIdentifierHashFunction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.FabricCryptoConfig} returns this
 */
proto.msp.FabricCryptoConfig.prototype.setIdentityIdentifierHashFunction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.IdemixMSPConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.IdemixMSPConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.IdemixMSPConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.IdemixMSPConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipk: msg.getIpk_asB64(),
    signer: (f = msg.getSigner()) && proto.msp.IdemixMSPSignerConfig.toObject(includeInstance, f),
    revocationPk: msg.getRevocationPk_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.IdemixMSPConfig}
 */
proto.msp.IdemixMSPConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.IdemixMSPConfig;
  return proto.msp.IdemixMSPConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.IdemixMSPConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.IdemixMSPConfig}
 */
proto.msp.IdemixMSPConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpk(value);
      break;
    case 3:
      var value = new proto.msp.IdemixMSPSignerConfig;
      reader.readMessage(value,proto.msp.IdemixMSPSignerConfig.deserializeBinaryFromReader);
      msg.setSigner(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRevocationPk(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.IdemixMSPConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.IdemixMSPConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.IdemixMSPConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSigner();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.IdemixMSPSignerConfig.serializeBinaryToWriter
    );
  }
  f = message.getRevocationPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.msp.IdemixMSPConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.IdemixMSPConfig} returns this
 */
proto.msp.IdemixMSPConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes ipk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msp.IdemixMSPConfig.prototype.getIpk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ipk = 2;
 * This is a type-conversion wrapper around `getIpk()`
 * @return {string}
 */
proto.msp.IdemixMSPConfig.prototype.getIpk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpk()));
};


/**
 * optional bytes ipk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpk()`
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPConfig.prototype.getIpk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.IdemixMSPConfig} returns this
 */
proto.msp.IdemixMSPConfig.prototype.setIpk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional IdemixMSPSignerConfig signer = 3;
 * @return {?proto.msp.IdemixMSPSignerConfig}
 */
proto.msp.IdemixMSPConfig.prototype.getSigner = function() {
  return /** @type{?proto.msp.IdemixMSPSignerConfig} */ (
    jspb.Message.getWrapperField(this, proto.msp.IdemixMSPSignerConfig, 3));
};


/**
 * @param {?proto.msp.IdemixMSPSignerConfig|undefined} value
 * @return {!proto.msp.IdemixMSPConfig} returns this
*/
proto.msp.IdemixMSPConfig.prototype.setSigner = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.IdemixMSPConfig} returns this
 */
proto.msp.IdemixMSPConfig.prototype.clearSigner = function() {
  return this.setSigner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.IdemixMSPConfig.prototype.hasSigner = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes revocation_pk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msp.IdemixMSPConfig.prototype.getRevocationPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes revocation_pk = 4;
 * This is a type-conversion wrapper around `getRevocationPk()`
 * @return {string}
 */
proto.msp.IdemixMSPConfig.prototype.getRevocationPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRevocationPk()));
};


/**
 * optional bytes revocation_pk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRevocationPk()`
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPConfig.prototype.getRevocationPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRevocationPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.IdemixMSPConfig} returns this
 */
proto.msp.IdemixMSPConfig.prototype.setRevocationPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int64 epoch = 5;
 * @return {number}
 */
proto.msp.IdemixMSPConfig.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.IdemixMSPConfig} returns this
 */
proto.msp.IdemixMSPConfig.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.IdemixMSPSignerConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.IdemixMSPSignerConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.IdemixMSPSignerConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.IdemixMSPSignerConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    cred: msg.getCred_asB64(),
    sk: msg.getSk_asB64(),
    organizationalUnitIdentifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    role: jspb.Message.getFieldWithDefault(msg, 4, 0),
    enrollmentId: jspb.Message.getFieldWithDefault(msg, 5, ""),
    credentialRevocationInformation: msg.getCredentialRevocationInformation_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.IdemixMSPSignerConfig}
 */
proto.msp.IdemixMSPSignerConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.IdemixMSPSignerConfig;
  return proto.msp.IdemixMSPSignerConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.IdemixMSPSignerConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.IdemixMSPSignerConfig}
 */
proto.msp.IdemixMSPSignerConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCred(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationalUnitIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRole(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnrollmentId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCredentialRevocationInformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPSignerConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.IdemixMSPSignerConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.IdemixMSPSignerConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.IdemixMSPSignerConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCred_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getOrganizationalUnitIdentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRole();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getEnrollmentId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCredentialRevocationInformation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes cred = 1;
 * @return {!(string|Uint8Array)}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCred = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cred = 1;
 * This is a type-conversion wrapper around `getCred()`
 * @return {string}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCred_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCred()));
};


/**
 * optional bytes cred = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCred()`
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCred_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCred()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setCred = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getSk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sk = 2;
 * This is a type-conversion wrapper around `getSk()`
 * @return {string}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getSk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSk()));
};


/**
 * optional bytes sk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSk()`
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getSk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setSk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string organizational_unit_identifier = 3;
 * @return {string}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getOrganizationalUnitIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setOrganizationalUnitIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 role = 4;
 * @return {number}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setRole = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string enrollment_id = 5;
 * @return {string}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getEnrollmentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setEnrollmentId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes credential_revocation_information = 6;
 * @return {!(string|Uint8Array)}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCredentialRevocationInformation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes credential_revocation_information = 6;
 * This is a type-conversion wrapper around `getCredentialRevocationInformation()`
 * @return {string}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCredentialRevocationInformation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCredentialRevocationInformation()));
};


/**
 * optional bytes credential_revocation_information = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCredentialRevocationInformation()`
 * @return {!Uint8Array}
 */
proto.msp.IdemixMSPSignerConfig.prototype.getCredentialRevocationInformation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCredentialRevocationInformation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.IdemixMSPSignerConfig} returns this
 */
proto.msp.IdemixMSPSignerConfig.prototype.setCredentialRevocationInformation = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.SigningIdentityInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.SigningIdentityInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.SigningIdentityInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.SigningIdentityInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicSigner: msg.getPublicSigner_asB64(),
    privateSigner: (f = msg.getPrivateSigner()) && proto.msp.KeyInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.SigningIdentityInfo}
 */
proto.msp.SigningIdentityInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.SigningIdentityInfo;
  return proto.msp.SigningIdentityInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.SigningIdentityInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.SigningIdentityInfo}
 */
proto.msp.SigningIdentityInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicSigner(value);
      break;
    case 2:
      var value = new proto.msp.KeyInfo;
      reader.readMessage(value,proto.msp.KeyInfo.deserializeBinaryFromReader);
      msg.setPrivateSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.SigningIdentityInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.SigningIdentityInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.SigningIdentityInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.SigningIdentityInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicSigner_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrivateSigner();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.KeyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes public_signer = 1;
 * @return {!(string|Uint8Array)}
 */
proto.msp.SigningIdentityInfo.prototype.getPublicSigner = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_signer = 1;
 * This is a type-conversion wrapper around `getPublicSigner()`
 * @return {string}
 */
proto.msp.SigningIdentityInfo.prototype.getPublicSigner_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicSigner()));
};


/**
 * optional bytes public_signer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicSigner()`
 * @return {!Uint8Array}
 */
proto.msp.SigningIdentityInfo.prototype.getPublicSigner_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicSigner()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.SigningIdentityInfo} returns this
 */
proto.msp.SigningIdentityInfo.prototype.setPublicSigner = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional KeyInfo private_signer = 2;
 * @return {?proto.msp.KeyInfo}
 */
proto.msp.SigningIdentityInfo.prototype.getPrivateSigner = function() {
  return /** @type{?proto.msp.KeyInfo} */ (
    jspb.Message.getWrapperField(this, proto.msp.KeyInfo, 2));
};


/**
 * @param {?proto.msp.KeyInfo|undefined} value
 * @return {!proto.msp.SigningIdentityInfo} returns this
*/
proto.msp.SigningIdentityInfo.prototype.setPrivateSigner = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.SigningIdentityInfo} returns this
 */
proto.msp.SigningIdentityInfo.prototype.clearPrivateSigner = function() {
  return this.setPrivateSigner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.SigningIdentityInfo.prototype.hasPrivateSigner = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.KeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.KeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.KeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.KeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyMaterial: msg.getKeyMaterial_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.KeyInfo}
 */
proto.msp.KeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.KeyInfo;
  return proto.msp.KeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.KeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.KeyInfo}
 */
proto.msp.KeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyIdentifier(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyMaterial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.KeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.KeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.KeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.KeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyMaterial_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string key_identifier = 1;
 * @return {string}
 */
proto.msp.KeyInfo.prototype.getKeyIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.KeyInfo} returns this
 */
proto.msp.KeyInfo.prototype.setKeyIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes key_material = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msp.KeyInfo.prototype.getKeyMaterial = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key_material = 2;
 * This is a type-conversion wrapper around `getKeyMaterial()`
 * @return {string}
 */
proto.msp.KeyInfo.prototype.getKeyMaterial_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyMaterial()));
};


/**
 * optional bytes key_material = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyMaterial()`
 * @return {!Uint8Array}
 */
proto.msp.KeyInfo.prototype.getKeyMaterial_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyMaterial()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.KeyInfo} returns this
 */
proto.msp.KeyInfo.prototype.setKeyMaterial = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.FabricOUIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.FabricOUIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.FabricOUIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricOUIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
    certificate: msg.getCertificate_asB64(),
    organizationalUnitIdentifier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricOUIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.FabricOUIdentifier;
  return proto.msp.FabricOUIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.FabricOUIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricOUIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCertificate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganizationalUnitIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.FabricOUIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.FabricOUIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.FabricOUIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricOUIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCertificate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getOrganizationalUnitIdentifier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes certificate = 1;
 * @return {!(string|Uint8Array)}
 */
proto.msp.FabricOUIdentifier.prototype.getCertificate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes certificate = 1;
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {string}
 */
proto.msp.FabricOUIdentifier.prototype.getCertificate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCertificate()));
};


/**
 * optional bytes certificate = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertificate()`
 * @return {!Uint8Array}
 */
proto.msp.FabricOUIdentifier.prototype.getCertificate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCertificate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msp.FabricOUIdentifier} returns this
 */
proto.msp.FabricOUIdentifier.prototype.setCertificate = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string organizational_unit_identifier = 2;
 * @return {string}
 */
proto.msp.FabricOUIdentifier.prototype.getOrganizationalUnitIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msp.FabricOUIdentifier} returns this
 */
proto.msp.FabricOUIdentifier.prototype.setOrganizationalUnitIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msp.FabricNodeOUs.prototype.toObject = function(opt_includeInstance) {
  return proto.msp.FabricNodeOUs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msp.FabricNodeOUs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricNodeOUs.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    clientOuIdentifier: (f = msg.getClientOuIdentifier()) && proto.msp.FabricOUIdentifier.toObject(includeInstance, f),
    peerOuIdentifier: (f = msg.getPeerOuIdentifier()) && proto.msp.FabricOUIdentifier.toObject(includeInstance, f),
    adminOuIdentifier: (f = msg.getAdminOuIdentifier()) && proto.msp.FabricOUIdentifier.toObject(includeInstance, f),
    ordererOuIdentifier: (f = msg.getOrdererOuIdentifier()) && proto.msp.FabricOUIdentifier.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msp.FabricNodeOUs}
 */
proto.msp.FabricNodeOUs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msp.FabricNodeOUs;
  return proto.msp.FabricNodeOUs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msp.FabricNodeOUs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msp.FabricNodeOUs}
 */
proto.msp.FabricNodeOUs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    case 2:
      var value = new proto.msp.FabricOUIdentifier;
      reader.readMessage(value,proto.msp.FabricOUIdentifier.deserializeBinaryFromReader);
      msg.setClientOuIdentifier(value);
      break;
    case 3:
      var value = new proto.msp.FabricOUIdentifier;
      reader.readMessage(value,proto.msp.FabricOUIdentifier.deserializeBinaryFromReader);
      msg.setPeerOuIdentifier(value);
      break;
    case 4:
      var value = new proto.msp.FabricOUIdentifier;
      reader.readMessage(value,proto.msp.FabricOUIdentifier.deserializeBinaryFromReader);
      msg.setAdminOuIdentifier(value);
      break;
    case 5:
      var value = new proto.msp.FabricOUIdentifier;
      reader.readMessage(value,proto.msp.FabricOUIdentifier.deserializeBinaryFromReader);
      msg.setOrdererOuIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msp.FabricNodeOUs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msp.FabricNodeOUs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msp.FabricNodeOUs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msp.FabricNodeOUs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnable();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getClientOuIdentifier();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msp.FabricOUIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPeerOuIdentifier();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.msp.FabricOUIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getAdminOuIdentifier();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msp.FabricOUIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getOrdererOuIdentifier();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.msp.FabricOUIdentifier.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool enable = 1;
 * @return {boolean}
 */
proto.msp.FabricNodeOUs.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msp.FabricNodeOUs} returns this
 */
proto.msp.FabricNodeOUs.prototype.setEnable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional FabricOUIdentifier client_ou_identifier = 2;
 * @return {?proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricNodeOUs.prototype.getClientOuIdentifier = function() {
  return /** @type{?proto.msp.FabricOUIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricOUIdentifier, 2));
};


/**
 * @param {?proto.msp.FabricOUIdentifier|undefined} value
 * @return {!proto.msp.FabricNodeOUs} returns this
*/
proto.msp.FabricNodeOUs.prototype.setClientOuIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricNodeOUs} returns this
 */
proto.msp.FabricNodeOUs.prototype.clearClientOuIdentifier = function() {
  return this.setClientOuIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricNodeOUs.prototype.hasClientOuIdentifier = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FabricOUIdentifier peer_ou_identifier = 3;
 * @return {?proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricNodeOUs.prototype.getPeerOuIdentifier = function() {
  return /** @type{?proto.msp.FabricOUIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricOUIdentifier, 3));
};


/**
 * @param {?proto.msp.FabricOUIdentifier|undefined} value
 * @return {!proto.msp.FabricNodeOUs} returns this
*/
proto.msp.FabricNodeOUs.prototype.setPeerOuIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricNodeOUs} returns this
 */
proto.msp.FabricNodeOUs.prototype.clearPeerOuIdentifier = function() {
  return this.setPeerOuIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricNodeOUs.prototype.hasPeerOuIdentifier = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FabricOUIdentifier admin_ou_identifier = 4;
 * @return {?proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricNodeOUs.prototype.getAdminOuIdentifier = function() {
  return /** @type{?proto.msp.FabricOUIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricOUIdentifier, 4));
};


/**
 * @param {?proto.msp.FabricOUIdentifier|undefined} value
 * @return {!proto.msp.FabricNodeOUs} returns this
*/
proto.msp.FabricNodeOUs.prototype.setAdminOuIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricNodeOUs} returns this
 */
proto.msp.FabricNodeOUs.prototype.clearAdminOuIdentifier = function() {
  return this.setAdminOuIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricNodeOUs.prototype.hasAdminOuIdentifier = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional FabricOUIdentifier orderer_ou_identifier = 5;
 * @return {?proto.msp.FabricOUIdentifier}
 */
proto.msp.FabricNodeOUs.prototype.getOrdererOuIdentifier = function() {
  return /** @type{?proto.msp.FabricOUIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.msp.FabricOUIdentifier, 5));
};


/**
 * @param {?proto.msp.FabricOUIdentifier|undefined} value
 * @return {!proto.msp.FabricNodeOUs} returns this
*/
proto.msp.FabricNodeOUs.prototype.setOrdererOuIdentifier = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msp.FabricNodeOUs} returns this
 */
proto.msp.FabricNodeOUs.prototype.clearOrdererOuIdentifier = function() {
  return this.setOrdererOuIdentifier(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msp.FabricNodeOUs.prototype.hasOrdererOuIdentifier = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.msp);
