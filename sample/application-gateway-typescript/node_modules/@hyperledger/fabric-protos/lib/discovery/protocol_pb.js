// source: discovery/protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gossip_message_pb = require('../gossip/message_pb.js');
goog.object.extend(proto, gossip_message_pb);
var msp_msp_config_pb = require('../msp/msp_config_pb.js');
goog.object.extend(proto, msp_msp_config_pb);
var peer_proposal_response_pb = require('../peer/proposal_response_pb.js');
goog.object.extend(proto, peer_proposal_response_pb);
goog.exportSymbol('proto.discovery.AuthInfo', null, global);
goog.exportSymbol('proto.discovery.ChaincodeQuery', null, global);
goog.exportSymbol('proto.discovery.ChaincodeQueryResult', null, global);
goog.exportSymbol('proto.discovery.ConfigQuery', null, global);
goog.exportSymbol('proto.discovery.ConfigResult', null, global);
goog.exportSymbol('proto.discovery.EndorsementDescriptor', null, global);
goog.exportSymbol('proto.discovery.Endpoint', null, global);
goog.exportSymbol('proto.discovery.Endpoints', null, global);
goog.exportSymbol('proto.discovery.Error', null, global);
goog.exportSymbol('proto.discovery.Layout', null, global);
goog.exportSymbol('proto.discovery.LocalPeerQuery', null, global);
goog.exportSymbol('proto.discovery.Peer', null, global);
goog.exportSymbol('proto.discovery.PeerMembershipQuery', null, global);
goog.exportSymbol('proto.discovery.PeerMembershipResult', null, global);
goog.exportSymbol('proto.discovery.Peers', null, global);
goog.exportSymbol('proto.discovery.Query', null, global);
goog.exportSymbol('proto.discovery.Query.QueryCase', null, global);
goog.exportSymbol('proto.discovery.QueryResult', null, global);
goog.exportSymbol('proto.discovery.QueryResult.ResultCase', null, global);
goog.exportSymbol('proto.discovery.Request', null, global);
goog.exportSymbol('proto.discovery.Response', null, global);
goog.exportSymbol('proto.discovery.SignedRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.SignedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.SignedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.SignedRequest.displayName = 'proto.discovery.SignedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.Request.repeatedFields_, null);
};
goog.inherits(proto.discovery.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Request.displayName = 'proto.discovery.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.Response.repeatedFields_, null);
};
goog.inherits(proto.discovery.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Response.displayName = 'proto.discovery.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.AuthInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.AuthInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.AuthInfo.displayName = 'proto.discovery.AuthInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.discovery.Query.oneofGroups_);
};
goog.inherits(proto.discovery.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Query.displayName = 'proto.discovery.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.QueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.discovery.QueryResult.oneofGroups_);
};
goog.inherits(proto.discovery.QueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.QueryResult.displayName = 'proto.discovery.QueryResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.ConfigQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.ConfigQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.ConfigQuery.displayName = 'proto.discovery.ConfigQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.ConfigResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.ConfigResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.ConfigResult.displayName = 'proto.discovery.ConfigResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.PeerMembershipQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.PeerMembershipQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.PeerMembershipQuery.displayName = 'proto.discovery.PeerMembershipQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.PeerMembershipResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.PeerMembershipResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.PeerMembershipResult.displayName = 'proto.discovery.PeerMembershipResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.ChaincodeQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.ChaincodeQuery.repeatedFields_, null);
};
goog.inherits(proto.discovery.ChaincodeQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.ChaincodeQuery.displayName = 'proto.discovery.ChaincodeQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.ChaincodeQueryResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.ChaincodeQueryResult.repeatedFields_, null);
};
goog.inherits(proto.discovery.ChaincodeQueryResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.ChaincodeQueryResult.displayName = 'proto.discovery.ChaincodeQueryResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.LocalPeerQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.LocalPeerQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.LocalPeerQuery.displayName = 'proto.discovery.LocalPeerQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.EndorsementDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.EndorsementDescriptor.repeatedFields_, null);
};
goog.inherits(proto.discovery.EndorsementDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.EndorsementDescriptor.displayName = 'proto.discovery.EndorsementDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Layout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.Layout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Layout.displayName = 'proto.discovery.Layout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Peers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.Peers.repeatedFields_, null);
};
goog.inherits(proto.discovery.Peers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Peers.displayName = 'proto.discovery.Peers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Peer.displayName = 'proto.discovery.Peer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Error.displayName = 'proto.discovery.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Endpoints = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.discovery.Endpoints.repeatedFields_, null);
};
goog.inherits(proto.discovery.Endpoints, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Endpoints.displayName = 'proto.discovery.Endpoints';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.discovery.Endpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.discovery.Endpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.discovery.Endpoint.displayName = 'proto.discovery.Endpoint';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.SignedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.SignedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.SignedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.SignedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.SignedRequest}
 */
proto.discovery.SignedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.SignedRequest;
  return proto.discovery.SignedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.SignedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.SignedRequest}
 */
proto.discovery.SignedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.SignedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.SignedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.SignedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.SignedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.SignedRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.discovery.SignedRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.discovery.SignedRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.discovery.SignedRequest} returns this
 */
proto.discovery.SignedRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.SignedRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.discovery.SignedRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.discovery.SignedRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.discovery.SignedRequest} returns this
 */
proto.discovery.SignedRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.Request.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    authentication: (f = msg.getAuthentication()) && proto.discovery.AuthInfo.toObject(includeInstance, f),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.discovery.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Request}
 */
proto.discovery.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Request;
  return proto.discovery.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Request}
 */
proto.discovery.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.AuthInfo;
      reader.readMessage(value,proto.discovery.AuthInfo.deserializeBinaryFromReader);
      msg.setAuthentication(value);
      break;
    case 2:
      var value = new proto.discovery.Query;
      reader.readMessage(value,proto.discovery.Query.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAuthentication();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.discovery.AuthInfo.serializeBinaryToWriter
    );
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.discovery.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional AuthInfo authentication = 1;
 * @return {?proto.discovery.AuthInfo}
 */
proto.discovery.Request.prototype.getAuthentication = function() {
  return /** @type{?proto.discovery.AuthInfo} */ (
    jspb.Message.getWrapperField(this, proto.discovery.AuthInfo, 1));
};


/**
 * @param {?proto.discovery.AuthInfo|undefined} value
 * @return {!proto.discovery.Request} returns this
*/
proto.discovery.Request.prototype.setAuthentication = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Request} returns this
 */
proto.discovery.Request.prototype.clearAuthentication = function() {
  return this.setAuthentication(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Request.prototype.hasAuthentication = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Query queries = 2;
 * @return {!Array<!proto.discovery.Query>}
 */
proto.discovery.Request.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.discovery.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Query, 2));
};


/**
 * @param {!Array<!proto.discovery.Query>} value
 * @return {!proto.discovery.Request} returns this
*/
proto.discovery.Request.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.discovery.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Query}
 */
proto.discovery.Request.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.discovery.Query, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.Request} returns this
 */
proto.discovery.Request.prototype.clearQueriesList = function() {
  return this.setQueriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.Response.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.discovery.QueryResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Response}
 */
proto.discovery.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Response;
  return proto.discovery.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Response}
 */
proto.discovery.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.QueryResult;
      reader.readMessage(value,proto.discovery.QueryResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.discovery.QueryResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated QueryResult results = 1;
 * @return {!Array<!proto.discovery.QueryResult>}
 */
proto.discovery.Response.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.discovery.QueryResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.QueryResult, 1));
};


/**
 * @param {!Array<!proto.discovery.QueryResult>} value
 * @return {!proto.discovery.Response} returns this
*/
proto.discovery.Response.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.discovery.QueryResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.QueryResult}
 */
proto.discovery.Response.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.discovery.QueryResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.Response} returns this
 */
proto.discovery.Response.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.AuthInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.AuthInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.AuthInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.AuthInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientIdentity: msg.getClientIdentity_asB64(),
    clientTlsCertHash: msg.getClientTlsCertHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.AuthInfo}
 */
proto.discovery.AuthInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.AuthInfo;
  return proto.discovery.AuthInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.AuthInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.AuthInfo}
 */
proto.discovery.AuthInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientIdentity(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientTlsCertHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.AuthInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.AuthInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.AuthInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.AuthInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientIdentity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClientTlsCertHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes client_identity = 1;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.AuthInfo.prototype.getClientIdentity = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes client_identity = 1;
 * This is a type-conversion wrapper around `getClientIdentity()`
 * @return {string}
 */
proto.discovery.AuthInfo.prototype.getClientIdentity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientIdentity()));
};


/**
 * optional bytes client_identity = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientIdentity()`
 * @return {!Uint8Array}
 */
proto.discovery.AuthInfo.prototype.getClientIdentity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientIdentity()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.discovery.AuthInfo} returns this
 */
proto.discovery.AuthInfo.prototype.setClientIdentity = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes client_tls_cert_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.AuthInfo.prototype.getClientTlsCertHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes client_tls_cert_hash = 2;
 * This is a type-conversion wrapper around `getClientTlsCertHash()`
 * @return {string}
 */
proto.discovery.AuthInfo.prototype.getClientTlsCertHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientTlsCertHash()));
};


/**
 * optional bytes client_tls_cert_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientTlsCertHash()`
 * @return {!Uint8Array}
 */
proto.discovery.AuthInfo.prototype.getClientTlsCertHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientTlsCertHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.discovery.AuthInfo} returns this
 */
proto.discovery.AuthInfo.prototype.setClientTlsCertHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.discovery.Query.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.discovery.Query.QueryCase = {
  QUERY_NOT_SET: 0,
  CONFIG_QUERY: 2,
  PEER_QUERY: 3,
  CC_QUERY: 4,
  LOCAL_PEERS: 5
};

/**
 * @return {proto.discovery.Query.QueryCase}
 */
proto.discovery.Query.prototype.getQueryCase = function() {
  return /** @type {proto.discovery.Query.QueryCase} */(jspb.Message.computeOneofCase(this, proto.discovery.Query.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    configQuery: (f = msg.getConfigQuery()) && proto.discovery.ConfigQuery.toObject(includeInstance, f),
    peerQuery: (f = msg.getPeerQuery()) && proto.discovery.PeerMembershipQuery.toObject(includeInstance, f),
    ccQuery: (f = msg.getCcQuery()) && proto.discovery.ChaincodeQuery.toObject(includeInstance, f),
    localPeers: (f = msg.getLocalPeers()) && proto.discovery.LocalPeerQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Query}
 */
proto.discovery.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Query;
  return proto.discovery.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Query}
 */
proto.discovery.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = new proto.discovery.ConfigQuery;
      reader.readMessage(value,proto.discovery.ConfigQuery.deserializeBinaryFromReader);
      msg.setConfigQuery(value);
      break;
    case 3:
      var value = new proto.discovery.PeerMembershipQuery;
      reader.readMessage(value,proto.discovery.PeerMembershipQuery.deserializeBinaryFromReader);
      msg.setPeerQuery(value);
      break;
    case 4:
      var value = new proto.discovery.ChaincodeQuery;
      reader.readMessage(value,proto.discovery.ChaincodeQuery.deserializeBinaryFromReader);
      msg.setCcQuery(value);
      break;
    case 5:
      var value = new proto.discovery.LocalPeerQuery;
      reader.readMessage(value,proto.discovery.LocalPeerQuery.deserializeBinaryFromReader);
      msg.setLocalPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getConfigQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.discovery.ConfigQuery.serializeBinaryToWriter
    );
  }
  f = message.getPeerQuery();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.discovery.PeerMembershipQuery.serializeBinaryToWriter
    );
  }
  f = message.getCcQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.discovery.ChaincodeQuery.serializeBinaryToWriter
    );
  }
  f = message.getLocalPeers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.discovery.LocalPeerQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.discovery.Query.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.discovery.Query} returns this
 */
proto.discovery.Query.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConfigQuery config_query = 2;
 * @return {?proto.discovery.ConfigQuery}
 */
proto.discovery.Query.prototype.getConfigQuery = function() {
  return /** @type{?proto.discovery.ConfigQuery} */ (
    jspb.Message.getWrapperField(this, proto.discovery.ConfigQuery, 2));
};


/**
 * @param {?proto.discovery.ConfigQuery|undefined} value
 * @return {!proto.discovery.Query} returns this
*/
proto.discovery.Query.prototype.setConfigQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.discovery.Query.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Query} returns this
 */
proto.discovery.Query.prototype.clearConfigQuery = function() {
  return this.setConfigQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Query.prototype.hasConfigQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PeerMembershipQuery peer_query = 3;
 * @return {?proto.discovery.PeerMembershipQuery}
 */
proto.discovery.Query.prototype.getPeerQuery = function() {
  return /** @type{?proto.discovery.PeerMembershipQuery} */ (
    jspb.Message.getWrapperField(this, proto.discovery.PeerMembershipQuery, 3));
};


/**
 * @param {?proto.discovery.PeerMembershipQuery|undefined} value
 * @return {!proto.discovery.Query} returns this
*/
proto.discovery.Query.prototype.setPeerQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.discovery.Query.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Query} returns this
 */
proto.discovery.Query.prototype.clearPeerQuery = function() {
  return this.setPeerQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Query.prototype.hasPeerQuery = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ChaincodeQuery cc_query = 4;
 * @return {?proto.discovery.ChaincodeQuery}
 */
proto.discovery.Query.prototype.getCcQuery = function() {
  return /** @type{?proto.discovery.ChaincodeQuery} */ (
    jspb.Message.getWrapperField(this, proto.discovery.ChaincodeQuery, 4));
};


/**
 * @param {?proto.discovery.ChaincodeQuery|undefined} value
 * @return {!proto.discovery.Query} returns this
*/
proto.discovery.Query.prototype.setCcQuery = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.discovery.Query.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Query} returns this
 */
proto.discovery.Query.prototype.clearCcQuery = function() {
  return this.setCcQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Query.prototype.hasCcQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional LocalPeerQuery local_peers = 5;
 * @return {?proto.discovery.LocalPeerQuery}
 */
proto.discovery.Query.prototype.getLocalPeers = function() {
  return /** @type{?proto.discovery.LocalPeerQuery} */ (
    jspb.Message.getWrapperField(this, proto.discovery.LocalPeerQuery, 5));
};


/**
 * @param {?proto.discovery.LocalPeerQuery|undefined} value
 * @return {!proto.discovery.Query} returns this
*/
proto.discovery.Query.prototype.setLocalPeers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.discovery.Query.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Query} returns this
 */
proto.discovery.Query.prototype.clearLocalPeers = function() {
  return this.setLocalPeers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Query.prototype.hasLocalPeers = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.discovery.QueryResult.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.discovery.QueryResult.ResultCase = {
  RESULT_NOT_SET: 0,
  ERROR: 1,
  CONFIG_RESULT: 2,
  CC_QUERY_RES: 3,
  MEMBERS: 4
};

/**
 * @return {proto.discovery.QueryResult.ResultCase}
 */
proto.discovery.QueryResult.prototype.getResultCase = function() {
  return /** @type {proto.discovery.QueryResult.ResultCase} */(jspb.Message.computeOneofCase(this, proto.discovery.QueryResult.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.QueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.QueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.QueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.QueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: (f = msg.getError()) && proto.discovery.Error.toObject(includeInstance, f),
    configResult: (f = msg.getConfigResult()) && proto.discovery.ConfigResult.toObject(includeInstance, f),
    ccQueryRes: (f = msg.getCcQueryRes()) && proto.discovery.ChaincodeQueryResult.toObject(includeInstance, f),
    members: (f = msg.getMembers()) && proto.discovery.PeerMembershipResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.QueryResult}
 */
proto.discovery.QueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.QueryResult;
  return proto.discovery.QueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.QueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.QueryResult}
 */
proto.discovery.QueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.Error;
      reader.readMessage(value,proto.discovery.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new proto.discovery.ConfigResult;
      reader.readMessage(value,proto.discovery.ConfigResult.deserializeBinaryFromReader);
      msg.setConfigResult(value);
      break;
    case 3:
      var value = new proto.discovery.ChaincodeQueryResult;
      reader.readMessage(value,proto.discovery.ChaincodeQueryResult.deserializeBinaryFromReader);
      msg.setCcQueryRes(value);
      break;
    case 4:
      var value = new proto.discovery.PeerMembershipResult;
      reader.readMessage(value,proto.discovery.PeerMembershipResult.deserializeBinaryFromReader);
      msg.setMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.QueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.QueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.QueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.QueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.discovery.Error.serializeBinaryToWriter
    );
  }
  f = message.getConfigResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.discovery.ConfigResult.serializeBinaryToWriter
    );
  }
  f = message.getCcQueryRes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.discovery.ChaincodeQueryResult.serializeBinaryToWriter
    );
  }
  f = message.getMembers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.discovery.PeerMembershipResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional Error error = 1;
 * @return {?proto.discovery.Error}
 */
proto.discovery.QueryResult.prototype.getError = function() {
  return /** @type{?proto.discovery.Error} */ (
    jspb.Message.getWrapperField(this, proto.discovery.Error, 1));
};


/**
 * @param {?proto.discovery.Error|undefined} value
 * @return {!proto.discovery.QueryResult} returns this
*/
proto.discovery.QueryResult.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.discovery.QueryResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.QueryResult} returns this
 */
proto.discovery.QueryResult.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.QueryResult.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConfigResult config_result = 2;
 * @return {?proto.discovery.ConfigResult}
 */
proto.discovery.QueryResult.prototype.getConfigResult = function() {
  return /** @type{?proto.discovery.ConfigResult} */ (
    jspb.Message.getWrapperField(this, proto.discovery.ConfigResult, 2));
};


/**
 * @param {?proto.discovery.ConfigResult|undefined} value
 * @return {!proto.discovery.QueryResult} returns this
*/
proto.discovery.QueryResult.prototype.setConfigResult = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.discovery.QueryResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.QueryResult} returns this
 */
proto.discovery.QueryResult.prototype.clearConfigResult = function() {
  return this.setConfigResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.QueryResult.prototype.hasConfigResult = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ChaincodeQueryResult cc_query_res = 3;
 * @return {?proto.discovery.ChaincodeQueryResult}
 */
proto.discovery.QueryResult.prototype.getCcQueryRes = function() {
  return /** @type{?proto.discovery.ChaincodeQueryResult} */ (
    jspb.Message.getWrapperField(this, proto.discovery.ChaincodeQueryResult, 3));
};


/**
 * @param {?proto.discovery.ChaincodeQueryResult|undefined} value
 * @return {!proto.discovery.QueryResult} returns this
*/
proto.discovery.QueryResult.prototype.setCcQueryRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.discovery.QueryResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.QueryResult} returns this
 */
proto.discovery.QueryResult.prototype.clearCcQueryRes = function() {
  return this.setCcQueryRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.QueryResult.prototype.hasCcQueryRes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PeerMembershipResult members = 4;
 * @return {?proto.discovery.PeerMembershipResult}
 */
proto.discovery.QueryResult.prototype.getMembers = function() {
  return /** @type{?proto.discovery.PeerMembershipResult} */ (
    jspb.Message.getWrapperField(this, proto.discovery.PeerMembershipResult, 4));
};


/**
 * @param {?proto.discovery.PeerMembershipResult|undefined} value
 * @return {!proto.discovery.QueryResult} returns this
*/
proto.discovery.QueryResult.prototype.setMembers = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.discovery.QueryResult.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.QueryResult} returns this
 */
proto.discovery.QueryResult.prototype.clearMembers = function() {
  return this.setMembers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.QueryResult.prototype.hasMembers = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.ConfigQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.ConfigQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.ConfigQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ConfigQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.ConfigQuery}
 */
proto.discovery.ConfigQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.ConfigQuery;
  return proto.discovery.ConfigQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.ConfigQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.ConfigQuery}
 */
proto.discovery.ConfigQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.ConfigQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.ConfigQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.ConfigQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ConfigQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.ConfigResult.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.ConfigResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.ConfigResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ConfigResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    mspsMap: (f = msg.getMspsMap()) ? f.toObject(includeInstance, proto.msp.FabricMSPConfig.toObject) : [],
    orderersMap: (f = msg.getOrderersMap()) ? f.toObject(includeInstance, proto.discovery.Endpoints.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.ConfigResult}
 */
proto.discovery.ConfigResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.ConfigResult;
  return proto.discovery.ConfigResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.ConfigResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.ConfigResult}
 */
proto.discovery.ConfigResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getMspsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.msp.FabricMSPConfig.deserializeBinaryFromReader, "", new proto.msp.FabricMSPConfig());
         });
      break;
    case 2:
      var value = msg.getOrderersMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.discovery.Endpoints.deserializeBinaryFromReader, "", new proto.discovery.Endpoints());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.ConfigResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.ConfigResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.ConfigResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ConfigResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMspsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.msp.FabricMSPConfig.serializeBinaryToWriter);
  }
  f = message.getOrderersMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.discovery.Endpoints.serializeBinaryToWriter);
  }
};


/**
 * map<string, msp.FabricMSPConfig> msps = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.msp.FabricMSPConfig>}
 */
proto.discovery.ConfigResult.prototype.getMspsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.msp.FabricMSPConfig>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.msp.FabricMSPConfig));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.discovery.ConfigResult} returns this
 */
proto.discovery.ConfigResult.prototype.clearMspsMap = function() {
  this.getMspsMap().clear();
  return this;};


/**
 * map<string, Endpoints> orderers = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.discovery.Endpoints>}
 */
proto.discovery.ConfigResult.prototype.getOrderersMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.discovery.Endpoints>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.discovery.Endpoints));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.discovery.ConfigResult} returns this
 */
proto.discovery.ConfigResult.prototype.clearOrderersMap = function() {
  this.getOrderersMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.PeerMembershipQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.PeerMembershipQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.PeerMembershipQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.PeerMembershipQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: (f = msg.getFilter()) && peer_proposal_response_pb.ChaincodeInterest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.PeerMembershipQuery}
 */
proto.discovery.PeerMembershipQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.PeerMembershipQuery;
  return proto.discovery.PeerMembershipQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.PeerMembershipQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.PeerMembershipQuery}
 */
proto.discovery.PeerMembershipQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new peer_proposal_response_pb.ChaincodeInterest;
      reader.readMessage(value,peer_proposal_response_pb.ChaincodeInterest.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.PeerMembershipQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.PeerMembershipQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.PeerMembershipQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.PeerMembershipQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      peer_proposal_response_pb.ChaincodeInterest.serializeBinaryToWriter
    );
  }
};


/**
 * optional protos.ChaincodeInterest filter = 1;
 * @return {?proto.protos.ChaincodeInterest}
 */
proto.discovery.PeerMembershipQuery.prototype.getFilter = function() {
  return /** @type{?proto.protos.ChaincodeInterest} */ (
    jspb.Message.getWrapperField(this, peer_proposal_response_pb.ChaincodeInterest, 1));
};


/**
 * @param {?proto.protos.ChaincodeInterest|undefined} value
 * @return {!proto.discovery.PeerMembershipQuery} returns this
*/
proto.discovery.PeerMembershipQuery.prototype.setFilter = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.PeerMembershipQuery} returns this
 */
proto.discovery.PeerMembershipQuery.prototype.clearFilter = function() {
  return this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.PeerMembershipQuery.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.PeerMembershipResult.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.PeerMembershipResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.PeerMembershipResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.PeerMembershipResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersByOrgMap: (f = msg.getPeersByOrgMap()) ? f.toObject(includeInstance, proto.discovery.Peers.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.PeerMembershipResult}
 */
proto.discovery.PeerMembershipResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.PeerMembershipResult;
  return proto.discovery.PeerMembershipResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.PeerMembershipResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.PeerMembershipResult}
 */
proto.discovery.PeerMembershipResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getPeersByOrgMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.discovery.Peers.deserializeBinaryFromReader, "", new proto.discovery.Peers());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.PeerMembershipResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.PeerMembershipResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.PeerMembershipResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.PeerMembershipResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersByOrgMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.discovery.Peers.serializeBinaryToWriter);
  }
};


/**
 * map<string, Peers> peers_by_org = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.discovery.Peers>}
 */
proto.discovery.PeerMembershipResult.prototype.getPeersByOrgMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.discovery.Peers>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.discovery.Peers));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.discovery.PeerMembershipResult} returns this
 */
proto.discovery.PeerMembershipResult.prototype.clearPeersByOrgMap = function() {
  this.getPeersByOrgMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.ChaincodeQuery.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.ChaincodeQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.ChaincodeQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.ChaincodeQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ChaincodeQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    interestsList: jspb.Message.toObjectList(msg.getInterestsList(),
    peer_proposal_response_pb.ChaincodeInterest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.ChaincodeQuery}
 */
proto.discovery.ChaincodeQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.ChaincodeQuery;
  return proto.discovery.ChaincodeQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.ChaincodeQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.ChaincodeQuery}
 */
proto.discovery.ChaincodeQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new peer_proposal_response_pb.ChaincodeInterest;
      reader.readMessage(value,peer_proposal_response_pb.ChaincodeInterest.deserializeBinaryFromReader);
      msg.addInterests(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.ChaincodeQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.ChaincodeQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.ChaincodeQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ChaincodeQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInterestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      peer_proposal_response_pb.ChaincodeInterest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated protos.ChaincodeInterest interests = 1;
 * @return {!Array<!proto.protos.ChaincodeInterest>}
 */
proto.discovery.ChaincodeQuery.prototype.getInterestsList = function() {
  return /** @type{!Array<!proto.protos.ChaincodeInterest>} */ (
    jspb.Message.getRepeatedWrapperField(this, peer_proposal_response_pb.ChaincodeInterest, 1));
};


/**
 * @param {!Array<!proto.protos.ChaincodeInterest>} value
 * @return {!proto.discovery.ChaincodeQuery} returns this
*/
proto.discovery.ChaincodeQuery.prototype.setInterestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protos.ChaincodeInterest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protos.ChaincodeInterest}
 */
proto.discovery.ChaincodeQuery.prototype.addInterests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protos.ChaincodeInterest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.ChaincodeQuery} returns this
 */
proto.discovery.ChaincodeQuery.prototype.clearInterestsList = function() {
  return this.setInterestsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.ChaincodeQueryResult.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.ChaincodeQueryResult.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.ChaincodeQueryResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.ChaincodeQueryResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ChaincodeQueryResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    contentList: jspb.Message.toObjectList(msg.getContentList(),
    proto.discovery.EndorsementDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.ChaincodeQueryResult}
 */
proto.discovery.ChaincodeQueryResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.ChaincodeQueryResult;
  return proto.discovery.ChaincodeQueryResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.ChaincodeQueryResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.ChaincodeQueryResult}
 */
proto.discovery.ChaincodeQueryResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.EndorsementDescriptor;
      reader.readMessage(value,proto.discovery.EndorsementDescriptor.deserializeBinaryFromReader);
      msg.addContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.ChaincodeQueryResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.ChaincodeQueryResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.ChaincodeQueryResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.ChaincodeQueryResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.discovery.EndorsementDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EndorsementDescriptor content = 1;
 * @return {!Array<!proto.discovery.EndorsementDescriptor>}
 */
proto.discovery.ChaincodeQueryResult.prototype.getContentList = function() {
  return /** @type{!Array<!proto.discovery.EndorsementDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.EndorsementDescriptor, 1));
};


/**
 * @param {!Array<!proto.discovery.EndorsementDescriptor>} value
 * @return {!proto.discovery.ChaincodeQueryResult} returns this
*/
proto.discovery.ChaincodeQueryResult.prototype.setContentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.discovery.EndorsementDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.EndorsementDescriptor}
 */
proto.discovery.ChaincodeQueryResult.prototype.addContent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.discovery.EndorsementDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.ChaincodeQueryResult} returns this
 */
proto.discovery.ChaincodeQueryResult.prototype.clearContentList = function() {
  return this.setContentList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.LocalPeerQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.LocalPeerQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.LocalPeerQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.LocalPeerQuery.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.LocalPeerQuery}
 */
proto.discovery.LocalPeerQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.LocalPeerQuery;
  return proto.discovery.LocalPeerQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.LocalPeerQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.LocalPeerQuery}
 */
proto.discovery.LocalPeerQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.LocalPeerQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.LocalPeerQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.LocalPeerQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.LocalPeerQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.EndorsementDescriptor.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.EndorsementDescriptor.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.EndorsementDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.EndorsementDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.EndorsementDescriptor.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaincode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    endorsersByGroupsMap: (f = msg.getEndorsersByGroupsMap()) ? f.toObject(includeInstance, proto.discovery.Peers.toObject) : [],
    layoutsList: jspb.Message.toObjectList(msg.getLayoutsList(),
    proto.discovery.Layout.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.EndorsementDescriptor}
 */
proto.discovery.EndorsementDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.EndorsementDescriptor;
  return proto.discovery.EndorsementDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.EndorsementDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.EndorsementDescriptor}
 */
proto.discovery.EndorsementDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChaincode(value);
      break;
    case 2:
      var value = msg.getEndorsersByGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.discovery.Peers.deserializeBinaryFromReader, "", new proto.discovery.Peers());
         });
      break;
    case 3:
      var value = new proto.discovery.Layout;
      reader.readMessage(value,proto.discovery.Layout.deserializeBinaryFromReader);
      msg.addLayouts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.EndorsementDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.EndorsementDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.EndorsementDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.EndorsementDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaincode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEndorsersByGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.discovery.Peers.serializeBinaryToWriter);
  }
  f = message.getLayoutsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.discovery.Layout.serializeBinaryToWriter
    );
  }
};


/**
 * optional string chaincode = 1;
 * @return {string}
 */
proto.discovery.EndorsementDescriptor.prototype.getChaincode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.discovery.EndorsementDescriptor} returns this
 */
proto.discovery.EndorsementDescriptor.prototype.setChaincode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, Peers> endorsers_by_groups = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.discovery.Peers>}
 */
proto.discovery.EndorsementDescriptor.prototype.getEndorsersByGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.discovery.Peers>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.discovery.Peers));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.discovery.EndorsementDescriptor} returns this
 */
proto.discovery.EndorsementDescriptor.prototype.clearEndorsersByGroupsMap = function() {
  this.getEndorsersByGroupsMap().clear();
  return this;};


/**
 * repeated Layout layouts = 3;
 * @return {!Array<!proto.discovery.Layout>}
 */
proto.discovery.EndorsementDescriptor.prototype.getLayoutsList = function() {
  return /** @type{!Array<!proto.discovery.Layout>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Layout, 3));
};


/**
 * @param {!Array<!proto.discovery.Layout>} value
 * @return {!proto.discovery.EndorsementDescriptor} returns this
*/
proto.discovery.EndorsementDescriptor.prototype.setLayoutsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.discovery.Layout=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Layout}
 */
proto.discovery.EndorsementDescriptor.prototype.addLayouts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.discovery.Layout, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.EndorsementDescriptor} returns this
 */
proto.discovery.EndorsementDescriptor.prototype.clearLayoutsList = function() {
  return this.setLayoutsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Layout.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Layout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Layout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Layout.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantitiesByGroupMap: (f = msg.getQuantitiesByGroupMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Layout}
 */
proto.discovery.Layout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Layout;
  return proto.discovery.Layout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Layout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Layout}
 */
proto.discovery.Layout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQuantitiesByGroupMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Layout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Layout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Layout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Layout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantitiesByGroupMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
};


/**
 * map<string, uint32> quantities_by_group = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.discovery.Layout.prototype.getQuantitiesByGroupMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.discovery.Layout} returns this
 */
proto.discovery.Layout.prototype.clearQuantitiesByGroupMap = function() {
  this.getQuantitiesByGroupMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.Peers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Peers.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Peers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Peers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Peers.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.discovery.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Peers}
 */
proto.discovery.Peers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Peers;
  return proto.discovery.Peers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Peers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Peers}
 */
proto.discovery.Peers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.Peer;
      reader.readMessage(value,proto.discovery.Peer.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Peers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Peers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Peers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Peers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.discovery.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Peer peers = 1;
 * @return {!Array<!proto.discovery.Peer>}
 */
proto.discovery.Peers.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.discovery.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Peer, 1));
};


/**
 * @param {!Array<!proto.discovery.Peer>} value
 * @return {!proto.discovery.Peers} returns this
*/
proto.discovery.Peers.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.discovery.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Peer}
 */
proto.discovery.Peers.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.discovery.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.Peers} returns this
 */
proto.discovery.Peers.prototype.clearPeersList = function() {
  return this.setPeersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateInfo: (f = msg.getStateInfo()) && gossip_message_pb.Envelope.toObject(includeInstance, f),
    membershipInfo: (f = msg.getMembershipInfo()) && gossip_message_pb.Envelope.toObject(includeInstance, f),
    identity: msg.getIdentity_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Peer}
 */
proto.discovery.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Peer;
  return proto.discovery.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Peer}
 */
proto.discovery.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gossip_message_pb.Envelope;
      reader.readMessage(value,gossip_message_pb.Envelope.deserializeBinaryFromReader);
      msg.setStateInfo(value);
      break;
    case 2:
      var value = new gossip_message_pb.Envelope;
      reader.readMessage(value,gossip_message_pb.Envelope.deserializeBinaryFromReader);
      msg.setMembershipInfo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      gossip_message_pb.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getMembershipInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gossip_message_pb.Envelope.serializeBinaryToWriter
    );
  }
  f = message.getIdentity_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional gossip.Envelope state_info = 1;
 * @return {?proto.gossip.Envelope}
 */
proto.discovery.Peer.prototype.getStateInfo = function() {
  return /** @type{?proto.gossip.Envelope} */ (
    jspb.Message.getWrapperField(this, gossip_message_pb.Envelope, 1));
};


/**
 * @param {?proto.gossip.Envelope|undefined} value
 * @return {!proto.discovery.Peer} returns this
*/
proto.discovery.Peer.prototype.setStateInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Peer} returns this
 */
proto.discovery.Peer.prototype.clearStateInfo = function() {
  return this.setStateInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Peer.prototype.hasStateInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional gossip.Envelope membership_info = 2;
 * @return {?proto.gossip.Envelope}
 */
proto.discovery.Peer.prototype.getMembershipInfo = function() {
  return /** @type{?proto.gossip.Envelope} */ (
    jspb.Message.getWrapperField(this, gossip_message_pb.Envelope, 2));
};


/**
 * @param {?proto.gossip.Envelope|undefined} value
 * @return {!proto.discovery.Peer} returns this
*/
proto.discovery.Peer.prototype.setMembershipInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.discovery.Peer} returns this
 */
proto.discovery.Peer.prototype.clearMembershipInfo = function() {
  return this.setMembershipInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.discovery.Peer.prototype.hasMembershipInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes identity = 3;
 * @return {!(string|Uint8Array)}
 */
proto.discovery.Peer.prototype.getIdentity = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes identity = 3;
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {string}
 */
proto.discovery.Peer.prototype.getIdentity_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIdentity()));
};


/**
 * optional bytes identity = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIdentity()`
 * @return {!Uint8Array}
 */
proto.discovery.Peer.prototype.getIdentity_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIdentity()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.discovery.Peer} returns this
 */
proto.discovery.Peer.prototype.setIdentity = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Error}
 */
proto.discovery.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Error;
  return proto.discovery.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Error}
 */
proto.discovery.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.discovery.Error.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.discovery.Error} returns this
 */
proto.discovery.Error.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.discovery.Endpoints.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Endpoints.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Endpoints.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Endpoints} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Endpoints.toObject = function(includeInstance, msg) {
  var f, obj = {
    endpointList: jspb.Message.toObjectList(msg.getEndpointList(),
    proto.discovery.Endpoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Endpoints}
 */
proto.discovery.Endpoints.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Endpoints;
  return proto.discovery.Endpoints.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Endpoints} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Endpoints}
 */
proto.discovery.Endpoints.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.discovery.Endpoint;
      reader.readMessage(value,proto.discovery.Endpoint.deserializeBinaryFromReader);
      msg.addEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Endpoints.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Endpoints.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Endpoints} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Endpoints.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEndpointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.discovery.Endpoint.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Endpoint endpoint = 1;
 * @return {!Array<!proto.discovery.Endpoint>}
 */
proto.discovery.Endpoints.prototype.getEndpointList = function() {
  return /** @type{!Array<!proto.discovery.Endpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.discovery.Endpoint, 1));
};


/**
 * @param {!Array<!proto.discovery.Endpoint>} value
 * @return {!proto.discovery.Endpoints} returns this
*/
proto.discovery.Endpoints.prototype.setEndpointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.discovery.Endpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.discovery.Endpoint}
 */
proto.discovery.Endpoints.prototype.addEndpoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.discovery.Endpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.discovery.Endpoints} returns this
 */
proto.discovery.Endpoints.prototype.clearEndpointList = function() {
  return this.setEndpointList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.discovery.Endpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.discovery.Endpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.discovery.Endpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Endpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.discovery.Endpoint}
 */
proto.discovery.Endpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.discovery.Endpoint;
  return proto.discovery.Endpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.discovery.Endpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.discovery.Endpoint}
 */
proto.discovery.Endpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.discovery.Endpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.discovery.Endpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.discovery.Endpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.discovery.Endpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.discovery.Endpoint.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.discovery.Endpoint} returns this
 */
proto.discovery.Endpoint.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.discovery.Endpoint.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.discovery.Endpoint} returns this
 */
proto.discovery.Endpoint.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.discovery);
