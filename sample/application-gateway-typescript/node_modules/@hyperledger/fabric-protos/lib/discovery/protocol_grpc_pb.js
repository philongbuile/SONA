// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
'use strict';
var grpc = require('@grpc/grpc-js');
var discovery_protocol_pb = require('../discovery/protocol_pb.js');
var gossip_message_pb = require('../gossip/message_pb.js');
var msp_msp_config_pb = require('../msp/msp_config_pb.js');
var peer_proposal_response_pb = require('../peer/proposal_response_pb.js');

function serialize_discovery_Response(arg) {
  if (!(arg instanceof discovery_protocol_pb.Response)) {
    throw new Error('Expected argument of type discovery.Response');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_discovery_Response(buffer_arg) {
  return discovery_protocol_pb.Response.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_discovery_SignedRequest(arg) {
  if (!(arg instanceof discovery_protocol_pb.SignedRequest)) {
    throw new Error('Expected argument of type discovery.SignedRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_discovery_SignedRequest(buffer_arg) {
  return discovery_protocol_pb.SignedRequest.deserializeBinary(new Uint8Array(buffer_arg));
}


// Discovery defines a service that serves information about the fabric network
// like which peers, orderers, chaincodes, etc.
var DiscoveryService = exports.DiscoveryService = {
  // Discover receives a signed request, and returns a response.
discover: {
    path: '/discovery.Discovery/Discover',
    requestStream: false,
    responseStream: false,
    requestType: discovery_protocol_pb.SignedRequest,
    responseType: discovery_protocol_pb.Response,
    requestSerialize: serialize_discovery_SignedRequest,
    requestDeserialize: deserialize_discovery_SignedRequest,
    responseSerialize: serialize_discovery_Response,
    responseDeserialize: deserialize_discovery_Response,
  },
};

exports.DiscoveryClient = grpc.makeGenericClientConstructor(DiscoveryService);
