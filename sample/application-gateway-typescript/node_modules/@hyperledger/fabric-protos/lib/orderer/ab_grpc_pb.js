// GENERATED CODE -- DO NOT EDIT!

// Original file comments:
// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
'use strict';
var grpc = require('@grpc/grpc-js');
var orderer_ab_pb = require('../orderer/ab_pb.js');
var common_common_pb = require('../common/common_pb.js');

function serialize_common_Envelope(arg) {
  if (!(arg instanceof common_common_pb.Envelope)) {
    throw new Error('Expected argument of type common.Envelope');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_common_Envelope(buffer_arg) {
  return common_common_pb.Envelope.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_orderer_BroadcastResponse(arg) {
  if (!(arg instanceof orderer_ab_pb.BroadcastResponse)) {
    throw new Error('Expected argument of type orderer.BroadcastResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_orderer_BroadcastResponse(buffer_arg) {
  return orderer_ab_pb.BroadcastResponse.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_orderer_DeliverResponse(arg) {
  if (!(arg instanceof orderer_ab_pb.DeliverResponse)) {
    throw new Error('Expected argument of type orderer.DeliverResponse');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_orderer_DeliverResponse(buffer_arg) {
  return orderer_ab_pb.DeliverResponse.deserializeBinary(new Uint8Array(buffer_arg));
}


var AtomicBroadcastService = exports.AtomicBroadcastService = {
  // broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
broadcast: {
    path: '/orderer.AtomicBroadcast/Broadcast',
    requestStream: true,
    responseStream: true,
    requestType: common_common_pb.Envelope,
    responseType: orderer_ab_pb.BroadcastResponse,
    requestSerialize: serialize_common_Envelope,
    requestDeserialize: deserialize_common_Envelope,
    responseSerialize: serialize_orderer_BroadcastResponse,
    responseDeserialize: deserialize_orderer_BroadcastResponse,
  },
  // deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
deliver: {
    path: '/orderer.AtomicBroadcast/Deliver',
    requestStream: true,
    responseStream: true,
    requestType: common_common_pb.Envelope,
    responseType: orderer_ab_pb.DeliverResponse,
    requestSerialize: serialize_common_Envelope,
    requestDeserialize: deserialize_common_Envelope,
    responseSerialize: serialize_orderer_DeliverResponse,
    responseDeserialize: deserialize_orderer_DeliverResponse,
  },
};

exports.AtomicBroadcastClient = grpc.makeGenericClientConstructor(AtomicBroadcastService);
