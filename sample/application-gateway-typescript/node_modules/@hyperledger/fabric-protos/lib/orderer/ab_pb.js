// source: orderer/ab.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.orderer.BroadcastResponse', null, global);
goog.exportSymbol('proto.orderer.DeliverResponse', null, global);
goog.exportSymbol('proto.orderer.DeliverResponse.TypeCase', null, global);
goog.exportSymbol('proto.orderer.SeekInfo', null, global);
goog.exportSymbol('proto.orderer.SeekInfo.SeekBehavior', null, global);
goog.exportSymbol('proto.orderer.SeekInfo.SeekErrorResponse', null, global);
goog.exportSymbol('proto.orderer.SeekNewest', null, global);
goog.exportSymbol('proto.orderer.SeekNextCommit', null, global);
goog.exportSymbol('proto.orderer.SeekOldest', null, global);
goog.exportSymbol('proto.orderer.SeekPosition', null, global);
goog.exportSymbol('proto.orderer.SeekPosition.TypeCase', null, global);
goog.exportSymbol('proto.orderer.SeekSpecified', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.BroadcastResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.BroadcastResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.BroadcastResponse.displayName = 'proto.orderer.BroadcastResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekNewest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SeekNewest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekNewest.displayName = 'proto.orderer.SeekNewest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekOldest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SeekOldest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekOldest.displayName = 'proto.orderer.SeekOldest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekSpecified = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SeekSpecified, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekSpecified.displayName = 'proto.orderer.SeekSpecified';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekNextCommit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SeekNextCommit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekNextCommit.displayName = 'proto.orderer.SeekNextCommit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.SeekPosition.oneofGroups_);
};
goog.inherits(proto.orderer.SeekPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekPosition.displayName = 'proto.orderer.SeekPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SeekInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SeekInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SeekInfo.displayName = 'proto.orderer.SeekInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.DeliverResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.DeliverResponse.oneofGroups_);
};
goog.inherits(proto.orderer.DeliverResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.DeliverResponse.displayName = 'proto.orderer.DeliverResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.BroadcastResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.BroadcastResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.BroadcastResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.BroadcastResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    info: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.BroadcastResponse}
 */
proto.orderer.BroadcastResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.BroadcastResponse;
  return proto.orderer.BroadcastResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.BroadcastResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.BroadcastResponse}
 */
proto.orderer.BroadcastResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.BroadcastResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.BroadcastResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.BroadcastResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.BroadcastResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional common.Status status = 1;
 * @return {!proto.common.Status}
 */
proto.orderer.BroadcastResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.Status} value
 * @return {!proto.orderer.BroadcastResponse} returns this
 */
proto.orderer.BroadcastResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string info = 2;
 * @return {string}
 */
proto.orderer.BroadcastResponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.BroadcastResponse} returns this
 */
proto.orderer.BroadcastResponse.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekNewest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekNewest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekNewest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekNewest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekNewest}
 */
proto.orderer.SeekNewest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekNewest;
  return proto.orderer.SeekNewest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekNewest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekNewest}
 */
proto.orderer.SeekNewest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekNewest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekNewest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekNewest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekNewest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekOldest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekOldest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekOldest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekOldest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekOldest}
 */
proto.orderer.SeekOldest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekOldest;
  return proto.orderer.SeekOldest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekOldest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekOldest}
 */
proto.orderer.SeekOldest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekOldest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekOldest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekOldest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekOldest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekSpecified.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekSpecified.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekSpecified} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekSpecified.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekSpecified}
 */
proto.orderer.SeekSpecified.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekSpecified;
  return proto.orderer.SeekSpecified.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekSpecified} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekSpecified}
 */
proto.orderer.SeekSpecified.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekSpecified.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekSpecified.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekSpecified} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekSpecified.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 number = 1;
 * @return {number}
 */
proto.orderer.SeekSpecified.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.SeekSpecified} returns this
 */
proto.orderer.SeekSpecified.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekNextCommit.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekNextCommit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekNextCommit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekNextCommit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekNextCommit}
 */
proto.orderer.SeekNextCommit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekNextCommit;
  return proto.orderer.SeekNextCommit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekNextCommit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekNextCommit}
 */
proto.orderer.SeekNextCommit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekNextCommit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekNextCommit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekNextCommit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekNextCommit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.SeekPosition.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.orderer.SeekPosition.TypeCase = {
  TYPE_NOT_SET: 0,
  NEWEST: 1,
  OLDEST: 2,
  SPECIFIED: 3,
  NEXT_COMMIT: 4
};

/**
 * @return {proto.orderer.SeekPosition.TypeCase}
 */
proto.orderer.SeekPosition.prototype.getTypeCase = function() {
  return /** @type {proto.orderer.SeekPosition.TypeCase} */(jspb.Message.computeOneofCase(this, proto.orderer.SeekPosition.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    newest: (f = msg.getNewest()) && proto.orderer.SeekNewest.toObject(includeInstance, f),
    oldest: (f = msg.getOldest()) && proto.orderer.SeekOldest.toObject(includeInstance, f),
    specified: (f = msg.getSpecified()) && proto.orderer.SeekSpecified.toObject(includeInstance, f),
    nextCommit: (f = msg.getNextCommit()) && proto.orderer.SeekNextCommit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekPosition}
 */
proto.orderer.SeekPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekPosition;
  return proto.orderer.SeekPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekPosition}
 */
proto.orderer.SeekPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.SeekNewest;
      reader.readMessage(value,proto.orderer.SeekNewest.deserializeBinaryFromReader);
      msg.setNewest(value);
      break;
    case 2:
      var value = new proto.orderer.SeekOldest;
      reader.readMessage(value,proto.orderer.SeekOldest.deserializeBinaryFromReader);
      msg.setOldest(value);
      break;
    case 3:
      var value = new proto.orderer.SeekSpecified;
      reader.readMessage(value,proto.orderer.SeekSpecified.deserializeBinaryFromReader);
      msg.setSpecified(value);
      break;
    case 4:
      var value = new proto.orderer.SeekNextCommit;
      reader.readMessage(value,proto.orderer.SeekNextCommit.deserializeBinaryFromReader);
      msg.setNextCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.SeekNewest.serializeBinaryToWriter
    );
  }
  f = message.getOldest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.orderer.SeekOldest.serializeBinaryToWriter
    );
  }
  f = message.getSpecified();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.orderer.SeekSpecified.serializeBinaryToWriter
    );
  }
  f = message.getNextCommit();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.orderer.SeekNextCommit.serializeBinaryToWriter
    );
  }
};


/**
 * optional SeekNewest newest = 1;
 * @return {?proto.orderer.SeekNewest}
 */
proto.orderer.SeekPosition.prototype.getNewest = function() {
  return /** @type{?proto.orderer.SeekNewest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekNewest, 1));
};


/**
 * @param {?proto.orderer.SeekNewest|undefined} value
 * @return {!proto.orderer.SeekPosition} returns this
*/
proto.orderer.SeekPosition.prototype.setNewest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.SeekPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekPosition} returns this
 */
proto.orderer.SeekPosition.prototype.clearNewest = function() {
  return this.setNewest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekPosition.prototype.hasNewest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SeekOldest oldest = 2;
 * @return {?proto.orderer.SeekOldest}
 */
proto.orderer.SeekPosition.prototype.getOldest = function() {
  return /** @type{?proto.orderer.SeekOldest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekOldest, 2));
};


/**
 * @param {?proto.orderer.SeekOldest|undefined} value
 * @return {!proto.orderer.SeekPosition} returns this
*/
proto.orderer.SeekPosition.prototype.setOldest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.orderer.SeekPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekPosition} returns this
 */
proto.orderer.SeekPosition.prototype.clearOldest = function() {
  return this.setOldest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekPosition.prototype.hasOldest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SeekSpecified specified = 3;
 * @return {?proto.orderer.SeekSpecified}
 */
proto.orderer.SeekPosition.prototype.getSpecified = function() {
  return /** @type{?proto.orderer.SeekSpecified} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekSpecified, 3));
};


/**
 * @param {?proto.orderer.SeekSpecified|undefined} value
 * @return {!proto.orderer.SeekPosition} returns this
*/
proto.orderer.SeekPosition.prototype.setSpecified = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.orderer.SeekPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekPosition} returns this
 */
proto.orderer.SeekPosition.prototype.clearSpecified = function() {
  return this.setSpecified(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekPosition.prototype.hasSpecified = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SeekNextCommit next_commit = 4;
 * @return {?proto.orderer.SeekNextCommit}
 */
proto.orderer.SeekPosition.prototype.getNextCommit = function() {
  return /** @type{?proto.orderer.SeekNextCommit} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekNextCommit, 4));
};


/**
 * @param {?proto.orderer.SeekNextCommit|undefined} value
 * @return {!proto.orderer.SeekPosition} returns this
*/
proto.orderer.SeekPosition.prototype.setNextCommit = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.orderer.SeekPosition.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekPosition} returns this
 */
proto.orderer.SeekPosition.prototype.clearNextCommit = function() {
  return this.setNextCommit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekPosition.prototype.hasNextCommit = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SeekInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SeekInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SeekInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: (f = msg.getStart()) && proto.orderer.SeekPosition.toObject(includeInstance, f),
    stop: (f = msg.getStop()) && proto.orderer.SeekPosition.toObject(includeInstance, f),
    behavior: jspb.Message.getFieldWithDefault(msg, 3, 0),
    errorResponse: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SeekInfo}
 */
proto.orderer.SeekInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SeekInfo;
  return proto.orderer.SeekInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SeekInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SeekInfo}
 */
proto.orderer.SeekInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.SeekPosition;
      reader.readMessage(value,proto.orderer.SeekPosition.deserializeBinaryFromReader);
      msg.setStart(value);
      break;
    case 2:
      var value = new proto.orderer.SeekPosition;
      reader.readMessage(value,proto.orderer.SeekPosition.deserializeBinaryFromReader);
      msg.setStop(value);
      break;
    case 3:
      var value = /** @type {!proto.orderer.SeekInfo.SeekBehavior} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 4:
      var value = /** @type {!proto.orderer.SeekInfo.SeekErrorResponse} */ (reader.readEnum());
      msg.setErrorResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SeekInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SeekInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SeekInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SeekInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.SeekPosition.serializeBinaryToWriter
    );
  }
  f = message.getStop();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.orderer.SeekPosition.serializeBinaryToWriter
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getErrorResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.orderer.SeekInfo.SeekBehavior = {
  BLOCK_UNTIL_READY: 0,
  FAIL_IF_NOT_READY: 1
};

/**
 * @enum {number}
 */
proto.orderer.SeekInfo.SeekErrorResponse = {
  STRICT: 0,
  BEST_EFFORT: 1
};

/**
 * optional SeekPosition start = 1;
 * @return {?proto.orderer.SeekPosition}
 */
proto.orderer.SeekInfo.prototype.getStart = function() {
  return /** @type{?proto.orderer.SeekPosition} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekPosition, 1));
};


/**
 * @param {?proto.orderer.SeekPosition|undefined} value
 * @return {!proto.orderer.SeekInfo} returns this
*/
proto.orderer.SeekInfo.prototype.setStart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekInfo} returns this
 */
proto.orderer.SeekInfo.prototype.clearStart = function() {
  return this.setStart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekInfo.prototype.hasStart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SeekPosition stop = 2;
 * @return {?proto.orderer.SeekPosition}
 */
proto.orderer.SeekInfo.prototype.getStop = function() {
  return /** @type{?proto.orderer.SeekPosition} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SeekPosition, 2));
};


/**
 * @param {?proto.orderer.SeekPosition|undefined} value
 * @return {!proto.orderer.SeekInfo} returns this
*/
proto.orderer.SeekInfo.prototype.setStop = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SeekInfo} returns this
 */
proto.orderer.SeekInfo.prototype.clearStop = function() {
  return this.setStop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SeekInfo.prototype.hasStop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SeekBehavior behavior = 3;
 * @return {!proto.orderer.SeekInfo.SeekBehavior}
 */
proto.orderer.SeekInfo.prototype.getBehavior = function() {
  return /** @type {!proto.orderer.SeekInfo.SeekBehavior} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.orderer.SeekInfo.SeekBehavior} value
 * @return {!proto.orderer.SeekInfo} returns this
 */
proto.orderer.SeekInfo.prototype.setBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SeekErrorResponse error_response = 4;
 * @return {!proto.orderer.SeekInfo.SeekErrorResponse}
 */
proto.orderer.SeekInfo.prototype.getErrorResponse = function() {
  return /** @type {!proto.orderer.SeekInfo.SeekErrorResponse} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.orderer.SeekInfo.SeekErrorResponse} value
 * @return {!proto.orderer.SeekInfo} returns this
 */
proto.orderer.SeekInfo.prototype.setErrorResponse = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.DeliverResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.orderer.DeliverResponse.TypeCase = {
  TYPE_NOT_SET: 0,
  STATUS: 1,
  BLOCK: 2
};

/**
 * @return {proto.orderer.DeliverResponse.TypeCase}
 */
proto.orderer.DeliverResponse.prototype.getTypeCase = function() {
  return /** @type {proto.orderer.DeliverResponse.TypeCase} */(jspb.Message.computeOneofCase(this, proto.orderer.DeliverResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.DeliverResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.DeliverResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.DeliverResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.DeliverResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: (f = msg.getBlock()) && common_common_pb.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.DeliverResponse}
 */
proto.orderer.DeliverResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.DeliverResponse;
  return proto.orderer.DeliverResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.DeliverResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.DeliverResponse}
 */
proto.orderer.DeliverResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = new common_common_pb.Block;
      reader.readMessage(value,common_common_pb.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.DeliverResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.DeliverResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.DeliverResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.DeliverResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.common.Status} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Block.serializeBinaryToWriter
    );
  }
};


/**
 * optional common.Status status = 1;
 * @return {!proto.common.Status}
 */
proto.orderer.DeliverResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.common.Status} value
 * @return {!proto.orderer.DeliverResponse} returns this
 */
proto.orderer.DeliverResponse.prototype.setStatus = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.orderer.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.orderer.DeliverResponse} returns this
 */
proto.orderer.DeliverResponse.prototype.clearStatus = function() {
  return jspb.Message.setOneofField(this, 1, proto.orderer.DeliverResponse.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.DeliverResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional common.Block block = 2;
 * @return {?proto.common.Block}
 */
proto.orderer.DeliverResponse.prototype.getBlock = function() {
  return /** @type{?proto.common.Block} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Block, 2));
};


/**
 * @param {?proto.common.Block|undefined} value
 * @return {!proto.orderer.DeliverResponse} returns this
*/
proto.orderer.DeliverResponse.prototype.setBlock = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.orderer.DeliverResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.DeliverResponse} returns this
 */
proto.orderer.DeliverResponse.prototype.clearBlock = function() {
  return this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.DeliverResponse.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.orderer);
