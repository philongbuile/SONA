// source: orderer/kafka.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.orderer.KafkaMessage', null, global);
goog.exportSymbol('proto.orderer.KafkaMessage.TypeCase', null, global);
goog.exportSymbol('proto.orderer.KafkaMessageConnect', null, global);
goog.exportSymbol('proto.orderer.KafkaMessageRegular', null, global);
goog.exportSymbol('proto.orderer.KafkaMessageRegular.Class', null, global);
goog.exportSymbol('proto.orderer.KafkaMessageTimeToCut', null, global);
goog.exportSymbol('proto.orderer.KafkaMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.KafkaMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.KafkaMessage.oneofGroups_);
};
goog.inherits(proto.orderer.KafkaMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.KafkaMessage.displayName = 'proto.orderer.KafkaMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.KafkaMessageRegular = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.KafkaMessageRegular, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.KafkaMessageRegular.displayName = 'proto.orderer.KafkaMessageRegular';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.KafkaMessageTimeToCut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.KafkaMessageTimeToCut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.KafkaMessageTimeToCut.displayName = 'proto.orderer.KafkaMessageTimeToCut';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.KafkaMessageConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.KafkaMessageConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.KafkaMessageConnect.displayName = 'proto.orderer.KafkaMessageConnect';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.KafkaMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.KafkaMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.KafkaMetadata.displayName = 'proto.orderer.KafkaMetadata';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.KafkaMessage.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.orderer.KafkaMessage.TypeCase = {
  TYPE_NOT_SET: 0,
  REGULAR: 1,
  TIME_TO_CUT: 2,
  CONNECT: 3
};

/**
 * @return {proto.orderer.KafkaMessage.TypeCase}
 */
proto.orderer.KafkaMessage.prototype.getTypeCase = function() {
  return /** @type {proto.orderer.KafkaMessage.TypeCase} */(jspb.Message.computeOneofCase(this, proto.orderer.KafkaMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.KafkaMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.KafkaMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.KafkaMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    regular: (f = msg.getRegular()) && proto.orderer.KafkaMessageRegular.toObject(includeInstance, f),
    timeToCut: (f = msg.getTimeToCut()) && proto.orderer.KafkaMessageTimeToCut.toObject(includeInstance, f),
    connect: (f = msg.getConnect()) && proto.orderer.KafkaMessageConnect.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.KafkaMessage}
 */
proto.orderer.KafkaMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.KafkaMessage;
  return proto.orderer.KafkaMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.KafkaMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.KafkaMessage}
 */
proto.orderer.KafkaMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.KafkaMessageRegular;
      reader.readMessage(value,proto.orderer.KafkaMessageRegular.deserializeBinaryFromReader);
      msg.setRegular(value);
      break;
    case 2:
      var value = new proto.orderer.KafkaMessageTimeToCut;
      reader.readMessage(value,proto.orderer.KafkaMessageTimeToCut.deserializeBinaryFromReader);
      msg.setTimeToCut(value);
      break;
    case 3:
      var value = new proto.orderer.KafkaMessageConnect;
      reader.readMessage(value,proto.orderer.KafkaMessageConnect.deserializeBinaryFromReader);
      msg.setConnect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.KafkaMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.KafkaMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegular();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.KafkaMessageRegular.serializeBinaryToWriter
    );
  }
  f = message.getTimeToCut();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.orderer.KafkaMessageTimeToCut.serializeBinaryToWriter
    );
  }
  f = message.getConnect();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.orderer.KafkaMessageConnect.serializeBinaryToWriter
    );
  }
};


/**
 * optional KafkaMessageRegular regular = 1;
 * @return {?proto.orderer.KafkaMessageRegular}
 */
proto.orderer.KafkaMessage.prototype.getRegular = function() {
  return /** @type{?proto.orderer.KafkaMessageRegular} */ (
    jspb.Message.getWrapperField(this, proto.orderer.KafkaMessageRegular, 1));
};


/**
 * @param {?proto.orderer.KafkaMessageRegular|undefined} value
 * @return {!proto.orderer.KafkaMessage} returns this
*/
proto.orderer.KafkaMessage.prototype.setRegular = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.KafkaMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.KafkaMessage} returns this
 */
proto.orderer.KafkaMessage.prototype.clearRegular = function() {
  return this.setRegular(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.KafkaMessage.prototype.hasRegular = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional KafkaMessageTimeToCut time_to_cut = 2;
 * @return {?proto.orderer.KafkaMessageTimeToCut}
 */
proto.orderer.KafkaMessage.prototype.getTimeToCut = function() {
  return /** @type{?proto.orderer.KafkaMessageTimeToCut} */ (
    jspb.Message.getWrapperField(this, proto.orderer.KafkaMessageTimeToCut, 2));
};


/**
 * @param {?proto.orderer.KafkaMessageTimeToCut|undefined} value
 * @return {!proto.orderer.KafkaMessage} returns this
*/
proto.orderer.KafkaMessage.prototype.setTimeToCut = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.orderer.KafkaMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.KafkaMessage} returns this
 */
proto.orderer.KafkaMessage.prototype.clearTimeToCut = function() {
  return this.setTimeToCut(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.KafkaMessage.prototype.hasTimeToCut = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional KafkaMessageConnect connect = 3;
 * @return {?proto.orderer.KafkaMessageConnect}
 */
proto.orderer.KafkaMessage.prototype.getConnect = function() {
  return /** @type{?proto.orderer.KafkaMessageConnect} */ (
    jspb.Message.getWrapperField(this, proto.orderer.KafkaMessageConnect, 3));
};


/**
 * @param {?proto.orderer.KafkaMessageConnect|undefined} value
 * @return {!proto.orderer.KafkaMessage} returns this
*/
proto.orderer.KafkaMessage.prototype.setConnect = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.orderer.KafkaMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.KafkaMessage} returns this
 */
proto.orderer.KafkaMessage.prototype.clearConnect = function() {
  return this.setConnect(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.KafkaMessage.prototype.hasConnect = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.KafkaMessageRegular.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.KafkaMessageRegular.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.KafkaMessageRegular} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageRegular.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64(),
    configSeq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_class: jspb.Message.getFieldWithDefault(msg, 3, 0),
    originalOffset: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.KafkaMessageRegular}
 */
proto.orderer.KafkaMessageRegular.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.KafkaMessageRegular;
  return proto.orderer.KafkaMessageRegular.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.KafkaMessageRegular} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.KafkaMessageRegular}
 */
proto.orderer.KafkaMessageRegular.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigSeq(value);
      break;
    case 3:
      var value = /** @type {!proto.orderer.KafkaMessageRegular.Class} */ (reader.readEnum());
      msg.setClass(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOriginalOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessageRegular.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.KafkaMessageRegular.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.KafkaMessageRegular} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageRegular.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getConfigSeq();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClass();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getOriginalOffset();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.orderer.KafkaMessageRegular.Class = {
  UNKNOWN: 0,
  NORMAL: 1,
  CONFIG: 2
};

/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.KafkaMessageRegular.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.orderer.KafkaMessageRegular.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessageRegular.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.KafkaMessageRegular} returns this
 */
proto.orderer.KafkaMessageRegular.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 config_seq = 2;
 * @return {number}
 */
proto.orderer.KafkaMessageRegular.prototype.getConfigSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMessageRegular} returns this
 */
proto.orderer.KafkaMessageRegular.prototype.setConfigSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Class class = 3;
 * @return {!proto.orderer.KafkaMessageRegular.Class}
 */
proto.orderer.KafkaMessageRegular.prototype.getClass = function() {
  return /** @type {!proto.orderer.KafkaMessageRegular.Class} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.orderer.KafkaMessageRegular.Class} value
 * @return {!proto.orderer.KafkaMessageRegular} returns this
 */
proto.orderer.KafkaMessageRegular.prototype.setClass = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 original_offset = 4;
 * @return {number}
 */
proto.orderer.KafkaMessageRegular.prototype.getOriginalOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMessageRegular} returns this
 */
proto.orderer.KafkaMessageRegular.prototype.setOriginalOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.KafkaMessageTimeToCut.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.KafkaMessageTimeToCut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.KafkaMessageTimeToCut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageTimeToCut.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockNumber: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.KafkaMessageTimeToCut}
 */
proto.orderer.KafkaMessageTimeToCut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.KafkaMessageTimeToCut;
  return proto.orderer.KafkaMessageTimeToCut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.KafkaMessageTimeToCut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.KafkaMessageTimeToCut}
 */
proto.orderer.KafkaMessageTimeToCut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessageTimeToCut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.KafkaMessageTimeToCut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.KafkaMessageTimeToCut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageTimeToCut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockNumber();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 block_number = 1;
 * @return {number}
 */
proto.orderer.KafkaMessageTimeToCut.prototype.getBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMessageTimeToCut} returns this
 */
proto.orderer.KafkaMessageTimeToCut.prototype.setBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.KafkaMessageConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.KafkaMessageConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.KafkaMessageConnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.KafkaMessageConnect}
 */
proto.orderer.KafkaMessageConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.KafkaMessageConnect;
  return proto.orderer.KafkaMessageConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.KafkaMessageConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.KafkaMessageConnect}
 */
proto.orderer.KafkaMessageConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessageConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.KafkaMessageConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.KafkaMessageConnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMessageConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.KafkaMessageConnect.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.orderer.KafkaMessageConnect.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMessageConnect.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.KafkaMessageConnect} returns this
 */
proto.orderer.KafkaMessageConnect.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.KafkaMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.KafkaMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.KafkaMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastOffsetPersisted: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lastOriginalOffsetProcessed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastResubmittedConfigOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.KafkaMetadata}
 */
proto.orderer.KafkaMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.KafkaMetadata;
  return proto.orderer.KafkaMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.KafkaMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.KafkaMetadata}
 */
proto.orderer.KafkaMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastOffsetPersisted(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastOriginalOffsetProcessed(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastResubmittedConfigOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.KafkaMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.KafkaMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.KafkaMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.KafkaMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastOffsetPersisted();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLastOriginalOffsetProcessed();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLastResubmittedConfigOffset();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 last_offset_persisted = 1;
 * @return {number}
 */
proto.orderer.KafkaMetadata.prototype.getLastOffsetPersisted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMetadata} returns this
 */
proto.orderer.KafkaMetadata.prototype.setLastOffsetPersisted = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 last_original_offset_processed = 2;
 * @return {number}
 */
proto.orderer.KafkaMetadata.prototype.getLastOriginalOffsetProcessed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMetadata} returns this
 */
proto.orderer.KafkaMetadata.prototype.setLastOriginalOffsetProcessed = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 last_resubmitted_config_offset = 3;
 * @return {number}
 */
proto.orderer.KafkaMetadata.prototype.getLastResubmittedConfigOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.KafkaMetadata} returns this
 */
proto.orderer.KafkaMetadata.prototype.setLastResubmittedConfigOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.orderer);
