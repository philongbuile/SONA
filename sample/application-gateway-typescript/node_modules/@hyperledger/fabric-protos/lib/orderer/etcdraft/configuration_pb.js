// source: orderer/etcdraft/configuration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.etcdraft.ConfigMetadata', null, global);
goog.exportSymbol('proto.etcdraft.Consenter', null, global);
goog.exportSymbol('proto.etcdraft.Options', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.etcdraft.ConfigMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.etcdraft.ConfigMetadata.repeatedFields_, null);
};
goog.inherits(proto.etcdraft.ConfigMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.etcdraft.ConfigMetadata.displayName = 'proto.etcdraft.ConfigMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.etcdraft.Consenter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.etcdraft.Consenter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.etcdraft.Consenter.displayName = 'proto.etcdraft.Consenter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.etcdraft.Options = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.etcdraft.Options, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.etcdraft.Options.displayName = 'proto.etcdraft.Options';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.etcdraft.ConfigMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.etcdraft.ConfigMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.etcdraft.ConfigMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.etcdraft.ConfigMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.ConfigMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    consentersList: jspb.Message.toObjectList(msg.getConsentersList(),
    proto.etcdraft.Consenter.toObject, includeInstance),
    options: (f = msg.getOptions()) && proto.etcdraft.Options.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.etcdraft.ConfigMetadata}
 */
proto.etcdraft.ConfigMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.etcdraft.ConfigMetadata;
  return proto.etcdraft.ConfigMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.etcdraft.ConfigMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.etcdraft.ConfigMetadata}
 */
proto.etcdraft.ConfigMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.etcdraft.Consenter;
      reader.readMessage(value,proto.etcdraft.Consenter.deserializeBinaryFromReader);
      msg.addConsenters(value);
      break;
    case 2:
      var value = new proto.etcdraft.Options;
      reader.readMessage(value,proto.etcdraft.Options.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.etcdraft.ConfigMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.etcdraft.ConfigMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.etcdraft.ConfigMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.ConfigMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsentersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.etcdraft.Consenter.serializeBinaryToWriter
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.etcdraft.Options.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Consenter consenters = 1;
 * @return {!Array<!proto.etcdraft.Consenter>}
 */
proto.etcdraft.ConfigMetadata.prototype.getConsentersList = function() {
  return /** @type{!Array<!proto.etcdraft.Consenter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.etcdraft.Consenter, 1));
};


/**
 * @param {!Array<!proto.etcdraft.Consenter>} value
 * @return {!proto.etcdraft.ConfigMetadata} returns this
*/
proto.etcdraft.ConfigMetadata.prototype.setConsentersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.etcdraft.Consenter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.etcdraft.Consenter}
 */
proto.etcdraft.ConfigMetadata.prototype.addConsenters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.etcdraft.Consenter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.etcdraft.ConfigMetadata} returns this
 */
proto.etcdraft.ConfigMetadata.prototype.clearConsentersList = function() {
  return this.setConsentersList([]);
};


/**
 * optional Options options = 2;
 * @return {?proto.etcdraft.Options}
 */
proto.etcdraft.ConfigMetadata.prototype.getOptions = function() {
  return /** @type{?proto.etcdraft.Options} */ (
    jspb.Message.getWrapperField(this, proto.etcdraft.Options, 2));
};


/**
 * @param {?proto.etcdraft.Options|undefined} value
 * @return {!proto.etcdraft.ConfigMetadata} returns this
*/
proto.etcdraft.ConfigMetadata.prototype.setOptions = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.etcdraft.ConfigMetadata} returns this
 */
proto.etcdraft.ConfigMetadata.prototype.clearOptions = function() {
  return this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.etcdraft.ConfigMetadata.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.etcdraft.Consenter.prototype.toObject = function(opt_includeInstance) {
  return proto.etcdraft.Consenter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.etcdraft.Consenter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.Consenter.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clientTlsCert: msg.getClientTlsCert_asB64(),
    serverTlsCert: msg.getServerTlsCert_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.etcdraft.Consenter}
 */
proto.etcdraft.Consenter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.etcdraft.Consenter;
  return proto.etcdraft.Consenter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.etcdraft.Consenter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.etcdraft.Consenter}
 */
proto.etcdraft.Consenter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientTlsCert(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerTlsCert(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.etcdraft.Consenter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.etcdraft.Consenter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.etcdraft.Consenter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.Consenter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getClientTlsCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getServerTlsCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.etcdraft.Consenter.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.etcdraft.Consenter} returns this
 */
proto.etcdraft.Consenter.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.etcdraft.Consenter.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.etcdraft.Consenter} returns this
 */
proto.etcdraft.Consenter.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes client_tls_cert = 3;
 * @return {!(string|Uint8Array)}
 */
proto.etcdraft.Consenter.prototype.getClientTlsCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes client_tls_cert = 3;
 * This is a type-conversion wrapper around `getClientTlsCert()`
 * @return {string}
 */
proto.etcdraft.Consenter.prototype.getClientTlsCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientTlsCert()));
};


/**
 * optional bytes client_tls_cert = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientTlsCert()`
 * @return {!Uint8Array}
 */
proto.etcdraft.Consenter.prototype.getClientTlsCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientTlsCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.etcdraft.Consenter} returns this
 */
proto.etcdraft.Consenter.prototype.setClientTlsCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes server_tls_cert = 4;
 * @return {!(string|Uint8Array)}
 */
proto.etcdraft.Consenter.prototype.getServerTlsCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes server_tls_cert = 4;
 * This is a type-conversion wrapper around `getServerTlsCert()`
 * @return {string}
 */
proto.etcdraft.Consenter.prototype.getServerTlsCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerTlsCert()));
};


/**
 * optional bytes server_tls_cert = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerTlsCert()`
 * @return {!Uint8Array}
 */
proto.etcdraft.Consenter.prototype.getServerTlsCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerTlsCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.etcdraft.Consenter} returns this
 */
proto.etcdraft.Consenter.prototype.setServerTlsCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.etcdraft.Options.prototype.toObject = function(opt_includeInstance) {
  return proto.etcdraft.Options.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.etcdraft.Options} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.Options.toObject = function(includeInstance, msg) {
  var f, obj = {
    tickInterval: jspb.Message.getFieldWithDefault(msg, 1, ""),
    electionTick: jspb.Message.getFieldWithDefault(msg, 2, 0),
    heartbeatTick: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxInflightBlocks: jspb.Message.getFieldWithDefault(msg, 4, 0),
    snapshotIntervalSize: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.etcdraft.Options}
 */
proto.etcdraft.Options.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.etcdraft.Options;
  return proto.etcdraft.Options.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.etcdraft.Options} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.etcdraft.Options}
 */
proto.etcdraft.Options.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTickInterval(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setElectionTick(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeartbeatTick(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxInflightBlocks(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSnapshotIntervalSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.etcdraft.Options.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.etcdraft.Options.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.etcdraft.Options} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.etcdraft.Options.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTickInterval();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getElectionTick();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeartbeatTick();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxInflightBlocks();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSnapshotIntervalSize();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string tick_interval = 1;
 * @return {string}
 */
proto.etcdraft.Options.prototype.getTickInterval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.etcdraft.Options} returns this
 */
proto.etcdraft.Options.prototype.setTickInterval = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 election_tick = 2;
 * @return {number}
 */
proto.etcdraft.Options.prototype.getElectionTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.etcdraft.Options} returns this
 */
proto.etcdraft.Options.prototype.setElectionTick = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 heartbeat_tick = 3;
 * @return {number}
 */
proto.etcdraft.Options.prototype.getHeartbeatTick = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.etcdraft.Options} returns this
 */
proto.etcdraft.Options.prototype.setHeartbeatTick = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_inflight_blocks = 4;
 * @return {number}
 */
proto.etcdraft.Options.prototype.getMaxInflightBlocks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.etcdraft.Options} returns this
 */
proto.etcdraft.Options.prototype.setMaxInflightBlocks = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 snapshot_interval_size = 5;
 * @return {number}
 */
proto.etcdraft.Options.prototype.getSnapshotIntervalSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.etcdraft.Options} returns this
 */
proto.etcdraft.Options.prototype.setSnapshotIntervalSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.etcdraft);
