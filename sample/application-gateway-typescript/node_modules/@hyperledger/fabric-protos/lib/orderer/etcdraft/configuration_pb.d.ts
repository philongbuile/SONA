// package: etcdraft
// file: orderer/etcdraft/configuration.proto

import * as jspb from "google-protobuf";

export class ConfigMetadata extends jspb.Message {
  clearConsentersList(): void;
  getConsentersList(): Array<Consenter>;
  setConsentersList(value: Array<Consenter>): void;
  addConsenters(value?: Consenter, index?: number): Consenter;

  hasOptions(): boolean;
  clearOptions(): void;
  getOptions(): Options | undefined;
  setOptions(value?: Options): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConfigMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: ConfigMetadata): ConfigMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConfigMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConfigMetadata;
  static deserializeBinaryFromReader(message: ConfigMetadata, reader: jspb.BinaryReader): ConfigMetadata;
}

export namespace ConfigMetadata {
  export type AsObject = {
    consentersList: Array<Consenter.AsObject>,
    options?: Options.AsObject,
  }
}

export class Consenter extends jspb.Message {
  getHost(): string;
  setHost(value: string): void;

  getPort(): number;
  setPort(value: number): void;

  getClientTlsCert(): Uint8Array | string;
  getClientTlsCert_asU8(): Uint8Array;
  getClientTlsCert_asB64(): string;
  setClientTlsCert(value: Uint8Array | string): void;

  getServerTlsCert(): Uint8Array | string;
  getServerTlsCert_asU8(): Uint8Array;
  getServerTlsCert_asB64(): string;
  setServerTlsCert(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Consenter.AsObject;
  static toObject(includeInstance: boolean, msg: Consenter): Consenter.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Consenter, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Consenter;
  static deserializeBinaryFromReader(message: Consenter, reader: jspb.BinaryReader): Consenter;
}

export namespace Consenter {
  export type AsObject = {
    host: string,
    port: number,
    clientTlsCert: Uint8Array | string,
    serverTlsCert: Uint8Array | string,
  }
}

export class Options extends jspb.Message {
  getTickInterval(): string;
  setTickInterval(value: string): void;

  getElectionTick(): number;
  setElectionTick(value: number): void;

  getHeartbeatTick(): number;
  setHeartbeatTick(value: number): void;

  getMaxInflightBlocks(): number;
  setMaxInflightBlocks(value: number): void;

  getSnapshotIntervalSize(): number;
  setSnapshotIntervalSize(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Options.AsObject;
  static toObject(includeInstance: boolean, msg: Options): Options.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Options, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Options;
  static deserializeBinaryFromReader(message: Options, reader: jspb.BinaryReader): Options;
}

export namespace Options {
  export type AsObject = {
    tickInterval: string,
    electionTick: number,
    heartbeatTick: number,
    maxInflightBlocks: number,
    snapshotIntervalSize: number,
  }
}

