// package: orderer
// file: orderer/cluster.proto

import * as jspb from "google-protobuf";
import * as common_common_pb from "../common/common_pb";

export class StepRequest extends jspb.Message {
  hasConsensusRequest(): boolean;
  clearConsensusRequest(): void;
  getConsensusRequest(): ConsensusRequest | undefined;
  setConsensusRequest(value?: ConsensusRequest): void;

  hasSubmitRequest(): boolean;
  clearSubmitRequest(): void;
  getSubmitRequest(): SubmitRequest | undefined;
  setSubmitRequest(value?: SubmitRequest): void;

  getPayloadCase(): StepRequest.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StepRequest.AsObject;
  static toObject(includeInstance: boolean, msg: StepRequest): StepRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StepRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StepRequest;
  static deserializeBinaryFromReader(message: StepRequest, reader: jspb.BinaryReader): StepRequest;
}

export namespace StepRequest {
  export type AsObject = {
    consensusRequest?: ConsensusRequest.AsObject,
    submitRequest?: SubmitRequest.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    CONSENSUS_REQUEST = 1,
    SUBMIT_REQUEST = 2,
  }
}

export class StepResponse extends jspb.Message {
  hasSubmitRes(): boolean;
  clearSubmitRes(): void;
  getSubmitRes(): SubmitResponse | undefined;
  setSubmitRes(value?: SubmitResponse): void;

  getPayloadCase(): StepResponse.PayloadCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): StepResponse.AsObject;
  static toObject(includeInstance: boolean, msg: StepResponse): StepResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: StepResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): StepResponse;
  static deserializeBinaryFromReader(message: StepResponse, reader: jspb.BinaryReader): StepResponse;
}

export namespace StepResponse {
  export type AsObject = {
    submitRes?: SubmitResponse.AsObject,
  }

  export enum PayloadCase {
    PAYLOAD_NOT_SET = 0,
    SUBMIT_RES = 1,
  }
}

export class ConsensusRequest extends jspb.Message {
  getChannel(): string;
  setChannel(value: string): void;

  getPayload(): Uint8Array | string;
  getPayload_asU8(): Uint8Array;
  getPayload_asB64(): string;
  setPayload(value: Uint8Array | string): void;

  getMetadata(): Uint8Array | string;
  getMetadata_asU8(): Uint8Array;
  getMetadata_asB64(): string;
  setMetadata(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConsensusRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ConsensusRequest): ConsensusRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConsensusRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConsensusRequest;
  static deserializeBinaryFromReader(message: ConsensusRequest, reader: jspb.BinaryReader): ConsensusRequest;
}

export namespace ConsensusRequest {
  export type AsObject = {
    channel: string,
    payload: Uint8Array | string,
    metadata: Uint8Array | string,
  }
}

export class SubmitRequest extends jspb.Message {
  getChannel(): string;
  setChannel(value: string): void;

  getLastValidationSeq(): number;
  setLastValidationSeq(value: number): void;

  hasPayload(): boolean;
  clearPayload(): void;
  getPayload(): common_common_pb.Envelope | undefined;
  setPayload(value?: common_common_pb.Envelope): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitRequest.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitRequest): SubmitRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmitRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitRequest;
  static deserializeBinaryFromReader(message: SubmitRequest, reader: jspb.BinaryReader): SubmitRequest;
}

export namespace SubmitRequest {
  export type AsObject = {
    channel: string,
    lastValidationSeq: number,
    payload?: common_common_pb.Envelope.AsObject,
  }
}

export class SubmitResponse extends jspb.Message {
  getChannel(): string;
  setChannel(value: string): void;

  getStatus(): common_common_pb.StatusMap[keyof common_common_pb.StatusMap];
  setStatus(value: common_common_pb.StatusMap[keyof common_common_pb.StatusMap]): void;

  getInfo(): string;
  setInfo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubmitResponse.AsObject;
  static toObject(includeInstance: boolean, msg: SubmitResponse): SubmitResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubmitResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubmitResponse;
  static deserializeBinaryFromReader(message: SubmitResponse, reader: jspb.BinaryReader): SubmitResponse;
}

export namespace SubmitResponse {
  export type AsObject = {
    channel: string,
    status: common_common_pb.StatusMap[keyof common_common_pb.StatusMap],
    info: string,
  }
}

