// source: orderer/cluster.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.orderer.ConsensusRequest', null, global);
goog.exportSymbol('proto.orderer.StepRequest', null, global);
goog.exportSymbol('proto.orderer.StepRequest.PayloadCase', null, global);
goog.exportSymbol('proto.orderer.StepResponse', null, global);
goog.exportSymbol('proto.orderer.StepResponse.PayloadCase', null, global);
goog.exportSymbol('proto.orderer.SubmitRequest', null, global);
goog.exportSymbol('proto.orderer.SubmitResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.StepRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.StepRequest.oneofGroups_);
};
goog.inherits(proto.orderer.StepRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.StepRequest.displayName = 'proto.orderer.StepRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.StepResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.orderer.StepResponse.oneofGroups_);
};
goog.inherits(proto.orderer.StepResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.StepResponse.displayName = 'proto.orderer.StepResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.ConsensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.ConsensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.ConsensusRequest.displayName = 'proto.orderer.ConsensusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SubmitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SubmitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SubmitRequest.displayName = 'proto.orderer.SubmitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.orderer.SubmitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.orderer.SubmitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.orderer.SubmitResponse.displayName = 'proto.orderer.SubmitResponse';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.StepRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.orderer.StepRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CONSENSUS_REQUEST: 1,
  SUBMIT_REQUEST: 2
};

/**
 * @return {proto.orderer.StepRequest.PayloadCase}
 */
proto.orderer.StepRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.orderer.StepRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.orderer.StepRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.StepRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.StepRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.StepRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.StepRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    consensusRequest: (f = msg.getConsensusRequest()) && proto.orderer.ConsensusRequest.toObject(includeInstance, f),
    submitRequest: (f = msg.getSubmitRequest()) && proto.orderer.SubmitRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.StepRequest}
 */
proto.orderer.StepRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.StepRequest;
  return proto.orderer.StepRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.StepRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.StepRequest}
 */
proto.orderer.StepRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.ConsensusRequest;
      reader.readMessage(value,proto.orderer.ConsensusRequest.deserializeBinaryFromReader);
      msg.setConsensusRequest(value);
      break;
    case 2:
      var value = new proto.orderer.SubmitRequest;
      reader.readMessage(value,proto.orderer.SubmitRequest.deserializeBinaryFromReader);
      msg.setSubmitRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.StepRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.StepRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.StepRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.StepRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsensusRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.ConsensusRequest.serializeBinaryToWriter
    );
  }
  f = message.getSubmitRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.orderer.SubmitRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConsensusRequest consensus_request = 1;
 * @return {?proto.orderer.ConsensusRequest}
 */
proto.orderer.StepRequest.prototype.getConsensusRequest = function() {
  return /** @type{?proto.orderer.ConsensusRequest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.ConsensusRequest, 1));
};


/**
 * @param {?proto.orderer.ConsensusRequest|undefined} value
 * @return {!proto.orderer.StepRequest} returns this
*/
proto.orderer.StepRequest.prototype.setConsensusRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.StepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.StepRequest} returns this
 */
proto.orderer.StepRequest.prototype.clearConsensusRequest = function() {
  return this.setConsensusRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.StepRequest.prototype.hasConsensusRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SubmitRequest submit_request = 2;
 * @return {?proto.orderer.SubmitRequest}
 */
proto.orderer.StepRequest.prototype.getSubmitRequest = function() {
  return /** @type{?proto.orderer.SubmitRequest} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SubmitRequest, 2));
};


/**
 * @param {?proto.orderer.SubmitRequest|undefined} value
 * @return {!proto.orderer.StepRequest} returns this
*/
proto.orderer.StepRequest.prototype.setSubmitRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.orderer.StepRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.StepRequest} returns this
 */
proto.orderer.StepRequest.prototype.clearSubmitRequest = function() {
  return this.setSubmitRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.StepRequest.prototype.hasSubmitRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.orderer.StepResponse.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.orderer.StepResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SUBMIT_RES: 1
};

/**
 * @return {proto.orderer.StepResponse.PayloadCase}
 */
proto.orderer.StepResponse.prototype.getPayloadCase = function() {
  return /** @type {proto.orderer.StepResponse.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.orderer.StepResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.StepResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.StepResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.StepResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.StepResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    submitRes: (f = msg.getSubmitRes()) && proto.orderer.SubmitResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.StepResponse}
 */
proto.orderer.StepResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.StepResponse;
  return proto.orderer.StepResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.StepResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.StepResponse}
 */
proto.orderer.StepResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.orderer.SubmitResponse;
      reader.readMessage(value,proto.orderer.SubmitResponse.deserializeBinaryFromReader);
      msg.setSubmitRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.StepResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.StepResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.StepResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.StepResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubmitRes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.orderer.SubmitResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional SubmitResponse submit_res = 1;
 * @return {?proto.orderer.SubmitResponse}
 */
proto.orderer.StepResponse.prototype.getSubmitRes = function() {
  return /** @type{?proto.orderer.SubmitResponse} */ (
    jspb.Message.getWrapperField(this, proto.orderer.SubmitResponse, 1));
};


/**
 * @param {?proto.orderer.SubmitResponse|undefined} value
 * @return {!proto.orderer.StepResponse} returns this
*/
proto.orderer.StepResponse.prototype.setSubmitRes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.orderer.StepResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.StepResponse} returns this
 */
proto.orderer.StepResponse.prototype.clearSubmitRes = function() {
  return this.setSubmitRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.StepResponse.prototype.hasSubmitRes = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.ConsensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.ConsensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.ConsensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ConsensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payload: msg.getPayload_asB64(),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.ConsensusRequest}
 */
proto.orderer.ConsensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.ConsensusRequest;
  return proto.orderer.ConsensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.ConsensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.ConsensusRequest}
 */
proto.orderer.ConsensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.ConsensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.ConsensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.ConsensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.ConsensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.orderer.ConsensusRequest.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.ConsensusRequest} returns this
 */
proto.orderer.ConsensusRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.ConsensusRequest.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.orderer.ConsensusRequest.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.orderer.ConsensusRequest.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.ConsensusRequest} returns this
 */
proto.orderer.ConsensusRequest.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.orderer.ConsensusRequest.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.orderer.ConsensusRequest.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.orderer.ConsensusRequest.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.orderer.ConsensusRequest} returns this
 */
proto.orderer.ConsensusRequest.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SubmitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SubmitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SubmitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SubmitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lastValidationSeq: jspb.Message.getFieldWithDefault(msg, 2, 0),
    payload: (f = msg.getPayload()) && common_common_pb.Envelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SubmitRequest}
 */
proto.orderer.SubmitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SubmitRequest;
  return proto.orderer.SubmitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SubmitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SubmitRequest}
 */
proto.orderer.SubmitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastValidationSeq(value);
      break;
    case 3:
      var value = new common_common_pb.Envelope;
      reader.readMessage(value,common_common_pb.Envelope.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SubmitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SubmitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SubmitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SubmitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLastValidationSeq();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_common_pb.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.orderer.SubmitRequest.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.SubmitRequest} returns this
 */
proto.orderer.SubmitRequest.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 last_validation_seq = 2;
 * @return {number}
 */
proto.orderer.SubmitRequest.prototype.getLastValidationSeq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.orderer.SubmitRequest} returns this
 */
proto.orderer.SubmitRequest.prototype.setLastValidationSeq = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional common.Envelope payload = 3;
 * @return {?proto.common.Envelope}
 */
proto.orderer.SubmitRequest.prototype.getPayload = function() {
  return /** @type{?proto.common.Envelope} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Envelope, 3));
};


/**
 * @param {?proto.common.Envelope|undefined} value
 * @return {!proto.orderer.SubmitRequest} returns this
*/
proto.orderer.SubmitRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.orderer.SubmitRequest} returns this
 */
proto.orderer.SubmitRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.orderer.SubmitRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.orderer.SubmitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.orderer.SubmitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.orderer.SubmitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SubmitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    channel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    info: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.orderer.SubmitResponse}
 */
proto.orderer.SubmitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.orderer.SubmitResponse;
  return proto.orderer.SubmitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.orderer.SubmitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.orderer.SubmitResponse}
 */
proto.orderer.SubmitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 2:
      var value = /** @type {!proto.common.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.orderer.SubmitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.orderer.SubmitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.orderer.SubmitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.orderer.SubmitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getInfo();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string channel = 1;
 * @return {string}
 */
proto.orderer.SubmitResponse.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.SubmitResponse} returns this
 */
proto.orderer.SubmitResponse.prototype.setChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional common.Status status = 2;
 * @return {!proto.common.Status}
 */
proto.orderer.SubmitResponse.prototype.getStatus = function() {
  return /** @type {!proto.common.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.common.Status} value
 * @return {!proto.orderer.SubmitResponse} returns this
 */
proto.orderer.SubmitResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string info = 3;
 * @return {string}
 */
proto.orderer.SubmitResponse.prototype.getInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.orderer.SubmitResponse} returns this
 */
proto.orderer.SubmitResponse.prototype.setInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.orderer);
