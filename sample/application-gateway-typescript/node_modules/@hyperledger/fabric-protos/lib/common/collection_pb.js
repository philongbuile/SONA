// source: common/collection.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_policies_pb = require('../common/policies_pb.js');
goog.object.extend(proto, common_policies_pb);
goog.exportSymbol('proto.common.CollectionConfig', null, global);
goog.exportSymbol('proto.common.CollectionConfig.PayloadCase', null, global);
goog.exportSymbol('proto.common.CollectionConfigPackage', null, global);
goog.exportSymbol('proto.common.CollectionPolicyConfig', null, global);
goog.exportSymbol('proto.common.CollectionPolicyConfig.PayloadCase', null, global);
goog.exportSymbol('proto.common.StaticCollectionConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CollectionConfigPackage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.CollectionConfigPackage.repeatedFields_, null);
};
goog.inherits(proto.common.CollectionConfigPackage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CollectionConfigPackage.displayName = 'proto.common.CollectionConfigPackage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CollectionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.common.CollectionConfig.oneofGroups_);
};
goog.inherits(proto.common.CollectionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CollectionConfig.displayName = 'proto.common.CollectionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.StaticCollectionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.StaticCollectionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.StaticCollectionConfig.displayName = 'proto.common.StaticCollectionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.CollectionPolicyConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.common.CollectionPolicyConfig.oneofGroups_);
};
goog.inherits(proto.common.CollectionPolicyConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.CollectionPolicyConfig.displayName = 'proto.common.CollectionPolicyConfig';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.CollectionConfigPackage.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CollectionConfigPackage.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CollectionConfigPackage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CollectionConfigPackage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionConfigPackage.toObject = function(includeInstance, msg) {
  var f, obj = {
    configList: jspb.Message.toObjectList(msg.getConfigList(),
    proto.common.CollectionConfig.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CollectionConfigPackage}
 */
proto.common.CollectionConfigPackage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CollectionConfigPackage;
  return proto.common.CollectionConfigPackage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CollectionConfigPackage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CollectionConfigPackage}
 */
proto.common.CollectionConfigPackage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.CollectionConfig;
      reader.readMessage(value,proto.common.CollectionConfig.deserializeBinaryFromReader);
      msg.addConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CollectionConfigPackage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CollectionConfigPackage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CollectionConfigPackage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionConfigPackage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.common.CollectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CollectionConfig config = 1;
 * @return {!Array<!proto.common.CollectionConfig>}
 */
proto.common.CollectionConfigPackage.prototype.getConfigList = function() {
  return /** @type{!Array<!proto.common.CollectionConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.CollectionConfig, 1));
};


/**
 * @param {!Array<!proto.common.CollectionConfig>} value
 * @return {!proto.common.CollectionConfigPackage} returns this
*/
proto.common.CollectionConfigPackage.prototype.setConfigList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.common.CollectionConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.CollectionConfig}
 */
proto.common.CollectionConfigPackage.prototype.addConfig = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.common.CollectionConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.CollectionConfigPackage} returns this
 */
proto.common.CollectionConfigPackage.prototype.clearConfigList = function() {
  return this.setConfigList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.common.CollectionConfig.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.common.CollectionConfig.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  STATIC_COLLECTION_CONFIG: 1
};

/**
 * @return {proto.common.CollectionConfig.PayloadCase}
 */
proto.common.CollectionConfig.prototype.getPayloadCase = function() {
  return /** @type {proto.common.CollectionConfig.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.common.CollectionConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CollectionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CollectionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CollectionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    staticCollectionConfig: (f = msg.getStaticCollectionConfig()) && proto.common.StaticCollectionConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CollectionConfig}
 */
proto.common.CollectionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CollectionConfig;
  return proto.common.CollectionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CollectionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CollectionConfig}
 */
proto.common.CollectionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.StaticCollectionConfig;
      reader.readMessage(value,proto.common.StaticCollectionConfig.deserializeBinaryFromReader);
      msg.setStaticCollectionConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CollectionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CollectionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CollectionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStaticCollectionConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.StaticCollectionConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional StaticCollectionConfig static_collection_config = 1;
 * @return {?proto.common.StaticCollectionConfig}
 */
proto.common.CollectionConfig.prototype.getStaticCollectionConfig = function() {
  return /** @type{?proto.common.StaticCollectionConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.StaticCollectionConfig, 1));
};


/**
 * @param {?proto.common.StaticCollectionConfig|undefined} value
 * @return {!proto.common.CollectionConfig} returns this
*/
proto.common.CollectionConfig.prototype.setStaticCollectionConfig = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.common.CollectionConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.CollectionConfig} returns this
 */
proto.common.CollectionConfig.prototype.clearStaticCollectionConfig = function() {
  return this.setStaticCollectionConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.CollectionConfig.prototype.hasStaticCollectionConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.StaticCollectionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.StaticCollectionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.StaticCollectionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StaticCollectionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    memberOrgsPolicy: (f = msg.getMemberOrgsPolicy()) && proto.common.CollectionPolicyConfig.toObject(includeInstance, f),
    requiredPeerCount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maximumPeerCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockToLive: jspb.Message.getFieldWithDefault(msg, 5, 0),
    memberOnlyRead: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    memberOnlyWrite: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    endorsementPolicy: (f = msg.getEndorsementPolicy()) && common_policies_pb.ApplicationPolicy.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.StaticCollectionConfig}
 */
proto.common.StaticCollectionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.StaticCollectionConfig;
  return proto.common.StaticCollectionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.StaticCollectionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.StaticCollectionConfig}
 */
proto.common.StaticCollectionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.common.CollectionPolicyConfig;
      reader.readMessage(value,proto.common.CollectionPolicyConfig.deserializeBinaryFromReader);
      msg.setMemberOrgsPolicy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequiredPeerCount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaximumPeerCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockToLive(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMemberOnlyRead(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMemberOnlyWrite(value);
      break;
    case 8:
      var value = new common_policies_pb.ApplicationPolicy;
      reader.readMessage(value,common_policies_pb.ApplicationPolicy.deserializeBinaryFromReader);
      msg.setEndorsementPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.StaticCollectionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.StaticCollectionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.StaticCollectionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.StaticCollectionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMemberOrgsPolicy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.CollectionPolicyConfig.serializeBinaryToWriter
    );
  }
  f = message.getRequiredPeerCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaximumPeerCount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBlockToLive();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getMemberOnlyRead();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getMemberOnlyWrite();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getEndorsementPolicy();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      common_policies_pb.ApplicationPolicy.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.common.StaticCollectionConfig.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional CollectionPolicyConfig member_orgs_policy = 2;
 * @return {?proto.common.CollectionPolicyConfig}
 */
proto.common.StaticCollectionConfig.prototype.getMemberOrgsPolicy = function() {
  return /** @type{?proto.common.CollectionPolicyConfig} */ (
    jspb.Message.getWrapperField(this, proto.common.CollectionPolicyConfig, 2));
};


/**
 * @param {?proto.common.CollectionPolicyConfig|undefined} value
 * @return {!proto.common.StaticCollectionConfig} returns this
*/
proto.common.StaticCollectionConfig.prototype.setMemberOrgsPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.clearMemberOrgsPolicy = function() {
  return this.setMemberOrgsPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.StaticCollectionConfig.prototype.hasMemberOrgsPolicy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 required_peer_count = 3;
 * @return {number}
 */
proto.common.StaticCollectionConfig.prototype.getRequiredPeerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setRequiredPeerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 maximum_peer_count = 4;
 * @return {number}
 */
proto.common.StaticCollectionConfig.prototype.getMaximumPeerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setMaximumPeerCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 block_to_live = 5;
 * @return {number}
 */
proto.common.StaticCollectionConfig.prototype.getBlockToLive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setBlockToLive = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool member_only_read = 6;
 * @return {boolean}
 */
proto.common.StaticCollectionConfig.prototype.getMemberOnlyRead = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setMemberOnlyRead = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool member_only_write = 7;
 * @return {boolean}
 */
proto.common.StaticCollectionConfig.prototype.getMemberOnlyWrite = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.setMemberOnlyWrite = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional ApplicationPolicy endorsement_policy = 8;
 * @return {?proto.common.ApplicationPolicy}
 */
proto.common.StaticCollectionConfig.prototype.getEndorsementPolicy = function() {
  return /** @type{?proto.common.ApplicationPolicy} */ (
    jspb.Message.getWrapperField(this, common_policies_pb.ApplicationPolicy, 8));
};


/**
 * @param {?proto.common.ApplicationPolicy|undefined} value
 * @return {!proto.common.StaticCollectionConfig} returns this
*/
proto.common.StaticCollectionConfig.prototype.setEndorsementPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.StaticCollectionConfig} returns this
 */
proto.common.StaticCollectionConfig.prototype.clearEndorsementPolicy = function() {
  return this.setEndorsementPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.StaticCollectionConfig.prototype.hasEndorsementPolicy = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.common.CollectionPolicyConfig.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.common.CollectionPolicyConfig.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  SIGNATURE_POLICY: 1
};

/**
 * @return {proto.common.CollectionPolicyConfig.PayloadCase}
 */
proto.common.CollectionPolicyConfig.prototype.getPayloadCase = function() {
  return /** @type {proto.common.CollectionPolicyConfig.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.common.CollectionPolicyConfig.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.CollectionPolicyConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.common.CollectionPolicyConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.CollectionPolicyConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionPolicyConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    signaturePolicy: (f = msg.getSignaturePolicy()) && common_policies_pb.SignaturePolicyEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.CollectionPolicyConfig}
 */
proto.common.CollectionPolicyConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.CollectionPolicyConfig;
  return proto.common.CollectionPolicyConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.CollectionPolicyConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.CollectionPolicyConfig}
 */
proto.common.CollectionPolicyConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_policies_pb.SignaturePolicyEnvelope;
      reader.readMessage(value,common_policies_pb.SignaturePolicyEnvelope.deserializeBinaryFromReader);
      msg.setSignaturePolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.CollectionPolicyConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.CollectionPolicyConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.CollectionPolicyConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.CollectionPolicyConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignaturePolicy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_policies_pb.SignaturePolicyEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignaturePolicyEnvelope signature_policy = 1;
 * @return {?proto.common.SignaturePolicyEnvelope}
 */
proto.common.CollectionPolicyConfig.prototype.getSignaturePolicy = function() {
  return /** @type{?proto.common.SignaturePolicyEnvelope} */ (
    jspb.Message.getWrapperField(this, common_policies_pb.SignaturePolicyEnvelope, 1));
};


/**
 * @param {?proto.common.SignaturePolicyEnvelope|undefined} value
 * @return {!proto.common.CollectionPolicyConfig} returns this
*/
proto.common.CollectionPolicyConfig.prototype.setSignaturePolicy = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.common.CollectionPolicyConfig.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.CollectionPolicyConfig} returns this
 */
proto.common.CollectionPolicyConfig.prototype.clearSignaturePolicy = function() {
  return this.setSignaturePolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.CollectionPolicyConfig.prototype.hasSignaturePolicy = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.common);
