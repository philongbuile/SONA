// source: common/configtx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('../common/common_pb.js');
goog.object.extend(proto, common_common_pb);
var common_policies_pb = require('../common/policies_pb.js');
goog.object.extend(proto, common_policies_pb);
goog.exportSymbol('proto.common.Config', null, global);
goog.exportSymbol('proto.common.ConfigEnvelope', null, global);
goog.exportSymbol('proto.common.ConfigGroup', null, global);
goog.exportSymbol('proto.common.ConfigPolicy', null, global);
goog.exportSymbol('proto.common.ConfigSignature', null, global);
goog.exportSymbol('proto.common.ConfigUpdate', null, global);
goog.exportSymbol('proto.common.ConfigUpdateEnvelope', null, global);
goog.exportSymbol('proto.common.ConfigValue', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigEnvelope.displayName = 'proto.common.ConfigEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.Config.displayName = 'proto.common.Config';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigUpdateEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.common.ConfigUpdateEnvelope.repeatedFields_, null);
};
goog.inherits(proto.common.ConfigUpdateEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigUpdateEnvelope.displayName = 'proto.common.ConfigUpdateEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigUpdate.displayName = 'proto.common.ConfigUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigGroup.displayName = 'proto.common.ConfigGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigValue.displayName = 'proto.common.ConfigValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigPolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigPolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigPolicy.displayName = 'proto.common.ConfigPolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.common.ConfigSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.common.ConfigSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.common.ConfigSignature.displayName = 'proto.common.ConfigSignature';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.common.Config.toObject(includeInstance, f),
    lastUpdate: (f = msg.getLastUpdate()) && common_common_pb.Envelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigEnvelope}
 */
proto.common.ConfigEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigEnvelope;
  return proto.common.ConfigEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigEnvelope}
 */
proto.common.ConfigEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.common.Config;
      reader.readMessage(value,proto.common.Config.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 2:
      var value = new common_common_pb.Envelope;
      reader.readMessage(value,common_common_pb.Envelope.deserializeBinaryFromReader);
      msg.setLastUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.common.Config.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Envelope.serializeBinaryToWriter
    );
  }
};


/**
 * optional Config config = 1;
 * @return {?proto.common.Config}
 */
proto.common.ConfigEnvelope.prototype.getConfig = function() {
  return /** @type{?proto.common.Config} */ (
    jspb.Message.getWrapperField(this, proto.common.Config, 1));
};


/**
 * @param {?proto.common.Config|undefined} value
 * @return {!proto.common.ConfigEnvelope} returns this
*/
proto.common.ConfigEnvelope.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ConfigEnvelope} returns this
 */
proto.common.ConfigEnvelope.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ConfigEnvelope.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Envelope last_update = 2;
 * @return {?proto.common.Envelope}
 */
proto.common.ConfigEnvelope.prototype.getLastUpdate = function() {
  return /** @type{?proto.common.Envelope} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Envelope, 2));
};


/**
 * @param {?proto.common.Envelope|undefined} value
 * @return {!proto.common.ConfigEnvelope} returns this
*/
proto.common.ConfigEnvelope.prototype.setLastUpdate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ConfigEnvelope} returns this
 */
proto.common.ConfigEnvelope.prototype.clearLastUpdate = function() {
  return this.setLastUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ConfigEnvelope.prototype.hasLastUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.Config.prototype.toObject = function(opt_includeInstance) {
  return proto.common.Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    sequence: jspb.Message.getFieldWithDefault(msg, 1, 0),
    channelGroup: (f = msg.getChannelGroup()) && proto.common.ConfigGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.Config}
 */
proto.common.Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.Config;
  return proto.common.Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.Config}
 */
proto.common.Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 2:
      var value = new proto.common.ConfigGroup;
      reader.readMessage(value,proto.common.ConfigGroup.deserializeBinaryFromReader);
      msg.setChannelGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getChannelGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.ConfigGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sequence = 1;
 * @return {number}
 */
proto.common.Config.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.Config} returns this
 */
proto.common.Config.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ConfigGroup channel_group = 2;
 * @return {?proto.common.ConfigGroup}
 */
proto.common.Config.prototype.getChannelGroup = function() {
  return /** @type{?proto.common.ConfigGroup} */ (
    jspb.Message.getWrapperField(this, proto.common.ConfigGroup, 2));
};


/**
 * @param {?proto.common.ConfigGroup|undefined} value
 * @return {!proto.common.Config} returns this
*/
proto.common.Config.prototype.setChannelGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.Config} returns this
 */
proto.common.Config.prototype.clearChannelGroup = function() {
  return this.setChannelGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.Config.prototype.hasChannelGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.common.ConfigUpdateEnvelope.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigUpdateEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigUpdateEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigUpdateEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigUpdateEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    configUpdate: msg.getConfigUpdate_asB64(),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.common.ConfigSignature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigUpdateEnvelope}
 */
proto.common.ConfigUpdateEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigUpdateEnvelope;
  return proto.common.ConfigUpdateEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigUpdateEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigUpdateEnvelope}
 */
proto.common.ConfigUpdateEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigUpdate(value);
      break;
    case 2:
      var value = new proto.common.ConfigSignature;
      reader.readMessage(value,proto.common.ConfigSignature.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigUpdateEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigUpdateEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigUpdateEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigUpdateEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigUpdate_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.common.ConfigSignature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes config_update = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.ConfigUpdateEnvelope.prototype.getConfigUpdate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes config_update = 1;
 * This is a type-conversion wrapper around `getConfigUpdate()`
 * @return {string}
 */
proto.common.ConfigUpdateEnvelope.prototype.getConfigUpdate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigUpdate()));
};


/**
 * optional bytes config_update = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfigUpdate()`
 * @return {!Uint8Array}
 */
proto.common.ConfigUpdateEnvelope.prototype.getConfigUpdate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigUpdate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.ConfigUpdateEnvelope} returns this
 */
proto.common.ConfigUpdateEnvelope.prototype.setConfigUpdate = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated ConfigSignature signatures = 2;
 * @return {!Array<!proto.common.ConfigSignature>}
 */
proto.common.ConfigUpdateEnvelope.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.common.ConfigSignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.common.ConfigSignature, 2));
};


/**
 * @param {!Array<!proto.common.ConfigSignature>} value
 * @return {!proto.common.ConfigUpdateEnvelope} returns this
*/
proto.common.ConfigUpdateEnvelope.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.common.ConfigSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.common.ConfigSignature}
 */
proto.common.ConfigUpdateEnvelope.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.common.ConfigSignature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.common.ConfigUpdateEnvelope} returns this
 */
proto.common.ConfigUpdateEnvelope.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    readSet: (f = msg.getReadSet()) && proto.common.ConfigGroup.toObject(includeInstance, f),
    writeSet: (f = msg.getWriteSet()) && proto.common.ConfigGroup.toObject(includeInstance, f),
    isolatedDataMap: (f = msg.getIsolatedDataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigUpdate}
 */
proto.common.ConfigUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigUpdate;
  return proto.common.ConfigUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigUpdate}
 */
proto.common.ConfigUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannelId(value);
      break;
    case 2:
      var value = new proto.common.ConfigGroup;
      reader.readMessage(value,proto.common.ConfigGroup.deserializeBinaryFromReader);
      msg.setReadSet(value);
      break;
    case 3:
      var value = new proto.common.ConfigGroup;
      reader.readMessage(value,proto.common.ConfigGroup.deserializeBinaryFromReader);
      msg.setWriteSet(value);
      break;
    case 5:
      var value = msg.getIsolatedDataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readBytes, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadSet();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.common.ConfigGroup.serializeBinaryToWriter
    );
  }
  f = message.getWriteSet();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.common.ConfigGroup.serializeBinaryToWriter
    );
  }
  f = message.getIsolatedDataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeBytes);
  }
};


/**
 * optional string channel_id = 1;
 * @return {string}
 */
proto.common.ConfigUpdate.prototype.getChannelId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ConfigUpdate} returns this
 */
proto.common.ConfigUpdate.prototype.setChannelId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ConfigGroup read_set = 2;
 * @return {?proto.common.ConfigGroup}
 */
proto.common.ConfigUpdate.prototype.getReadSet = function() {
  return /** @type{?proto.common.ConfigGroup} */ (
    jspb.Message.getWrapperField(this, proto.common.ConfigGroup, 2));
};


/**
 * @param {?proto.common.ConfigGroup|undefined} value
 * @return {!proto.common.ConfigUpdate} returns this
*/
proto.common.ConfigUpdate.prototype.setReadSet = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ConfigUpdate} returns this
 */
proto.common.ConfigUpdate.prototype.clearReadSet = function() {
  return this.setReadSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ConfigUpdate.prototype.hasReadSet = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ConfigGroup write_set = 3;
 * @return {?proto.common.ConfigGroup}
 */
proto.common.ConfigUpdate.prototype.getWriteSet = function() {
  return /** @type{?proto.common.ConfigGroup} */ (
    jspb.Message.getWrapperField(this, proto.common.ConfigGroup, 3));
};


/**
 * @param {?proto.common.ConfigGroup|undefined} value
 * @return {!proto.common.ConfigUpdate} returns this
*/
proto.common.ConfigUpdate.prototype.setWriteSet = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ConfigUpdate} returns this
 */
proto.common.ConfigUpdate.prototype.clearWriteSet = function() {
  return this.setWriteSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ConfigUpdate.prototype.hasWriteSet = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, bytes> isolated_data = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!(string|Uint8Array)>}
 */
proto.common.ConfigUpdate.prototype.getIsolatedDataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!(string|Uint8Array)>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.ConfigUpdate} returns this
 */
proto.common.ConfigUpdate.prototype.clearIsolatedDataMap = function() {
  this.getIsolatedDataMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    groupsMap: (f = msg.getGroupsMap()) ? f.toObject(includeInstance, proto.common.ConfigGroup.toObject) : [],
    valuesMap: (f = msg.getValuesMap()) ? f.toObject(includeInstance, proto.common.ConfigValue.toObject) : [],
    policiesMap: (f = msg.getPoliciesMap()) ? f.toObject(includeInstance, proto.common.ConfigPolicy.toObject) : [],
    modPolicy: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigGroup}
 */
proto.common.ConfigGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigGroup;
  return proto.common.ConfigGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigGroup}
 */
proto.common.ConfigGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = msg.getGroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.ConfigGroup.deserializeBinaryFromReader, "", new proto.common.ConfigGroup());
         });
      break;
    case 3:
      var value = msg.getValuesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.ConfigValue.deserializeBinaryFromReader, "", new proto.common.ConfigValue());
         });
      break;
    case 4:
      var value = msg.getPoliciesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.common.ConfigPolicy.deserializeBinaryFromReader, "", new proto.common.ConfigPolicy());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setModPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getGroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.ConfigGroup.serializeBinaryToWriter);
  }
  f = message.getValuesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.ConfigValue.serializeBinaryToWriter);
  }
  f = message.getPoliciesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.common.ConfigPolicy.serializeBinaryToWriter);
  }
  f = message.getModPolicy();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.common.ConfigGroup.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ConfigGroup} returns this
 */
proto.common.ConfigGroup.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, ConfigGroup> groups = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.ConfigGroup>}
 */
proto.common.ConfigGroup.prototype.getGroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.ConfigGroup>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.common.ConfigGroup));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.ConfigGroup} returns this
 */
proto.common.ConfigGroup.prototype.clearGroupsMap = function() {
  this.getGroupsMap().clear();
  return this;};


/**
 * map<string, ConfigValue> values = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.ConfigValue>}
 */
proto.common.ConfigGroup.prototype.getValuesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.ConfigValue>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.common.ConfigValue));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.ConfigGroup} returns this
 */
proto.common.ConfigGroup.prototype.clearValuesMap = function() {
  this.getValuesMap().clear();
  return this;};


/**
 * map<string, ConfigPolicy> policies = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.common.ConfigPolicy>}
 */
proto.common.ConfigGroup.prototype.getPoliciesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.common.ConfigPolicy>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.common.ConfigPolicy));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.common.ConfigGroup} returns this
 */
proto.common.ConfigGroup.prototype.clearPoliciesMap = function() {
  this.getPoliciesMap().clear();
  return this;};


/**
 * optional string mod_policy = 5;
 * @return {string}
 */
proto.common.ConfigGroup.prototype.getModPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ConfigGroup} returns this
 */
proto.common.ConfigGroup.prototype.setModPolicy = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigValue.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: msg.getValue_asB64(),
    modPolicy: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigValue}
 */
proto.common.ConfigValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigValue;
  return proto.common.ConfigValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigValue}
 */
proto.common.ConfigValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getModPolicy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.common.ConfigValue.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ConfigValue} returns this
 */
proto.common.ConfigValue.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.ConfigValue.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.common.ConfigValue.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.common.ConfigValue.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.ConfigValue} returns this
 */
proto.common.ConfigValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string mod_policy = 3;
 * @return {string}
 */
proto.common.ConfigValue.prototype.getModPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ConfigValue} returns this
 */
proto.common.ConfigValue.prototype.setModPolicy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigPolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigPolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigPolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigPolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    policy: (f = msg.getPolicy()) && common_policies_pb.Policy.toObject(includeInstance, f),
    modPolicy: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigPolicy}
 */
proto.common.ConfigPolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigPolicy;
  return proto.common.ConfigPolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigPolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigPolicy}
 */
proto.common.ConfigPolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setVersion(value);
      break;
    case 2:
      var value = new common_policies_pb.Policy;
      reader.readMessage(value,common_policies_pb.Policy.deserializeBinaryFromReader);
      msg.setPolicy(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModPolicy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigPolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigPolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigPolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigPolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getPolicy();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_policies_pb.Policy.serializeBinaryToWriter
    );
  }
  f = message.getModPolicy();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint64 version = 1;
 * @return {number}
 */
proto.common.ConfigPolicy.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.common.ConfigPolicy} returns this
 */
proto.common.ConfigPolicy.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Policy policy = 2;
 * @return {?proto.common.Policy}
 */
proto.common.ConfigPolicy.prototype.getPolicy = function() {
  return /** @type{?proto.common.Policy} */ (
    jspb.Message.getWrapperField(this, common_policies_pb.Policy, 2));
};


/**
 * @param {?proto.common.Policy|undefined} value
 * @return {!proto.common.ConfigPolicy} returns this
*/
proto.common.ConfigPolicy.prototype.setPolicy = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.common.ConfigPolicy} returns this
 */
proto.common.ConfigPolicy.prototype.clearPolicy = function() {
  return this.setPolicy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.common.ConfigPolicy.prototype.hasPolicy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string mod_policy = 3;
 * @return {string}
 */
proto.common.ConfigPolicy.prototype.getModPolicy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.common.ConfigPolicy} returns this
 */
proto.common.ConfigPolicy.prototype.setModPolicy = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.common.ConfigSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.common.ConfigSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.common.ConfigSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signatureHeader: msg.getSignatureHeader_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.common.ConfigSignature}
 */
proto.common.ConfigSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.common.ConfigSignature;
  return proto.common.ConfigSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.common.ConfigSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.common.ConfigSignature}
 */
proto.common.ConfigSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureHeader(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.common.ConfigSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.common.ConfigSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.common.ConfigSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.common.ConfigSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignatureHeader_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes signature_header = 1;
 * @return {!(string|Uint8Array)}
 */
proto.common.ConfigSignature.prototype.getSignatureHeader = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes signature_header = 1;
 * This is a type-conversion wrapper around `getSignatureHeader()`
 * @return {string}
 */
proto.common.ConfigSignature.prototype.getSignatureHeader_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureHeader()));
};


/**
 * optional bytes signature_header = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureHeader()`
 * @return {!Uint8Array}
 */
proto.common.ConfigSignature.prototype.getSignatureHeader_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureHeader()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.ConfigSignature} returns this
 */
proto.common.ConfigSignature.prototype.setSignatureHeader = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.common.ConfigSignature.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.common.ConfigSignature.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.common.ConfigSignature.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.common.ConfigSignature} returns this
 */
proto.common.ConfigSignature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.common);
