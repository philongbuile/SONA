// source: ledger/rwset/rwset.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.rwset.CollectionHashedReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.CollectionPvtReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.NsPvtReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.NsReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.TxPvtReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.TxReadWriteSet', null, global);
goog.exportSymbol('proto.rwset.TxReadWriteSet.DataModel', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.TxReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rwset.TxReadWriteSet.repeatedFields_, null);
};
goog.inherits(proto.rwset.TxReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.TxReadWriteSet.displayName = 'proto.rwset.TxReadWriteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.NsReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rwset.NsReadWriteSet.repeatedFields_, null);
};
goog.inherits(proto.rwset.NsReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.NsReadWriteSet.displayName = 'proto.rwset.NsReadWriteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.CollectionHashedReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rwset.CollectionHashedReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.CollectionHashedReadWriteSet.displayName = 'proto.rwset.CollectionHashedReadWriteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.TxPvtReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rwset.TxPvtReadWriteSet.repeatedFields_, null);
};
goog.inherits(proto.rwset.TxPvtReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.TxPvtReadWriteSet.displayName = 'proto.rwset.TxPvtReadWriteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.NsPvtReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.rwset.NsPvtReadWriteSet.repeatedFields_, null);
};
goog.inherits(proto.rwset.NsPvtReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.NsPvtReadWriteSet.displayName = 'proto.rwset.NsPvtReadWriteSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.rwset.CollectionPvtReadWriteSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.rwset.CollectionPvtReadWriteSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.rwset.CollectionPvtReadWriteSet.displayName = 'proto.rwset.CollectionPvtReadWriteSet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rwset.TxReadWriteSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.TxReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.TxReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.TxReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.TxReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataModel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nsRwsetList: jspb.Message.toObjectList(msg.getNsRwsetList(),
    proto.rwset.NsReadWriteSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.TxReadWriteSet}
 */
proto.rwset.TxReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.TxReadWriteSet;
  return proto.rwset.TxReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.TxReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.TxReadWriteSet}
 */
proto.rwset.TxReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rwset.TxReadWriteSet.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 2:
      var value = new proto.rwset.NsReadWriteSet;
      reader.readMessage(value,proto.rwset.NsReadWriteSet.deserializeBinaryFromReader);
      msg.addNsRwset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.TxReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.TxReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.TxReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.TxReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataModel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNsRwsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rwset.NsReadWriteSet.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.rwset.TxReadWriteSet.DataModel = {
  KV: 0
};

/**
 * optional DataModel data_model = 1;
 * @return {!proto.rwset.TxReadWriteSet.DataModel}
 */
proto.rwset.TxReadWriteSet.prototype.getDataModel = function() {
  return /** @type {!proto.rwset.TxReadWriteSet.DataModel} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rwset.TxReadWriteSet.DataModel} value
 * @return {!proto.rwset.TxReadWriteSet} returns this
 */
proto.rwset.TxReadWriteSet.prototype.setDataModel = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated NsReadWriteSet ns_rwset = 2;
 * @return {!Array<!proto.rwset.NsReadWriteSet>}
 */
proto.rwset.TxReadWriteSet.prototype.getNsRwsetList = function() {
  return /** @type{!Array<!proto.rwset.NsReadWriteSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rwset.NsReadWriteSet, 2));
};


/**
 * @param {!Array<!proto.rwset.NsReadWriteSet>} value
 * @return {!proto.rwset.TxReadWriteSet} returns this
*/
proto.rwset.TxReadWriteSet.prototype.setNsRwsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rwset.NsReadWriteSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rwset.NsReadWriteSet}
 */
proto.rwset.TxReadWriteSet.prototype.addNsRwset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rwset.NsReadWriteSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rwset.TxReadWriteSet} returns this
 */
proto.rwset.TxReadWriteSet.prototype.clearNsRwsetList = function() {
  return this.setNsRwsetList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rwset.NsReadWriteSet.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.NsReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.NsReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.NsReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.NsReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rwset: msg.getRwset_asB64(),
    collectionHashedRwsetList: jspb.Message.toObjectList(msg.getCollectionHashedRwsetList(),
    proto.rwset.CollectionHashedReadWriteSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.NsReadWriteSet}
 */
proto.rwset.NsReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.NsReadWriteSet;
  return proto.rwset.NsReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.NsReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.NsReadWriteSet}
 */
proto.rwset.NsReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRwset(value);
      break;
    case 3:
      var value = new proto.rwset.CollectionHashedReadWriteSet;
      reader.readMessage(value,proto.rwset.CollectionHashedReadWriteSet.deserializeBinaryFromReader);
      msg.addCollectionHashedRwset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.NsReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.NsReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.NsReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.NsReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRwset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCollectionHashedRwsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.rwset.CollectionHashedReadWriteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.rwset.NsReadWriteSet.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rwset.NsReadWriteSet} returns this
 */
proto.rwset.NsReadWriteSet.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes rwset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rwset.NsReadWriteSet.prototype.getRwset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes rwset = 2;
 * This is a type-conversion wrapper around `getRwset()`
 * @return {string}
 */
proto.rwset.NsReadWriteSet.prototype.getRwset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRwset()));
};


/**
 * optional bytes rwset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRwset()`
 * @return {!Uint8Array}
 */
proto.rwset.NsReadWriteSet.prototype.getRwset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRwset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rwset.NsReadWriteSet} returns this
 */
proto.rwset.NsReadWriteSet.prototype.setRwset = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated CollectionHashedReadWriteSet collection_hashed_rwset = 3;
 * @return {!Array<!proto.rwset.CollectionHashedReadWriteSet>}
 */
proto.rwset.NsReadWriteSet.prototype.getCollectionHashedRwsetList = function() {
  return /** @type{!Array<!proto.rwset.CollectionHashedReadWriteSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rwset.CollectionHashedReadWriteSet, 3));
};


/**
 * @param {!Array<!proto.rwset.CollectionHashedReadWriteSet>} value
 * @return {!proto.rwset.NsReadWriteSet} returns this
*/
proto.rwset.NsReadWriteSet.prototype.setCollectionHashedRwsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.rwset.CollectionHashedReadWriteSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rwset.CollectionHashedReadWriteSet}
 */
proto.rwset.NsReadWriteSet.prototype.addCollectionHashedRwset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.rwset.CollectionHashedReadWriteSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rwset.NsReadWriteSet} returns this
 */
proto.rwset.NsReadWriteSet.prototype.clearCollectionHashedRwsetList = function() {
  return this.setCollectionHashedRwsetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.CollectionHashedReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.CollectionHashedReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.CollectionHashedReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hashedRwset: msg.getHashedRwset_asB64(),
    pvtRwsetHash: msg.getPvtRwsetHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.CollectionHashedReadWriteSet}
 */
proto.rwset.CollectionHashedReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.CollectionHashedReadWriteSet;
  return proto.rwset.CollectionHashedReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.CollectionHashedReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.CollectionHashedReadWriteSet}
 */
proto.rwset.CollectionHashedReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHashedRwset(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPvtRwsetHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.CollectionHashedReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.CollectionHashedReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.CollectionHashedReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashedRwset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPvtRwsetHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rwset.CollectionHashedReadWriteSet} returns this
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes hashed_rwset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getHashedRwset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hashed_rwset = 2;
 * This is a type-conversion wrapper around `getHashedRwset()`
 * @return {string}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getHashedRwset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHashedRwset()));
};


/**
 * optional bytes hashed_rwset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashedRwset()`
 * @return {!Uint8Array}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getHashedRwset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHashedRwset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rwset.CollectionHashedReadWriteSet} returns this
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.setHashedRwset = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pvt_rwset_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getPvtRwsetHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pvt_rwset_hash = 3;
 * This is a type-conversion wrapper around `getPvtRwsetHash()`
 * @return {string}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getPvtRwsetHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPvtRwsetHash()));
};


/**
 * optional bytes pvt_rwset_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPvtRwsetHash()`
 * @return {!Uint8Array}
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.getPvtRwsetHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPvtRwsetHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rwset.CollectionHashedReadWriteSet} returns this
 */
proto.rwset.CollectionHashedReadWriteSet.prototype.setPvtRwsetHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rwset.TxPvtReadWriteSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.TxPvtReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.TxPvtReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.TxPvtReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.TxPvtReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataModel: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nsPvtRwsetList: jspb.Message.toObjectList(msg.getNsPvtRwsetList(),
    proto.rwset.NsPvtReadWriteSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.TxPvtReadWriteSet}
 */
proto.rwset.TxPvtReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.TxPvtReadWriteSet;
  return proto.rwset.TxPvtReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.TxPvtReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.TxPvtReadWriteSet}
 */
proto.rwset.TxPvtReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.rwset.TxReadWriteSet.DataModel} */ (reader.readEnum());
      msg.setDataModel(value);
      break;
    case 2:
      var value = new proto.rwset.NsPvtReadWriteSet;
      reader.readMessage(value,proto.rwset.NsPvtReadWriteSet.deserializeBinaryFromReader);
      msg.addNsPvtRwset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.TxPvtReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.TxPvtReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.TxPvtReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.TxPvtReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataModel();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNsPvtRwsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rwset.NsPvtReadWriteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional TxReadWriteSet.DataModel data_model = 1;
 * @return {!proto.rwset.TxReadWriteSet.DataModel}
 */
proto.rwset.TxPvtReadWriteSet.prototype.getDataModel = function() {
  return /** @type {!proto.rwset.TxReadWriteSet.DataModel} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.rwset.TxReadWriteSet.DataModel} value
 * @return {!proto.rwset.TxPvtReadWriteSet} returns this
 */
proto.rwset.TxPvtReadWriteSet.prototype.setDataModel = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * repeated NsPvtReadWriteSet ns_pvt_rwset = 2;
 * @return {!Array<!proto.rwset.NsPvtReadWriteSet>}
 */
proto.rwset.TxPvtReadWriteSet.prototype.getNsPvtRwsetList = function() {
  return /** @type{!Array<!proto.rwset.NsPvtReadWriteSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rwset.NsPvtReadWriteSet, 2));
};


/**
 * @param {!Array<!proto.rwset.NsPvtReadWriteSet>} value
 * @return {!proto.rwset.TxPvtReadWriteSet} returns this
*/
proto.rwset.TxPvtReadWriteSet.prototype.setNsPvtRwsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rwset.NsPvtReadWriteSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rwset.NsPvtReadWriteSet}
 */
proto.rwset.TxPvtReadWriteSet.prototype.addNsPvtRwset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rwset.NsPvtReadWriteSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rwset.TxPvtReadWriteSet} returns this
 */
proto.rwset.TxPvtReadWriteSet.prototype.clearNsPvtRwsetList = function() {
  return this.setNsPvtRwsetList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.rwset.NsPvtReadWriteSet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.NsPvtReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.NsPvtReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.NsPvtReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.NsPvtReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    namespace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    collectionPvtRwsetList: jspb.Message.toObjectList(msg.getCollectionPvtRwsetList(),
    proto.rwset.CollectionPvtReadWriteSet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.NsPvtReadWriteSet}
 */
proto.rwset.NsPvtReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.NsPvtReadWriteSet;
  return proto.rwset.NsPvtReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.NsPvtReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.NsPvtReadWriteSet}
 */
proto.rwset.NsPvtReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 2:
      var value = new proto.rwset.CollectionPvtReadWriteSet;
      reader.readMessage(value,proto.rwset.CollectionPvtReadWriteSet.deserializeBinaryFromReader);
      msg.addCollectionPvtRwset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.NsPvtReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.NsPvtReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.NsPvtReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.NsPvtReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCollectionPvtRwsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.rwset.CollectionPvtReadWriteSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional string namespace = 1;
 * @return {string}
 */
proto.rwset.NsPvtReadWriteSet.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rwset.NsPvtReadWriteSet} returns this
 */
proto.rwset.NsPvtReadWriteSet.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CollectionPvtReadWriteSet collection_pvt_rwset = 2;
 * @return {!Array<!proto.rwset.CollectionPvtReadWriteSet>}
 */
proto.rwset.NsPvtReadWriteSet.prototype.getCollectionPvtRwsetList = function() {
  return /** @type{!Array<!proto.rwset.CollectionPvtReadWriteSet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.rwset.CollectionPvtReadWriteSet, 2));
};


/**
 * @param {!Array<!proto.rwset.CollectionPvtReadWriteSet>} value
 * @return {!proto.rwset.NsPvtReadWriteSet} returns this
*/
proto.rwset.NsPvtReadWriteSet.prototype.setCollectionPvtRwsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.rwset.CollectionPvtReadWriteSet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.rwset.CollectionPvtReadWriteSet}
 */
proto.rwset.NsPvtReadWriteSet.prototype.addCollectionPvtRwset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.rwset.CollectionPvtReadWriteSet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.rwset.NsPvtReadWriteSet} returns this
 */
proto.rwset.NsPvtReadWriteSet.prototype.clearCollectionPvtRwsetList = function() {
  return this.setCollectionPvtRwsetList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.toObject = function(opt_includeInstance) {
  return proto.rwset.CollectionPvtReadWriteSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.rwset.CollectionPvtReadWriteSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.CollectionPvtReadWriteSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rwset: msg.getRwset_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.rwset.CollectionPvtReadWriteSet}
 */
proto.rwset.CollectionPvtReadWriteSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.rwset.CollectionPvtReadWriteSet;
  return proto.rwset.CollectionPvtReadWriteSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.rwset.CollectionPvtReadWriteSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.rwset.CollectionPvtReadWriteSet}
 */
proto.rwset.CollectionPvtReadWriteSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRwset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.rwset.CollectionPvtReadWriteSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.rwset.CollectionPvtReadWriteSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.rwset.CollectionPvtReadWriteSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRwset_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.rwset.CollectionPvtReadWriteSet} returns this
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes rwset = 2;
 * @return {!(string|Uint8Array)}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.getRwset = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes rwset = 2;
 * This is a type-conversion wrapper around `getRwset()`
 * @return {string}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.getRwset_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRwset()));
};


/**
 * optional bytes rwset = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRwset()`
 * @return {!Uint8Array}
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.getRwset_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRwset()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.rwset.CollectionPvtReadWriteSet} returns this
 */
proto.rwset.CollectionPvtReadWriteSet.prototype.setRwset = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


goog.object.extend(exports, proto.rwset);
